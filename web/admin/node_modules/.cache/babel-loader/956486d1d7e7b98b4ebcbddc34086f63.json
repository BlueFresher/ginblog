{"ast":null,"code":"const columns = [{\n  title: 'ID',\n  dataIndex: 'ID',\n  width: '10%',\n  key: 'id',\n  align: 'center'\n}, {\n  title: '用户名',\n  dataIndex: 'username',\n  width: '20%',\n  key: 'username',\n  align: 'center'\n}, {\n  title: '角色',\n  dataIndex: 'role',\n  width: '20%',\n  key: 'role',\n  scopedSlots: {\n    customRender: 'role'\n  },\n  align: 'center'\n}, {\n  title: '操作',\n  width: '30%',\n  key: 'action',\n  scopedSlots: {\n    customRender: 'action'\n  },\n  align: 'center'\n}];\nexport default {\n  data() {\n    return {\n      pagination: {\n        pageSizeOptions: ['5', '10', '20'],\n        pageSize: 5,\n        total: 0,\n        showSizeChanger: true,\n        showTotal: total => `共${total}条`\n      },\n      userlist: [],\n      columns,\n      queryParam: {\n        username: '',\n        pagesize: 5,\n        pagenum: 1\n      },\n      userInfo: {\n        username: '',\n        password: '',\n        checkpass: '',\n        role: 2\n      },\n      newUser: {\n        username: '',\n        password: '',\n        checkpass: '',\n        role: 2\n      },\n      visible: false,\n      addUserVisible: false,\n      addUserRules: {\n        username: [{\n          validator: (rule, value, callback) => {\n            if (this.newUser.username == '') {\n              callback(new Error('请输入用户名'));\n            }\n            if ([...this.newUser.username].length < 4 || [...this.newUser.username].length > 12) {\n              callback(new Error('用户名应当在4到12个字符之间'));\n            } else {\n              callback();\n            }\n          },\n          trigger: 'blur'\n        }],\n        password: [{\n          validator: (rule, value, callback) => {\n            if (this.newUser.password == \"\") {\n              callback(new Error('请输入密码'));\n            }\n            if ([...this.newUser.password].length < 6 || [...this.newUser.password].length > 20) {\n              callback(new Error('密码应该在6-20个字符之间'));\n            } else {\n              callback();\n            }\n          },\n          trigger: 'blur'\n        }],\n        checkpass: [{\n          validator: (rule, value, callback) => {\n            if (this.newUser.checkpass == \"\") {\n              callback(new Error('请输入密码'));\n            }\n            if (this.newUser.password != this.newUser.checkpass) {\n              callback(new Error('密码不一致，请重新输入'));\n            } else {\n              callback();\n            }\n          },\n          trigger: 'blur'\n        }]\n      },\n      userRules: {\n        username: [{\n          validator: (rule, value, callback) => {\n            if (this.userInfo.username == '') {\n              callback(new Error('请输入用户名'));\n            }\n            if ([...this.userInfo.username].length < 4 || [...this.userInfo.username].length > 12) {\n              callback(new Error('用户名应当在4到12个字符之间'));\n            } else {\n              callback();\n            }\n          },\n          trigger: 'blur'\n        }],\n        password: [{\n          validator: (rule, value, callback) => {\n            if (this.userInfo.password == \"\") {\n              callback(new Error('请输入密码'));\n            }\n            if ([...this.userInfo.password].length < 6 || [...this.userInfo.password].length > 20) {\n              callback(new Error('密码应该在6-20个字符之间'));\n            } else {\n              callback();\n            }\n          },\n          trigger: 'blur'\n        }],\n        checkpass: [{\n          validator: (rule, value, callback) => {\n            if (this.userInfo.checkpass == \"\") {\n              callback(new Error('请输入密码'));\n            }\n            if (this.userInfo.password != this.userInfo.checkpass) {\n              callback(new Error('密码不一致，请重新输入'));\n            } else {\n              callback();\n            }\n          },\n          trigger: 'blur'\n        }]\n      },\n      editUserVisible: false\n    };\n  },\n  created() {\n    this.getUserList();\n  },\n  methods: {\n    // 查询用户列表\n    async getUserList() {\n      const {\n        data: res\n      } = await this.$http.get('users', {\n        params: {\n          username: this.queryParam.username,\n          pagesize: this.queryParam.pagesize,\n          pagenum: this.queryParam.pagenum\n        }\n      });\n      // console.log(res)\n      if (res.status != 200) return this.$message.error(res.message);\n      this.userlist = res.data;\n      this.pagination.total = res.total;\n    },\n    // 更改分页\n    handleTableChange(pagination, filters, sorter) {\n      var pager = {\n        ...this.pagination\n      };\n      pager.current = pagination.current;\n      pager.pageSize = pagination.pageSize;\n      this.queryParam.pagesize = pagination.pageSize;\n      this.queryParam.pagenum = pagination.current;\n      if (pagination.pageSize !== this.pagination.pageSize) {\n        this.queryParam.pagenum = 1;\n        pager.current = 1;\n      }\n      this.pagination = pager;\n      this.getUserList();\n    },\n    // 删除用户\n    deleteUser(id) {\n      this.$confirm({\n        title: '提示：请再次确认',\n        content: '确认要删除该用户么？一旦删除无法恢复',\n        onOk: async () => {\n          const res = await this.$http.delete(`user/${id}`);\n          if (res.status != 200) return this.$message.error(res.message);\n          this.$message.success('删除成功');\n          this.getUserList();\n          console.log(res);\n        },\n        onCancel: () => {\n          this.$message.info('已取消删除');\n        }\n      });\n    },\n    addUserOk() {\n      this.$refs.addUserRef.validate(async valid => {\n        if (!valid) return this.$message.error('参数不符合要求，请重新输入');\n        const {\n          data: res\n        } = await this.$http.post('user/add', {\n          username: this.newUser.username,\n          password: this.newUser.password,\n          role: this.newUser.role\n        });\n        // console.log(this.userInfo.role)\n        console.log(res);\n        if (res.status != 200) return this.$message.error(res.message);\n        this.$refs.addUserRef.resetFields();\n        this.addUserVisible = false;\n        this.$message.success('添加用户成功');\n        this.getUserList();\n      });\n    },\n    addUserCancel() {\n      // if (this.$ref.addUserRef !== undefined) this.$refs.addUserRef.resetFields()\n      this.$refs.addUserRef.resetFields();\n      this.addUserVisible = false;\n      this.$message.info('新增用户已取消');\n    },\n    adminChange(checked) {\n      // this.userInfo.role = Number(value)\n      if (checked) {\n        this.userInfo.role = 1;\n      } else {\n        this.userInfo.role = 2;\n      }\n      // console.log(this.userInfo.role)\n    },\n\n    // 编辑用户\n    async editUser(id) {\n      this.editUserVisible = true;\n      const {\n        data: res\n      } = await this.$http.get(`user/${id}`);\n      this.userInfo = res.data;\n      this.userInfo.id = id;\n    },\n    editUserOk() {\n      this.$refs.editUserRef.validate(async valid => {\n        if (!valid) return this.$message.error('参数不符合要求，请重新输入');\n        const {\n          data: res\n        } = await this.$http.put(`user/${this.userInfo.id}`, {\n          username: this.userInfo.username,\n          role: this.userInfo.role\n        });\n        // console.log(this.userInfo.role)\n        console.log(res);\n        if (res.status != 200) return this.$message.error(res.message);\n        this.$refs.editUserRef.resetFields();\n        this.editUserVisible = false;\n        this.$message.success('更新用户信息成功');\n        this.getUserList();\n      });\n    },\n    editUserCancel(value) {\n      this.$refs.editUserRef.resetFields();\n      this.editUserVisible = false;\n      this.$message.info('编辑已取消');\n    }\n  }\n};","map":{"version":3,"mappings":"AA0EA,iBACA;EACAA;EACAC;EACAC;EACAC;EACAC;AACA,GACA;EACAJ;EACAC;EACAC;EACAC;EACAC;AACA,GACA;EACAJ;EACAC;EACAC;EACAC;EACAE;IAAAC;EAAA;EACAF;AACA,GACA;EACAJ;EACAE;EACAC;EACAE;IAAAC;EAAA;EACAF;AACA,EACA;AAEA;EACAG;IACA;MACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;MAEAC;MACAC;MACAC;QACAC;QACAC;QACAC;MACA;MACAC;QACAH;QACAI;QACAC;QACAC;MACA;MACAC;QACAP;QACAI;QACAC;QACAC;MACA;MACAE;MACAC;MACAC;QACAV,WACA;UACAW;YACA;cACAC;YACA;YACA;cACAA;YACA;cACAA;YACA;UACA;UACAC;QACA,EACA;QACAT;UAAAO;YACA;cACAC;YACA;YACA;cACAA;YACA;cACAA;YACA;UACA;UAAAC;QAAA;QAEAR;UAAAM;YACA;cACAC;YACA;YACA;cACAA;YACA;cACAA;YACA;UACA;UAAAC;QAAA;MACA;MACAC;QACAd,WACA;UACAW;YACA;cACAC;YACA;YACA;cACAA;YACA;cACAA;YACA;UACA;UACAC;QACA,EACA;QACAT;UAAAO;YACA;cACAC;YACA;YACA;cACAA;YACA;cACAA;YACA;UACA;UAAAC;QAAA;QAEAR;UAAAM;YACA;cACAC;YACA;YACA;cACAA;YACA;cACAA;YACA;UACA;UAAAC;QAAA;MACA;MACAE;IACA;EACA;EACAC;IACA;EACA;EACAC;IACA;IACA;MACA;QAAA3B;MAAA;QACA4B;UACAlB;UACAC;UACAC;QACA;MACA;MACA;MACA;MACA;MACA;IACA;IACA;IACAiB;MACA;QAAA;MAAA;MACAC;MACAA;MACA;MACA;MAEA;QACA;QACAA;MACA;MACA;MACA;IACA;IACA;IACAC;MACA;QACAtC;QACAuC;QACAC;UACA;UACA;UACA;UACA;UACAC;QACA;QACAC;UACA;QACA;MACA;IACA;IACAC;MACA;QACA;QACA;UAAApC;QAAA;UACAU;UACAI;UACAE;QACA;QACA;QACAkB;QACA;QACA;QACA;QACA;QACA;MACA;IACA;IACAG;MACA;MACA;MACA;MACA;IACA;IACAC;MACA;MACA;QACA;MACA;QACA;MACA;MACA;IACA;;IAEA;IACA;MACA;MACA;QAAAtC;MAAA;MACA;MACA;IACA;IACAuC;MACA;QACA;QACA;UAAAvC;QAAA;UACAU;UACAM;QACA;QACA;QACAkB;QACA;QACA;QACA;QACA;QACA;MACA;IACA;IACAM;MACA;MACA;MACA;IACA;EACA;AACA","names":["title","dataIndex","width","key","align","scopedSlots","customRender","data","pagination","pageSizeOptions","pageSize","total","showSizeChanger","showTotal","userlist","columns","queryParam","username","pagesize","pagenum","userInfo","password","checkpass","role","newUser","visible","addUserVisible","addUserRules","validator","callback","trigger","userRules","editUserVisible","created","methods","params","handleTableChange","pager","deleteUser","content","onOk","console","onCancel","addUserOk","addUserCancel","adminChange","editUserOk","editUserCancel"],"sourceRoot":"src/components/user","sources":["UserList.vue"],"sourcesContent":["<template>\n    <div>\n        <h3>用户列表页面</h3>\n        <a-card>\n            <a-row :gutter=\"20\">\n                <a-col :span=\"6\">\n                    <a-input-search v-model=\"queryParam.username\" placeholder=\"输入用户名查找\" enter-button allowClear @search=\"getUserList\"/>\n                </a-col>\n                <a-col :span=\"4\">\n                    <a-button type=\"primary\" @click=\"addUserVisible = true\">新增</a-button>\n                </a-col>\n            </a-row>\n\n            <a-table \n                rowKey=\"ID\"\n                :columns=\"columns\"\n                :pagination='pagination' \n                :dataSource=\"userlist\"\n                bordered\n                @change=\"handleTableChange\">\n                <span slot=\"role\" slot-scope=\"data\">{{ data == 1 ? '管理员' : '订阅者' }}</span>\n                <template slot=\"action\" slot-scope=\"data\">\n                    <div class=\"actionSlot\">\n                        <a-button type=\"primary\" icon=\"edit\" style=\"margin-right:15px\" @click=\"editUser(data.ID)\">编辑</a-button>\n                        <a-button type=\"danger\" icon=\"delete\" style=\"margin-right:15px\" @click=\"deleteUser(data.ID)\">删除</a-button>\n                        <a-button type=\"info\" icon=\"info\" @click=\"deleteUser(data.ID)\">重置密码</a-button>\n                    </div>\n                </template>\n            </a-table>\n        </a-card>\n\n        <!--新增用户区域-->\n        <a-modal\n        closable\n        title=\"新增用户\"\n        :visible=\"addUserVisible\"\n        width=\"60%\"\n        @ok=\"addUserOk\"\n        @cancel=\"addUserCancel\"\n        :destoryOnClose=\"true\">\n        <a-form-model :model=\"newUser\" :rules=\"addUserRules\" ref=\"addUserRef\">\n            <a-form-model-item label=\"用户名\" prop=\"username\">\n                <a-input v-model=\"newUser.username\"></a-input>\n            </a-form-model-item>\n            <a-form-model-item has-feedback label=\"密码\" prop=\"password\">\n                <a-input-password v-model=\"newUser.password\"></a-input-password>\n            </a-form-model-item>\n            <a-form-model-item has-feedback label=\"确认密码\" prop=\"checkpass\">\n                <a-input-password v-model=\"newUser.checkpass\"></a-input-password>\n            </a-form-model-item>\n        </a-form-model>\n      </a-modal>\n      <!--编辑用户-->\n      <a-modal\n      closable\n      title=\"编辑用户\"\n      :visible=\"editUserVisible\"\n      width=\"60%\"\n      @ok=\"editUserOk\"\n      @cancel=\"editUserCancel\"\n      :destoryOnClose=\"true\">\n      <a-form-model :model=\"userInfo\" :rules=\"userRules\" ref=\"editUserRef\">\n          <a-form-model-item label=\"用户名\" prop=\"username\">\n              <a-input v-model=\"userInfo.username\"></a-input>\n          </a-form-model-item>\n          <a-form-model-item label=\"是否为管理员\" prop=\"role\">\n              <a-switch checked-children=\"是\" un-checked-children=\"否\" @change=\"adminChange\" />\n          </a-form-model-item>\n      </a-form-model>\n      </a-modal>\n    </div>\n</template>\n\n<script>\nconst columns = [\n    {\n        title: 'ID',\n        dataIndex: 'ID',\n        width:'10%',\n        key: 'id',\n        align:'center',\n   },\n   {\n        title: '用户名',\n        dataIndex: 'username',\n        width:'20%',\n        key: 'username',\n        align:'center',\n   },\n   {\n        title: '角色',\n        dataIndex: 'role',\n        width:'20%',\n        key: 'role',\n        scopedSlots:{customRender:'role'},\n        align:'center',\n   },\n   {\n        title: '操作',\n        width:'30%',\n        key: 'action',\n        scopedSlots:{customRender:'action'},\n        align:'center',\n   },\n]\n\nexport default{\n    data(){\n        return {\n            pagination:{\n                pageSizeOptions:['5', '10', '20'],\n                pageSize: 5,\n                total:0,\n                showSizeChanger:true,\n                showTotal:(total)=>`共${total}条`,\n            },\n\n            userlist:[],\n            columns,\n            queryParam:{\n                username:'',\n                pagesize:5,\n                pagenum:1,\n            },\n            userInfo:{\n                username:'',\n                password:'',\n                checkpass:'',\n                role:2,\n            },\n            newUser:{\n                username:'',\n                password:'',\n                checkpass:'',\n                role:2,\n            },\n            visible: false,\n            addUserVisible: false,\n            addUserRules:{\n                username: [\n                    {\n                        validator: (rule, value, callback) => {\n                        if (this.newUser.username == '') {\n                            callback(new Error('请输入用户名'))\n                        }\n                        if ([...this.newUser.username].length < 4 || [...this.newUser.username].length > 12) {\n                            callback(new Error('用户名应当在4到12个字符之间'))\n                        } else {\n                            callback()\n                        }\n                        },\n                        trigger: 'blur',\n                    },\n                ],\n                password:[{validator:(rule, value, callback)=>{\n                if (this.newUser.password == \"\") {\n                    callback(new Error('请输入密码'))\n                }\n                if ([... this.newUser.password].length < 6 || [... this.newUser.password].length > 20){\n                    callback(new Error('密码应该在6-20个字符之间'))\n                } else {\n                    callback()\n                }\n                }, trigger: 'blur'}],\n            \n                checkpass:[{validator:(rule, value, callback)=>{\n                if (this.newUser.checkpass == \"\") {\n                    callback(new Error('请输入密码'))\n                }\n                if (this.newUser.password != this.newUser.checkpass){\n                    callback(new Error('密码不一致，请重新输入'))\n                } else {\n                    callback()\n                }\n                }, trigger: 'blur'}],\n            },\n            userRules:{\n                username: [\n                    {\n                        validator: (rule, value, callback) => {\n                        if (this.userInfo.username == '') {\n                            callback(new Error('请输入用户名'))\n                        }\n                        if ([...this.userInfo.username].length < 4 || [...this.userInfo.username].length > 12) {\n                            callback(new Error('用户名应当在4到12个字符之间'))\n                        } else {\n                            callback()\n                        }\n                        },\n                        trigger: 'blur',\n                    },\n                ],\n                password:[{validator:(rule, value, callback)=>{\n                if (this.userInfo.password == \"\") {\n                    callback(new Error('请输入密码'))\n                }\n                if ([... this.userInfo.password].length < 6 || [... this.userInfo.password].length > 20){\n                    callback(new Error('密码应该在6-20个字符之间'))\n                } else {\n                    callback()\n                }\n                }, trigger: 'blur'}],\n            \n                checkpass:[{validator:(rule, value, callback)=>{\n                if (this.userInfo.checkpass == \"\") {\n                    callback(new Error('请输入密码'))\n                }\n                if (this.userInfo.password != this.userInfo.checkpass){\n                    callback(new Error('密码不一致，请重新输入'))\n                } else {\n                    callback()\n                }\n                }, trigger: 'blur'}],\n            },\n            editUserVisible: false\n        }\n    },\n    created(){\n        this.getUserList()\n    },\n    methods:{\n        // 查询用户列表\n        async getUserList() {\n            const { data:res } = await this.$http.get('users', {\n                params:{\n                    username:this.queryParam.username,\n                    pagesize:this.queryParam.pagesize, \n                    pagenum:this.queryParam.pagenum\n                }\n            })\n            // console.log(res)\n            if (res.status != 200) return this.$message.error(res.message)\n            this.userlist = res.data\n            this.pagination.total = res.total\n        },\n        // 更改分页\n        handleTableChange(pagination, filters, sorter) {\n            var pager = { ...this.pagination }\n            pager.current = pagination.current\n            pager.pageSize = pagination.pageSize\n            this.queryParam.pagesize = pagination.pageSize\n            this.queryParam.pagenum = pagination.current\n\n            if (pagination.pageSize !== this.pagination.pageSize) {\n                this.queryParam.pagenum = 1\n                pager.current = 1\n            }\n            this.pagination = pager\n            this.getUserList()\n        },\n        // 删除用户\n        deleteUser(id) {\n            this.$confirm({\n                title: '提示：请再次确认',\n                content: '确认要删除该用户么？一旦删除无法恢复',\n                onOk: async () => {\n                    const res = await this.$http.delete(`user/${id}`)\n                    if (res.status != 200) return this.$message.error(res.message)\n                    this.$message.success('删除成功')\n                    this.getUserList()\n                    console.log(res)\n                },\n                onCancel: () => {\n                    this.$message.info('已取消删除')\n                },\n            });\n        },\n        addUserOk(){\n            this.$refs.addUserRef.validate(async (valid) => {\n                if (!valid) return this.$message.error('参数不符合要求，请重新输入')\n                const { data: res } = await this.$http.post('user/add', {\n                username: this.newUser.username,\n                password: this.newUser.password,\n                role: this.newUser.role,\n                })\n                // console.log(this.userInfo.role)\n                console.log(res)\n                if (res.status != 200) return this.$message.error(res.message)\n                this.$refs.addUserRef.resetFields()\n                this.addUserVisible = false\n                this.$message.success('添加用户成功')\n                this.getUserList()\n            })\n        },\n        addUserCancel(){\n            // if (this.$ref.addUserRef !== undefined) this.$refs.addUserRef.resetFields()\n            this.$refs.addUserRef.resetFields()\n            this.addUserVisible = false\n            this.$message.info('新增用户已取消')\n        },\n        adminChange(checked){\n            // this.userInfo.role = Number(value)\n            if (checked) {\n                this.userInfo.role = 1\n            } else {\n                this.userInfo.role = 2\n            }\n            // console.log(this.userInfo.role)\n        },\n\n        // 编辑用户\n        async editUser(id) {\n            this.editUserVisible = true\n            const {data:res} = await this.$http.get(`user/${id}`)\n            this.userInfo = res.data\n            this.userInfo.id = id\n        },\n        editUserOk(){\n            this.$refs.editUserRef.validate(async (valid) => {\n                if (!valid) return this.$message.error('参数不符合要求，请重新输入')\n                const { data: res } = await this.$http.put(`user/${this.userInfo.id}`, {\n                username: this.userInfo.username,\n                role: this.userInfo.role,\n                })\n                // console.log(this.userInfo.role)\n                console.log(res)\n                if (res.status != 200) return this.$message.error(res.message)\n                this.$refs.editUserRef.resetFields()\n                this.editUserVisible = false\n                this.$message.success('更新用户信息成功')\n                this.getUserList()\n            })\n        },\n        editUserCancel(value){\n            this.$refs.editUserRef.resetFields()\n            this.editUserVisible = false\n            this.$message.info('编辑已取消')\n        }\n    },\n}\n</script>\n\n<style scoped>\n.actionSlot{\n    display: flex;\n    justify-content: center;\n\n}\n</style>"]},"metadata":{},"sourceType":"module"}