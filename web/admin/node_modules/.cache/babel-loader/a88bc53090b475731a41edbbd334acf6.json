{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\n/**\n * TinyMCE version 6.2.0 (2022-09-08)\n */\n\n(function () {\n  'use strict';\n\n  var global$3 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n  const hasProto = (v, constructor, predicate) => {\n    var _a;\n    if (predicate(v, constructor.prototype)) {\n      return true;\n    } else {\n      return ((_a = v.constructor) === null || _a === void 0 ? void 0 : _a.name) === constructor.name;\n    }\n  };\n  const typeOf = x => {\n    const t = typeof x;\n    if (x === null) {\n      return 'null';\n    } else if (t === 'object' && Array.isArray(x)) {\n      return 'array';\n    } else if (t === 'object' && hasProto(x, String, (o, proto) => proto.isPrototypeOf(o))) {\n      return 'string';\n    } else {\n      return t;\n    }\n  };\n  const isType$1 = type => value => typeOf(value) === type;\n  const isSimpleType = type => value => typeof value === type;\n  const eq$1 = t => a => t === a;\n  const isString = isType$1('string');\n  const isArray = isType$1('array');\n  const isBoolean = isSimpleType('boolean');\n  const isUndefined = eq$1(undefined);\n  const isNullable = a => a === null || a === undefined;\n  const isNonNullable = a => !isNullable(a);\n  const isFunction = isSimpleType('function');\n  const isNumber = isSimpleType('number');\n  const noop = () => {};\n  const compose1 = (fbc, fab) => a => fbc(fab(a));\n  const constant = value => {\n    return () => {\n      return value;\n    };\n  };\n  const identity = x => {\n    return x;\n  };\n  const tripleEquals = (a, b) => {\n    return a === b;\n  };\n  function curry(fn, ...initialArgs) {\n    return (...restArgs) => {\n      const all = initialArgs.concat(restArgs);\n      return fn.apply(null, all);\n    };\n  }\n  const call = f => {\n    f();\n  };\n  const never = constant(false);\n  const always = constant(true);\n  class Optional {\n    constructor(tag, value) {\n      this.tag = tag;\n      this.value = value;\n    }\n    static some(value) {\n      return new Optional(true, value);\n    }\n    static none() {\n      return Optional.singletonNone;\n    }\n    fold(onNone, onSome) {\n      if (this.tag) {\n        return onSome(this.value);\n      } else {\n        return onNone();\n      }\n    }\n    isSome() {\n      return this.tag;\n    }\n    isNone() {\n      return !this.tag;\n    }\n    map(mapper) {\n      if (this.tag) {\n        return Optional.some(mapper(this.value));\n      } else {\n        return Optional.none();\n      }\n    }\n    bind(binder) {\n      if (this.tag) {\n        return binder(this.value);\n      } else {\n        return Optional.none();\n      }\n    }\n    exists(predicate) {\n      return this.tag && predicate(this.value);\n    }\n    forall(predicate) {\n      return !this.tag || predicate(this.value);\n    }\n    filter(predicate) {\n      if (!this.tag || predicate(this.value)) {\n        return this;\n      } else {\n        return Optional.none();\n      }\n    }\n    getOr(replacement) {\n      return this.tag ? this.value : replacement;\n    }\n    or(replacement) {\n      return this.tag ? this : replacement;\n    }\n    getOrThunk(thunk) {\n      return this.tag ? this.value : thunk();\n    }\n    orThunk(thunk) {\n      return this.tag ? this : thunk();\n    }\n    getOrDie(message) {\n      if (!this.tag) {\n        throw new Error(message !== null && message !== void 0 ? message : 'Called getOrDie on None');\n      } else {\n        return this.value;\n      }\n    }\n    static from(value) {\n      return isNonNullable(value) ? Optional.some(value) : Optional.none();\n    }\n    getOrNull() {\n      return this.tag ? this.value : null;\n    }\n    getOrUndefined() {\n      return this.value;\n    }\n    each(worker) {\n      if (this.tag) {\n        worker(this.value);\n      }\n    }\n    toArray() {\n      return this.tag ? [this.value] : [];\n    }\n    toString() {\n      return this.tag ? `some(${this.value})` : 'none()';\n    }\n  }\n  Optional.singletonNone = new Optional(false);\n  const keys = Object.keys;\n  const hasOwnProperty = Object.hasOwnProperty;\n  const each$1 = (obj, f) => {\n    const props = keys(obj);\n    for (let k = 0, len = props.length; k < len; k++) {\n      const i = props[k];\n      const x = obj[i];\n      f(x, i);\n    }\n  };\n  const objAcc = r => (x, i) => {\n    r[i] = x;\n  };\n  const internalFilter = (obj, pred, onTrue, onFalse) => {\n    each$1(obj, (x, i) => {\n      (pred(x, i) ? onTrue : onFalse)(x, i);\n    });\n  };\n  const filter$1 = (obj, pred) => {\n    const t = {};\n    internalFilter(obj, pred, objAcc(t), noop);\n    return t;\n  };\n  const mapToArray = (obj, f) => {\n    const r = [];\n    each$1(obj, (value, name) => {\n      r.push(f(value, name));\n    });\n    return r;\n  };\n  const values = obj => {\n    return mapToArray(obj, identity);\n  };\n  const size = obj => {\n    return keys(obj).length;\n  };\n  const get$4 = (obj, key) => {\n    return has(obj, key) ? Optional.from(obj[key]) : Optional.none();\n  };\n  const has = (obj, key) => hasOwnProperty.call(obj, key);\n  const hasNonNullableKey = (obj, key) => has(obj, key) && obj[key] !== undefined && obj[key] !== null;\n  const nativeIndexOf = Array.prototype.indexOf;\n  const nativePush = Array.prototype.push;\n  const rawIndexOf = (ts, t) => nativeIndexOf.call(ts, t);\n  const contains = (xs, x) => rawIndexOf(xs, x) > -1;\n  const exists = (xs, pred) => {\n    for (let i = 0, len = xs.length; i < len; i++) {\n      const x = xs[i];\n      if (pred(x, i)) {\n        return true;\n      }\n    }\n    return false;\n  };\n  const range = (num, f) => {\n    const r = [];\n    for (let i = 0; i < num; i++) {\n      r.push(f(i));\n    }\n    return r;\n  };\n  const map = (xs, f) => {\n    const len = xs.length;\n    const r = new Array(len);\n    for (let i = 0; i < len; i++) {\n      const x = xs[i];\n      r[i] = f(x, i);\n    }\n    return r;\n  };\n  const each = (xs, f) => {\n    for (let i = 0, len = xs.length; i < len; i++) {\n      const x = xs[i];\n      f(x, i);\n    }\n  };\n  const eachr = (xs, f) => {\n    for (let i = xs.length - 1; i >= 0; i--) {\n      const x = xs[i];\n      f(x, i);\n    }\n  };\n  const partition = (xs, pred) => {\n    const pass = [];\n    const fail = [];\n    for (let i = 0, len = xs.length; i < len; i++) {\n      const x = xs[i];\n      const arr = pred(x, i) ? pass : fail;\n      arr.push(x);\n    }\n    return {\n      pass,\n      fail\n    };\n  };\n  const filter = (xs, pred) => {\n    const r = [];\n    for (let i = 0, len = xs.length; i < len; i++) {\n      const x = xs[i];\n      if (pred(x, i)) {\n        r.push(x);\n      }\n    }\n    return r;\n  };\n  const foldr = (xs, f, acc) => {\n    eachr(xs, (x, i) => {\n      acc = f(acc, x, i);\n    });\n    return acc;\n  };\n  const foldl = (xs, f, acc) => {\n    each(xs, (x, i) => {\n      acc = f(acc, x, i);\n    });\n    return acc;\n  };\n  const findUntil = (xs, pred, until) => {\n    for (let i = 0, len = xs.length; i < len; i++) {\n      const x = xs[i];\n      if (pred(x, i)) {\n        return Optional.some(x);\n      } else if (until(x, i)) {\n        break;\n      }\n    }\n    return Optional.none();\n  };\n  const find = (xs, pred) => {\n    return findUntil(xs, pred, never);\n  };\n  const flatten$1 = xs => {\n    const r = [];\n    for (let i = 0, len = xs.length; i < len; ++i) {\n      if (!isArray(xs[i])) {\n        throw new Error('Arr.flatten item ' + i + ' was not an array, input: ' + xs);\n      }\n      nativePush.apply(r, xs[i]);\n    }\n    return r;\n  };\n  const bind = (xs, f) => flatten$1(map(xs, f));\n  const forall = (xs, pred) => {\n    for (let i = 0, len = xs.length; i < len; ++i) {\n      const x = xs[i];\n      if (pred(x, i) !== true) {\n        return false;\n      }\n    }\n    return true;\n  };\n  const mapToObject = (xs, f) => {\n    const r = {};\n    for (let i = 0, len = xs.length; i < len; i++) {\n      const x = xs[i];\n      r[String(x)] = f(x, i);\n    }\n    return r;\n  };\n  const get$3 = (xs, i) => i >= 0 && i < xs.length ? Optional.some(xs[i]) : Optional.none();\n  const head = xs => get$3(xs, 0);\n  const last = xs => get$3(xs, xs.length - 1);\n  const findMap = (arr, f) => {\n    for (let i = 0; i < arr.length; i++) {\n      const r = f(arr[i], i);\n      if (r.isSome()) {\n        return r;\n      }\n    }\n    return Optional.none();\n  };\n  const fromHtml = (html, scope) => {\n    const doc = scope || document;\n    const div = doc.createElement('div');\n    div.innerHTML = html;\n    if (!div.hasChildNodes() || div.childNodes.length > 1) {\n      const message = 'HTML does not have a single root node';\n      console.error(message, html);\n      throw new Error(message);\n    }\n    return fromDom$1(div.childNodes[0]);\n  };\n  const fromTag = (tag, scope) => {\n    const doc = scope || document;\n    const node = doc.createElement(tag);\n    return fromDom$1(node);\n  };\n  const fromText = (text, scope) => {\n    const doc = scope || document;\n    const node = doc.createTextNode(text);\n    return fromDom$1(node);\n  };\n  const fromDom$1 = node => {\n    if (node === null || node === undefined) {\n      throw new Error('Node cannot be null or undefined');\n    }\n    return {\n      dom: node\n    };\n  };\n  const fromPoint = (docElm, x, y) => Optional.from(docElm.dom.elementFromPoint(x, y)).map(fromDom$1);\n  const SugarElement = {\n    fromHtml,\n    fromTag,\n    fromText,\n    fromDom: fromDom$1,\n    fromPoint\n  };\n  typeof window !== 'undefined' ? window : Function('return this;')();\n  const COMMENT = 8;\n  const DOCUMENT = 9;\n  const DOCUMENT_FRAGMENT = 11;\n  const ELEMENT = 1;\n  const TEXT = 3;\n  const name = element => {\n    const r = element.dom.nodeName;\n    return r.toLowerCase();\n  };\n  const type = element => element.dom.nodeType;\n  const isType = t => element => type(element) === t;\n  const isComment = element => type(element) === COMMENT || name(element) === '#comment';\n  const isElement = isType(ELEMENT);\n  const isText = isType(TEXT);\n  const isDocument = isType(DOCUMENT);\n  const isDocumentFragment = isType(DOCUMENT_FRAGMENT);\n  const isTag = tag => e => isElement(e) && name(e) === tag;\n  const is$2 = (element, selector) => {\n    const dom = element.dom;\n    if (dom.nodeType !== ELEMENT) {\n      return false;\n    } else {\n      const elem = dom;\n      if (elem.matches !== undefined) {\n        return elem.matches(selector);\n      } else if (elem.msMatchesSelector !== undefined) {\n        return elem.msMatchesSelector(selector);\n      } else if (elem.webkitMatchesSelector !== undefined) {\n        return elem.webkitMatchesSelector(selector);\n      } else if (elem.mozMatchesSelector !== undefined) {\n        return elem.mozMatchesSelector(selector);\n      } else {\n        throw new Error('Browser lacks native selectors');\n      }\n    }\n  };\n  const bypassSelector = dom => dom.nodeType !== ELEMENT && dom.nodeType !== DOCUMENT && dom.nodeType !== DOCUMENT_FRAGMENT || dom.childElementCount === 0;\n  const all$1 = (selector, scope) => {\n    const base = scope === undefined ? document : scope.dom;\n    return bypassSelector(base) ? [] : map(base.querySelectorAll(selector), SugarElement.fromDom);\n  };\n  const one = (selector, scope) => {\n    const base = scope === undefined ? document : scope.dom;\n    return bypassSelector(base) ? Optional.none() : Optional.from(base.querySelector(selector)).map(SugarElement.fromDom);\n  };\n  const eq = (e1, e2) => e1.dom === e2.dom;\n  const is$1 = is$2;\n  const owner = element => SugarElement.fromDom(element.dom.ownerDocument);\n  const documentOrOwner = dos => isDocument(dos) ? dos : owner(dos);\n  const parent = element => Optional.from(element.dom.parentNode).map(SugarElement.fromDom);\n  const parents = (element, isRoot) => {\n    const stop = isFunction(isRoot) ? isRoot : never;\n    let dom = element.dom;\n    const ret = [];\n    while (dom.parentNode !== null && dom.parentNode !== undefined) {\n      const rawParent = dom.parentNode;\n      const p = SugarElement.fromDom(rawParent);\n      ret.push(p);\n      if (stop(p) === true) {\n        break;\n      } else {\n        dom = rawParent;\n      }\n    }\n    return ret;\n  };\n  const prevSibling = element => Optional.from(element.dom.previousSibling).map(SugarElement.fromDom);\n  const nextSibling = element => Optional.from(element.dom.nextSibling).map(SugarElement.fromDom);\n  const children$3 = element => map(element.dom.childNodes, SugarElement.fromDom);\n  const child$3 = (element, index) => {\n    const cs = element.dom.childNodes;\n    return Optional.from(cs[index]).map(SugarElement.fromDom);\n  };\n  const firstChild = element => child$3(element, 0);\n  const isShadowRoot = dos => isDocumentFragment(dos) && isNonNullable(dos.dom.host);\n  const supported = isFunction(Element.prototype.attachShadow) && isFunction(Node.prototype.getRootNode);\n  const getRootNode = supported ? e => SugarElement.fromDom(e.dom.getRootNode()) : documentOrOwner;\n  const getShadowRoot = e => {\n    const r = getRootNode(e);\n    return isShadowRoot(r) ? Optional.some(r) : Optional.none();\n  };\n  const getShadowHost = e => SugarElement.fromDom(e.dom.host);\n  const inBody = element => {\n    const dom = isText(element) ? element.dom.parentNode : element.dom;\n    if (dom === undefined || dom === null || dom.ownerDocument === null) {\n      return false;\n    }\n    const doc = dom.ownerDocument;\n    return getShadowRoot(SugarElement.fromDom(dom)).fold(() => doc.body.contains(dom), compose1(inBody, getShadowHost));\n  };\n  const children$2 = (scope, predicate) => filter(children$3(scope), predicate);\n  const descendants$1 = (scope, predicate) => {\n    let result = [];\n    each(children$3(scope), x => {\n      if (predicate(x)) {\n        result = result.concat([x]);\n      }\n      result = result.concat(descendants$1(x, predicate));\n    });\n    return result;\n  };\n  const children$1 = (scope, selector) => children$2(scope, e => is$2(e, selector));\n  const descendants = (scope, selector) => all$1(selector, scope);\n  var ClosestOrAncestor = (is, ancestor, scope, a, isRoot) => {\n    if (is(scope, a)) {\n      return Optional.some(scope);\n    } else if (isFunction(isRoot) && isRoot(scope)) {\n      return Optional.none();\n    } else {\n      return ancestor(scope, a, isRoot);\n    }\n  };\n  const ancestor$1 = (scope, predicate, isRoot) => {\n    let element = scope.dom;\n    const stop = isFunction(isRoot) ? isRoot : never;\n    while (element.parentNode) {\n      element = element.parentNode;\n      const el = SugarElement.fromDom(element);\n      if (predicate(el)) {\n        return Optional.some(el);\n      } else if (stop(el)) {\n        break;\n      }\n    }\n    return Optional.none();\n  };\n  const child$2 = (scope, predicate) => {\n    const pred = node => predicate(SugarElement.fromDom(node));\n    const result = find(scope.dom.childNodes, pred);\n    return result.map(SugarElement.fromDom);\n  };\n  const ancestor = (scope, selector, isRoot) => ancestor$1(scope, e => is$2(e, selector), isRoot);\n  const child$1 = (scope, selector) => child$2(scope, e => is$2(e, selector));\n  const descendant = (scope, selector) => one(selector, scope);\n  const closest = (scope, selector, isRoot) => {\n    const is = (element, selector) => is$2(element, selector);\n    return ClosestOrAncestor(is, ancestor, scope, selector, isRoot);\n  };\n  const rawSet = (dom, key, value) => {\n    if (isString(value) || isBoolean(value) || isNumber(value)) {\n      dom.setAttribute(key, value + '');\n    } else {\n      console.error('Invalid call to Attribute.set. Key ', key, ':: Value ', value, ':: Element ', dom);\n      throw new Error('Attribute value was not simple');\n    }\n  };\n  const set$2 = (element, key, value) => {\n    rawSet(element.dom, key, value);\n  };\n  const setAll = (element, attrs) => {\n    const dom = element.dom;\n    each$1(attrs, (v, k) => {\n      rawSet(dom, k, v);\n    });\n  };\n  const get$2 = (element, key) => {\n    const v = element.dom.getAttribute(key);\n    return v === null ? undefined : v;\n  };\n  const getOpt = (element, key) => Optional.from(get$2(element, key));\n  const remove$2 = (element, key) => {\n    element.dom.removeAttribute(key);\n  };\n  const clone = element => foldl(element.dom.attributes, (acc, attr) => {\n    acc[attr.name] = attr.value;\n    return acc;\n  }, {});\n  const is = (lhs, rhs, comparator = tripleEquals) => lhs.exists(left => comparator(left, rhs));\n  const cat = arr => {\n    const r = [];\n    const push = x => {\n      r.push(x);\n    };\n    for (let i = 0; i < arr.length; i++) {\n      arr[i].each(push);\n    }\n    return r;\n  };\n  const lift2 = (oa, ob, f) => oa.isSome() && ob.isSome() ? Optional.some(f(oa.getOrDie(), ob.getOrDie())) : Optional.none();\n  const flatten = oot => oot.bind(identity);\n  const someIf = (b, a) => b ? Optional.some(a) : Optional.none();\n  const removeFromStart = (str, numChars) => {\n    return str.substring(numChars);\n  };\n  const checkRange = (str, substr, start) => substr === '' || str.length >= substr.length && str.substr(start, start + substr.length) === substr;\n  const removeLeading = (str, prefix) => {\n    return startsWith(str, prefix) ? removeFromStart(str, prefix.length) : str;\n  };\n  const startsWith = (str, prefix) => {\n    return checkRange(str, prefix, 0);\n  };\n  const blank = r => s => s.replace(r, '');\n  const trim = blank(/^\\s+|\\s+$/g);\n  const isNotEmpty = s => s.length > 0;\n  const isEmpty = s => !isNotEmpty(s);\n  const toInt = (value, radix = 10) => {\n    const num = parseInt(value, radix);\n    return isNaN(num) ? Optional.none() : Optional.some(num);\n  };\n  const toFloat = value => {\n    const num = parseFloat(value);\n    return isNaN(num) ? Optional.none() : Optional.some(num);\n  };\n  const isSupported = dom => dom.style !== undefined && isFunction(dom.style.getPropertyValue);\n  const internalSet = (dom, property, value) => {\n    if (!isString(value)) {\n      console.error('Invalid call to CSS.set. Property ', property, ':: Value ', value, ':: Element ', dom);\n      throw new Error('CSS value must be a string: ' + value);\n    }\n    if (isSupported(dom)) {\n      dom.style.setProperty(property, value);\n    }\n  };\n  const internalRemove = (dom, property) => {\n    if (isSupported(dom)) {\n      dom.style.removeProperty(property);\n    }\n  };\n  const set$1 = (element, property, value) => {\n    const dom = element.dom;\n    internalSet(dom, property, value);\n  };\n  const get$1 = (element, property) => {\n    const dom = element.dom;\n    const styles = window.getComputedStyle(dom);\n    const r = styles.getPropertyValue(property);\n    return r === '' && !inBody(element) ? getUnsafeProperty(dom, property) : r;\n  };\n  const getUnsafeProperty = (dom, property) => isSupported(dom) ? dom.style.getPropertyValue(property) : '';\n  const getRaw = (element, property) => {\n    const dom = element.dom;\n    const raw = getUnsafeProperty(dom, property);\n    return Optional.from(raw).filter(r => r.length > 0);\n  };\n  const remove$1 = (element, property) => {\n    const dom = element.dom;\n    internalRemove(dom, property);\n    if (is(getOpt(element, 'style').map(trim), '')) {\n      remove$2(element, 'style');\n    }\n  };\n  const getAttrValue = (cell, name, fallback = 0) => getOpt(cell, name).map(value => parseInt(value, 10)).getOr(fallback);\n  const firstLayer = (scope, selector) => {\n    return filterFirstLayer(scope, selector, always);\n  };\n  const filterFirstLayer = (scope, selector, predicate) => {\n    return bind(children$3(scope), x => {\n      if (is$2(x, selector)) {\n        return predicate(x) ? [x] : [];\n      } else {\n        return filterFirstLayer(x, selector, predicate);\n      }\n    });\n  };\n  const validSectionList = ['tfoot', 'thead', 'tbody', 'colgroup'];\n  const isValidSection = parentName => contains(validSectionList, parentName);\n  const grid = (rows, columns) => ({\n    rows,\n    columns\n  });\n  const detail = (element, rowspan, colspan) => ({\n    element,\n    rowspan,\n    colspan\n  });\n  const extended = (element, rowspan, colspan, row, column, isLocked) => ({\n    element,\n    rowspan,\n    colspan,\n    row,\n    column,\n    isLocked\n  });\n  const rowdetail = (element, cells, section) => ({\n    element,\n    cells,\n    section\n  });\n  const bounds = (startRow, startCol, finishRow, finishCol) => ({\n    startRow,\n    startCol,\n    finishRow,\n    finishCol\n  });\n  const columnext = (element, colspan, column) => ({\n    element,\n    colspan,\n    column\n  });\n  const colgroup = (element, columns) => ({\n    element,\n    columns\n  });\n  const lookup = (tags, element, isRoot = never) => {\n    if (isRoot(element)) {\n      return Optional.none();\n    }\n    if (contains(tags, name(element))) {\n      return Optional.some(element);\n    }\n    const isRootOrUpperTable = elm => is$2(elm, 'table') || isRoot(elm);\n    return ancestor(element, tags.join(','), isRootOrUpperTable);\n  };\n  const cell = (element, isRoot) => lookup(['td', 'th'], element, isRoot);\n  const cells = ancestor => firstLayer(ancestor, 'th,td');\n  const columns = ancestor => {\n    if (is$2(ancestor, 'colgroup')) {\n      return children$1(ancestor, 'col');\n    } else {\n      return bind(columnGroups(ancestor), columnGroup => children$1(columnGroup, 'col'));\n    }\n  };\n  const table = (element, isRoot) => closest(element, 'table', isRoot);\n  const rows = ancestor => firstLayer(ancestor, 'tr');\n  const columnGroups = ancestor => table(ancestor).fold(constant([]), table => children$1(table, 'colgroup'));\n  const fromRowsOrColGroups = (elems, getSection) => map(elems, row => {\n    if (name(row) === 'colgroup') {\n      const cells = map(columns(row), column => {\n        const colspan = getAttrValue(column, 'span', 1);\n        return detail(column, 1, colspan);\n      });\n      return rowdetail(row, cells, 'colgroup');\n    } else {\n      const cells$1 = map(cells(row), cell => {\n        const rowspan = getAttrValue(cell, 'rowspan', 1);\n        const colspan = getAttrValue(cell, 'colspan', 1);\n        return detail(cell, rowspan, colspan);\n      });\n      return rowdetail(row, cells$1, getSection(row));\n    }\n  });\n  const getParentSection = group => parent(group).map(parent => {\n    const parentName = name(parent);\n    return isValidSection(parentName) ? parentName : 'tbody';\n  }).getOr('tbody');\n  const fromTable$1 = table => {\n    const rows$1 = rows(table);\n    const columnGroups$1 = columnGroups(table);\n    const elems = [...columnGroups$1, ...rows$1];\n    return fromRowsOrColGroups(elems, getParentSection);\n  };\n  const LOCKED_COL_ATTR = 'data-snooker-locked-cols';\n  const getLockedColumnsFromTable = table => getOpt(table, LOCKED_COL_ATTR).bind(lockedColStr => Optional.from(lockedColStr.match(/\\d+/g))).map(lockedCols => mapToObject(lockedCols, always));\n  const key = (row, column) => {\n    return row + ',' + column;\n  };\n  const getAt = (warehouse, row, column) => Optional.from(warehouse.access[key(row, column)]);\n  const findItem = (warehouse, item, comparator) => {\n    const filtered = filterItems(warehouse, detail => {\n      return comparator(item, detail.element);\n    });\n    return filtered.length > 0 ? Optional.some(filtered[0]) : Optional.none();\n  };\n  const filterItems = (warehouse, predicate) => {\n    const all = bind(warehouse.all, r => {\n      return r.cells;\n    });\n    return filter(all, predicate);\n  };\n  const generateColumns = rowData => {\n    const columnsGroup = {};\n    let index = 0;\n    each(rowData.cells, column => {\n      const colspan = column.colspan;\n      range(colspan, columnIndex => {\n        const colIndex = index + columnIndex;\n        columnsGroup[colIndex] = columnext(column.element, colspan, colIndex);\n      });\n      index += colspan;\n    });\n    return columnsGroup;\n  };\n  const generate$1 = list => {\n    const access = {};\n    const cells = [];\n    const tableOpt = head(list).map(rowData => rowData.element).bind(table);\n    const lockedColumns = tableOpt.bind(getLockedColumnsFromTable).getOr({});\n    let maxRows = 0;\n    let maxColumns = 0;\n    let rowCount = 0;\n    const {\n      pass: colgroupRows,\n      fail: rows\n    } = partition(list, rowData => rowData.section === 'colgroup');\n    each(rows, rowData => {\n      const currentRow = [];\n      each(rowData.cells, rowCell => {\n        let start = 0;\n        while (access[key(rowCount, start)] !== undefined) {\n          start++;\n        }\n        const isLocked = hasNonNullableKey(lockedColumns, start.toString());\n        const current = extended(rowCell.element, rowCell.rowspan, rowCell.colspan, rowCount, start, isLocked);\n        for (let occupiedColumnPosition = 0; occupiedColumnPosition < rowCell.colspan; occupiedColumnPosition++) {\n          for (let occupiedRowPosition = 0; occupiedRowPosition < rowCell.rowspan; occupiedRowPosition++) {\n            const rowPosition = rowCount + occupiedRowPosition;\n            const columnPosition = start + occupiedColumnPosition;\n            const newpos = key(rowPosition, columnPosition);\n            access[newpos] = current;\n            maxColumns = Math.max(maxColumns, columnPosition + 1);\n          }\n        }\n        currentRow.push(current);\n      });\n      maxRows++;\n      cells.push(rowdetail(rowData.element, currentRow, rowData.section));\n      rowCount++;\n    });\n    const {\n      columns,\n      colgroups\n    } = last(colgroupRows).map(rowData => {\n      const columns = generateColumns(rowData);\n      const colgroup$1 = colgroup(rowData.element, values(columns));\n      return {\n        colgroups: [colgroup$1],\n        columns\n      };\n    }).getOrThunk(() => ({\n      colgroups: [],\n      columns: {}\n    }));\n    const grid$1 = grid(maxRows, maxColumns);\n    return {\n      grid: grid$1,\n      access,\n      all: cells,\n      columns,\n      colgroups\n    };\n  };\n  const fromTable = table => {\n    const list = fromTable$1(table);\n    return generate$1(list);\n  };\n  const justCells = warehouse => bind(warehouse.all, w => w.cells);\n  const justColumns = warehouse => values(warehouse.columns);\n  const hasColumns = warehouse => keys(warehouse.columns).length > 0;\n  const getColumnAt = (warehouse, columnIndex) => Optional.from(warehouse.columns[columnIndex]);\n  const Warehouse = {\n    fromTable,\n    generate: generate$1,\n    getAt,\n    findItem,\n    filterItems,\n    justCells,\n    justColumns,\n    hasColumns,\n    getColumnAt\n  };\n  var global$2 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n  const getTDTHOverallStyle = (dom, elm, name) => {\n    const cells = dom.select('td,th', elm);\n    let firstChildStyle;\n    for (let i = 0; i < cells.length; i++) {\n      const currentStyle = dom.getStyle(cells[i], name);\n      if (isUndefined(firstChildStyle)) {\n        firstChildStyle = currentStyle;\n      }\n      if (firstChildStyle !== currentStyle) {\n        return '';\n      }\n    }\n    return firstChildStyle;\n  };\n  const setAlign = (editor, elm, name) => {\n    global$2.each('left center right'.split(' '), align => {\n      if (align !== name) {\n        editor.formatter.remove('align' + align, {}, elm);\n      }\n    });\n    if (name) {\n      editor.formatter.apply('align' + name, {}, elm);\n    }\n  };\n  const setVAlign = (editor, elm, name) => {\n    global$2.each('top middle bottom'.split(' '), align => {\n      if (align !== name) {\n        editor.formatter.remove('valign' + align, {}, elm);\n      }\n    });\n    if (name) {\n      editor.formatter.apply('valign' + name, {}, elm);\n    }\n  };\n  const fireTableModified = (editor, table, data) => {\n    editor.dispatch('TableModified', {\n      ...data,\n      table\n    });\n  };\n  const toNumber = (px, fallback) => toFloat(px).getOr(fallback);\n  const getProp = (element, name, fallback) => toNumber(get$1(element, name), fallback);\n  const calcContentBoxSize = (element, size, upper, lower) => {\n    const paddingUpper = getProp(element, `padding-${upper}`, 0);\n    const paddingLower = getProp(element, `padding-${lower}`, 0);\n    const borderUpper = getProp(element, `border-${upper}-width`, 0);\n    const borderLower = getProp(element, `border-${lower}-width`, 0);\n    return size - paddingUpper - paddingLower - borderUpper - borderLower;\n  };\n  const getCalculatedWidth = (element, boxSizing) => {\n    const dom = element.dom;\n    const width = dom.getBoundingClientRect().width || dom.offsetWidth;\n    return boxSizing === 'border-box' ? width : calcContentBoxSize(element, width, 'left', 'right');\n  };\n  const getInnerWidth = element => getCalculatedWidth(element, 'content-box');\n  const getInner = getInnerWidth;\n  var global$1 = tinymce.util.Tools.resolve('tinymce.Env');\n  const defaultTableToolbar = 'tableprops tabledelete | tableinsertrowbefore tableinsertrowafter tabledeleterow | tableinsertcolbefore tableinsertcolafter tabledeletecol';\n  const defaultCellBorderWidths = range(5, i => {\n    const size = `${i + 1}px`;\n    return {\n      title: size,\n      value: size\n    };\n  });\n  const defaultCellBorderStyles = map(['Solid', 'Dotted', 'Dashed', 'Double', 'Groove', 'Ridge', 'Inset', 'Outset', 'None', 'Hidden'], type => {\n    return {\n      title: type,\n      value: type.toLowerCase()\n    };\n  });\n  const defaultWidth = '100%';\n  const getPixelForcedWidth = editor => {\n    var _a;\n    const dom = editor.dom;\n    const parentBlock = (_a = dom.getParent(editor.selection.getStart(), dom.isBlock)) !== null && _a !== void 0 ? _a : editor.getBody();\n    return getInner(SugarElement.fromDom(parentBlock)) + 'px';\n  };\n  const determineDefaultStyles = (editor, defaultStyles) => {\n    if (isResponsiveForced(editor) || !shouldStyleWithCss(editor)) {\n      return defaultStyles;\n    } else if (isPixelsForced(editor)) {\n      return {\n        ...defaultStyles,\n        width: getPixelForcedWidth(editor)\n      };\n    } else {\n      return {\n        ...defaultStyles,\n        width: defaultWidth\n      };\n    }\n  };\n  const determineDefaultAttributes = (editor, defaultAttributes) => {\n    if (isResponsiveForced(editor) || shouldStyleWithCss(editor)) {\n      return defaultAttributes;\n    } else if (isPixelsForced(editor)) {\n      return {\n        ...defaultAttributes,\n        width: getPixelForcedWidth(editor)\n      };\n    } else {\n      return {\n        ...defaultAttributes,\n        width: defaultWidth\n      };\n    }\n  };\n  const option = name => editor => editor.options.get(name);\n  const register = editor => {\n    const registerOption = editor.options.register;\n    registerOption('table_border_widths', {\n      processor: 'object[]',\n      default: defaultCellBorderWidths\n    });\n    registerOption('table_border_styles', {\n      processor: 'object[]',\n      default: defaultCellBorderStyles\n    });\n    registerOption('table_cell_advtab', {\n      processor: 'boolean',\n      default: true\n    });\n    registerOption('table_row_advtab', {\n      processor: 'boolean',\n      default: true\n    });\n    registerOption('table_advtab', {\n      processor: 'boolean',\n      default: true\n    });\n    registerOption('table_appearance_options', {\n      processor: 'boolean',\n      default: true\n    });\n    registerOption('table_grid', {\n      processor: 'boolean',\n      default: !global$1.deviceType.isTouch()\n    });\n    registerOption('table_cell_class_list', {\n      processor: 'object[]',\n      default: []\n    });\n    registerOption('table_row_class_list', {\n      processor: 'object[]',\n      default: []\n    });\n    registerOption('table_class_list', {\n      processor: 'object[]',\n      default: []\n    });\n    registerOption('table_toolbar', {\n      processor: 'string',\n      default: defaultTableToolbar\n    });\n    registerOption('table_background_color_map', {\n      processor: 'object[]',\n      default: []\n    });\n    registerOption('table_border_color_map', {\n      processor: 'object[]',\n      default: []\n    });\n  };\n  const getTableSizingMode = option('table_sizing_mode');\n  const getTableBorderWidths = option('table_border_widths');\n  const getTableBorderStyles = option('table_border_styles');\n  const hasAdvancedCellTab = option('table_cell_advtab');\n  const hasAdvancedRowTab = option('table_row_advtab');\n  const hasAdvancedTableTab = option('table_advtab');\n  const hasAppearanceOptions = option('table_appearance_options');\n  const hasTableGrid = option('table_grid');\n  const shouldStyleWithCss = option('table_style_by_css');\n  const getCellClassList = option('table_cell_class_list');\n  const getRowClassList = option('table_row_class_list');\n  const getTableClassList = option('table_class_list');\n  const getToolbar = option('table_toolbar');\n  const getTableBackgroundColorMap = option('table_background_color_map');\n  const getTableBorderColorMap = option('table_border_color_map');\n  const isPixelsForced = editor => getTableSizingMode(editor) === 'fixed';\n  const isResponsiveForced = editor => getTableSizingMode(editor) === 'responsive';\n  const getDefaultStyles = editor => {\n    const options = editor.options;\n    const defaultStyles = options.get('table_default_styles');\n    return options.isSet('table_default_styles') ? defaultStyles : determineDefaultStyles(editor, defaultStyles);\n  };\n  const getDefaultAttributes = editor => {\n    const options = editor.options;\n    const defaultAttributes = options.get('table_default_attributes');\n    return options.isSet('table_default_attributes') ? defaultAttributes : determineDefaultAttributes(editor, defaultAttributes);\n  };\n  const getNodeName = elm => elm.nodeName.toLowerCase();\n  const getBody = editor => SugarElement.fromDom(editor.getBody());\n  const getIsRoot = editor => element => eq(element, getBody(editor));\n  const removePxSuffix = size => size ? size.replace(/px$/, '') : '';\n  const addPxSuffix = size => /^\\d+(\\.\\d+)?$/.test(size) ? size + 'px' : size;\n  const getSelectionStart = editor => SugarElement.fromDom(editor.selection.getStart());\n  const getSelectionEnd = editor => SugarElement.fromDom(editor.selection.getEnd());\n  const isWithin = (bounds, detail) => {\n    return detail.column >= bounds.startCol && detail.column + detail.colspan - 1 <= bounds.finishCol && detail.row >= bounds.startRow && detail.row + detail.rowspan - 1 <= bounds.finishRow;\n  };\n  const isRectangular = (warehouse, bounds) => {\n    let isRect = true;\n    const detailIsWithin = curry(isWithin, bounds);\n    for (let i = bounds.startRow; i <= bounds.finishRow; i++) {\n      for (let j = bounds.startCol; j <= bounds.finishCol; j++) {\n        isRect = isRect && Warehouse.getAt(warehouse, i, j).exists(detailIsWithin);\n      }\n    }\n    return isRect ? Optional.some(bounds) : Optional.none();\n  };\n  const getBounds = (detailA, detailB) => {\n    return bounds(Math.min(detailA.row, detailB.row), Math.min(detailA.column, detailB.column), Math.max(detailA.row + detailA.rowspan - 1, detailB.row + detailB.rowspan - 1), Math.max(detailA.column + detailA.colspan - 1, detailB.column + detailB.colspan - 1));\n  };\n  const getAnyBox = (warehouse, startCell, finishCell) => {\n    const startCoords = Warehouse.findItem(warehouse, startCell, eq);\n    const finishCoords = Warehouse.findItem(warehouse, finishCell, eq);\n    return startCoords.bind(sc => {\n      return finishCoords.map(fc => {\n        return getBounds(sc, fc);\n      });\n    });\n  };\n  const getBox$1 = (warehouse, startCell, finishCell) => {\n    return getAnyBox(warehouse, startCell, finishCell).bind(bounds => {\n      return isRectangular(warehouse, bounds);\n    });\n  };\n  const getBox = (table, first, last) => {\n    const warehouse = getWarehouse(table);\n    return getBox$1(warehouse, first, last);\n  };\n  const getWarehouse = Warehouse.fromTable;\n  const before = (marker, element) => {\n    const parent$1 = parent(marker);\n    parent$1.each(v => {\n      v.dom.insertBefore(element.dom, marker.dom);\n    });\n  };\n  const after$1 = (marker, element) => {\n    const sibling = nextSibling(marker);\n    sibling.fold(() => {\n      const parent$1 = parent(marker);\n      parent$1.each(v => {\n        append$1(v, element);\n      });\n    }, v => {\n      before(v, element);\n    });\n  };\n  const prepend = (parent, element) => {\n    const firstChild$1 = firstChild(parent);\n    firstChild$1.fold(() => {\n      append$1(parent, element);\n    }, v => {\n      parent.dom.insertBefore(element.dom, v.dom);\n    });\n  };\n  const append$1 = (parent, element) => {\n    parent.dom.appendChild(element.dom);\n  };\n  const wrap = (element, wrapper) => {\n    before(element, wrapper);\n    append$1(wrapper, element);\n  };\n  const after = (marker, elements) => {\n    each(elements, (x, i) => {\n      const e = i === 0 ? marker : elements[i - 1];\n      after$1(e, x);\n    });\n  };\n  const append = (parent, elements) => {\n    each(elements, x => {\n      append$1(parent, x);\n    });\n  };\n  const remove = element => {\n    const dom = element.dom;\n    if (dom.parentNode !== null) {\n      dom.parentNode.removeChild(dom);\n    }\n  };\n  const unwrap = wrapper => {\n    const children = children$3(wrapper);\n    if (children.length > 0) {\n      after(wrapper, children);\n    }\n    remove(wrapper);\n  };\n  const NodeValue = (is, name) => {\n    const get = element => {\n      if (!is(element)) {\n        throw new Error('Can only get ' + name + ' value of a ' + name + ' node');\n      }\n      return getOption(element).getOr('');\n    };\n    const getOption = element => is(element) ? Optional.from(element.dom.nodeValue) : Optional.none();\n    const set = (element, value) => {\n      if (!is(element)) {\n        throw new Error('Can only set raw ' + name + ' value of a ' + name + ' node');\n      }\n      element.dom.nodeValue = value;\n    };\n    return {\n      get,\n      getOption,\n      set\n    };\n  };\n  const api = NodeValue(isText, 'text');\n  const get = element => api.get(element);\n  const set = (element, value) => api.set(element, value);\n  var TagBoundaries = ['body', 'p', 'div', 'article', 'aside', 'figcaption', 'figure', 'footer', 'header', 'nav', 'section', 'ol', 'ul', 'li', 'table', 'thead', 'tbody', 'tfoot', 'caption', 'tr', 'td', 'th', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'blockquote', 'pre', 'address'];\n  var DomUniverse = () => {\n    const clone$1 = element => {\n      return SugarElement.fromDom(element.dom.cloneNode(false));\n    };\n    const document = element => documentOrOwner(element).dom;\n    const isBoundary = element => {\n      if (!isElement(element)) {\n        return false;\n      }\n      if (name(element) === 'body') {\n        return true;\n      }\n      return contains(TagBoundaries, name(element));\n    };\n    const isEmptyTag = element => {\n      if (!isElement(element)) {\n        return false;\n      }\n      return contains(['br', 'img', 'hr', 'input'], name(element));\n    };\n    const isNonEditable = element => isElement(element) && get$2(element, 'contenteditable') === 'false';\n    const comparePosition = (element, other) => {\n      return element.dom.compareDocumentPosition(other.dom);\n    };\n    const copyAttributesTo = (source, destination) => {\n      const as = clone(source);\n      setAll(destination, as);\n    };\n    const isSpecial = element => {\n      const tag = name(element);\n      return contains(['script', 'noscript', 'iframe', 'noframes', 'noembed', 'title', 'style', 'textarea', 'xmp'], tag);\n    };\n    const getLanguage = element => isElement(element) ? getOpt(element, 'lang') : Optional.none();\n    return {\n      up: constant({\n        selector: ancestor,\n        closest: closest,\n        predicate: ancestor$1,\n        all: parents\n      }),\n      down: constant({\n        selector: descendants,\n        predicate: descendants$1\n      }),\n      styles: constant({\n        get: get$1,\n        getRaw: getRaw,\n        set: set$1,\n        remove: remove$1\n      }),\n      attrs: constant({\n        get: get$2,\n        set: set$2,\n        remove: remove$2,\n        copyTo: copyAttributesTo\n      }),\n      insert: constant({\n        before: before,\n        after: after$1,\n        afterAll: after,\n        append: append$1,\n        appendAll: append,\n        prepend: prepend,\n        wrap: wrap\n      }),\n      remove: constant({\n        unwrap: unwrap,\n        remove: remove\n      }),\n      create: constant({\n        nu: SugarElement.fromTag,\n        clone: clone$1,\n        text: SugarElement.fromText\n      }),\n      query: constant({\n        comparePosition,\n        prevSibling: prevSibling,\n        nextSibling: nextSibling\n      }),\n      property: constant({\n        children: children$3,\n        name: name,\n        parent: parent,\n        document,\n        isText: isText,\n        isComment: isComment,\n        isElement: isElement,\n        isSpecial,\n        getLanguage,\n        getText: get,\n        setText: set,\n        isBoundary,\n        isEmptyTag,\n        isNonEditable\n      }),\n      eq: eq,\n      is: is$1\n    };\n  };\n  const all = (universe, look, elements, f) => {\n    const head = elements[0];\n    const tail = elements.slice(1);\n    return f(universe, look, head, tail);\n  };\n  const oneAll = (universe, look, elements) => {\n    return elements.length > 0 ? all(universe, look, elements, unsafeOne) : Optional.none();\n  };\n  const unsafeOne = (universe, look, head, tail) => {\n    const start = look(universe, head);\n    return foldr(tail, (b, a) => {\n      const current = look(universe, a);\n      return commonElement(universe, b, current);\n    }, start);\n  };\n  const commonElement = (universe, start, end) => {\n    return start.bind(s => {\n      return end.filter(curry(universe.eq, s));\n    });\n  };\n  const sharedOne$1 = oneAll;\n  const universe = DomUniverse();\n  const sharedOne = (look, elements) => {\n    return sharedOne$1(universe, (_universe, element) => {\n      return look(element);\n    }, elements);\n  };\n  const lookupTable = container => {\n    return ancestor(container, 'table');\n  };\n  const retrieve$1 = (container, selector) => {\n    const sels = descendants(container, selector);\n    return sels.length > 0 ? Optional.some(sels) : Optional.none();\n  };\n  const getEdges = (container, firstSelectedSelector, lastSelectedSelector) => {\n    return descendant(container, firstSelectedSelector).bind(first => {\n      return descendant(container, lastSelectedSelector).bind(last => {\n        return sharedOne(lookupTable, [first, last]).map(table => {\n          return {\n            first,\n            last,\n            table\n          };\n        });\n      });\n    });\n  };\n  const retrieve = (container, selector) => {\n    return retrieve$1(container, selector);\n  };\n  const retrieveBox = (container, firstSelectedSelector, lastSelectedSelector) => {\n    return getEdges(container, firstSelectedSelector, lastSelectedSelector).bind(edges => {\n      const isRoot = ancestor => {\n        return eq(container, ancestor);\n      };\n      const sectionSelector = 'thead,tfoot,tbody,table';\n      const firstAncestor = ancestor(edges.first, sectionSelector, isRoot);\n      const lastAncestor = ancestor(edges.last, sectionSelector, isRoot);\n      return firstAncestor.bind(fA => {\n        return lastAncestor.bind(lA => {\n          return eq(fA, lA) ? getBox(edges.table, edges.first, edges.last) : Optional.none();\n        });\n      });\n    });\n  };\n  const fromDom = nodes => map(nodes, SugarElement.fromDom);\n  const strSelected = 'data-mce-selected';\n  const strSelectedSelector = 'td[' + strSelected + '],th[' + strSelected + ']';\n  const strFirstSelected = 'data-mce-first-selected';\n  const strFirstSelectedSelector = 'td[' + strFirstSelected + '],th[' + strFirstSelected + ']';\n  const strLastSelected = 'data-mce-last-selected';\n  const strLastSelectedSelector = 'td[' + strLastSelected + '],th[' + strLastSelected + ']';\n  const ephemera = {\n    selected: strSelected,\n    selectedSelector: strSelectedSelector,\n    firstSelected: strFirstSelected,\n    firstSelectedSelector: strFirstSelectedSelector,\n    lastSelected: strLastSelected,\n    lastSelectedSelector: strLastSelectedSelector\n  };\n  const getSelectionCellFallback = element => table(element).bind(table => retrieve(table, ephemera.firstSelectedSelector)).fold(constant(element), cells => cells[0]);\n  const getSelectionFromSelector = selector => (initCell, isRoot) => {\n    const cellName = name(initCell);\n    const cell = cellName === 'col' || cellName === 'colgroup' ? getSelectionCellFallback(initCell) : initCell;\n    return closest(cell, selector, isRoot);\n  };\n  const getSelectionCellOrCaption = getSelectionFromSelector('th,td,caption');\n  const getSelectionCell = getSelectionFromSelector('th,td');\n  const getCellsFromSelection = editor => fromDom(editor.model.table.getSelectedCells());\n  const getRowsFromSelection = (selected, selector) => {\n    const cellOpt = getSelectionCell(selected);\n    const rowsOpt = cellOpt.bind(cell => table(cell)).map(table => rows(table));\n    return lift2(cellOpt, rowsOpt, (cell, rows) => filter(rows, row => exists(fromDom(row.dom.cells), rowCell => get$2(rowCell, selector) === '1' || eq(rowCell, cell)))).getOr([]);\n  };\n  const verticalAlignValues = [{\n    text: 'None',\n    value: ''\n  }, {\n    text: 'Top',\n    value: 'top'\n  }, {\n    text: 'Middle',\n    value: 'middle'\n  }, {\n    text: 'Bottom',\n    value: 'bottom'\n  }];\n  const hexColour = value => ({\n    value\n  });\n  const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  const longformRegex = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i;\n  const isHexString = hex => shorthandRegex.test(hex) || longformRegex.test(hex);\n  const normalizeHex = hex => removeLeading(hex, '#').toUpperCase();\n  const fromString$1 = hex => isHexString(hex) ? Optional.some({\n    value: normalizeHex(hex)\n  }) : Optional.none();\n  const toHex = component => {\n    const hex = component.toString(16);\n    return (hex.length === 1 ? '0' + hex : hex).toUpperCase();\n  };\n  const fromRgba = rgbaColour => {\n    const value = toHex(rgbaColour.red) + toHex(rgbaColour.green) + toHex(rgbaColour.blue);\n    return hexColour(value);\n  };\n  const rgbRegex = /^\\s*rgb\\s*\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)\\s*$/i;\n  const rgbaRegex = /^\\s*rgba\\s*\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d?(?:\\.\\d+)?)\\s*\\)\\s*$/i;\n  const rgbaColour = (red, green, blue, alpha) => ({\n    red,\n    green,\n    blue,\n    alpha\n  });\n  const fromStringValues = (red, green, blue, alpha) => {\n    const r = parseInt(red, 10);\n    const g = parseInt(green, 10);\n    const b = parseInt(blue, 10);\n    const a = parseFloat(alpha);\n    return rgbaColour(r, g, b, a);\n  };\n  const fromString = rgbaString => {\n    if (rgbaString === 'transparent') {\n      return Optional.some(rgbaColour(0, 0, 0, 0));\n    }\n    const rgbMatch = rgbRegex.exec(rgbaString);\n    if (rgbMatch !== null) {\n      return Optional.some(fromStringValues(rgbMatch[1], rgbMatch[2], rgbMatch[3], '1'));\n    }\n    const rgbaMatch = rgbaRegex.exec(rgbaString);\n    if (rgbaMatch !== null) {\n      return Optional.some(fromStringValues(rgbaMatch[1], rgbaMatch[2], rgbaMatch[3], rgbaMatch[4]));\n    }\n    return Optional.none();\n  };\n  const anyToHex = color => fromString$1(color).orThunk(() => fromString(color).map(fromRgba)).getOrThunk(() => {\n    const canvas = document.createElement('canvas');\n    canvas.height = 1;\n    canvas.width = 1;\n    const canvasContext = canvas.getContext('2d');\n    canvasContext.clearRect(0, 0, canvas.width, canvas.height);\n    canvasContext.fillStyle = '#FFFFFF';\n    canvasContext.fillStyle = color;\n    canvasContext.fillRect(0, 0, 1, 1);\n    const rgba = canvasContext.getImageData(0, 0, 1, 1).data;\n    const r = rgba[0];\n    const g = rgba[1];\n    const b = rgba[2];\n    const a = rgba[3];\n    return fromRgba(rgbaColour(r, g, b, a));\n  });\n  const rgbaToHexString = color => fromString(color).map(fromRgba).map(h => '#' + h.value).getOr(color);\n  const Cell = initial => {\n    let value = initial;\n    const get = () => {\n      return value;\n    };\n    const set = v => {\n      value = v;\n    };\n    return {\n      get,\n      set\n    };\n  };\n  const singleton = doRevoke => {\n    const subject = Cell(Optional.none());\n    const revoke = () => subject.get().each(doRevoke);\n    const clear = () => {\n      revoke();\n      subject.set(Optional.none());\n    };\n    const isSet = () => subject.get().isSome();\n    const get = () => subject.get();\n    const set = s => {\n      revoke();\n      subject.set(Optional.some(s));\n    };\n    return {\n      clear,\n      isSet,\n      get,\n      set\n    };\n  };\n  const unbindable = () => singleton(s => s.unbind());\n  const onSetupToggle = (editor, formatName, formatValue) => {\n    return api => {\n      const boundCallback = unbindable();\n      const isNone = isEmpty(formatValue);\n      const init = () => {\n        const selectedCells = getCellsFromSelection(editor);\n        const checkNode = cell => editor.formatter.match(formatName, {\n          value: formatValue\n        }, cell.dom, isNone);\n        if (isNone) {\n          api.setActive(!exists(selectedCells, checkNode));\n          boundCallback.set(editor.formatter.formatChanged(formatName, match => api.setActive(!match), true));\n        } else {\n          api.setActive(forall(selectedCells, checkNode));\n          boundCallback.set(editor.formatter.formatChanged(formatName, api.setActive, false, {\n            value: formatValue\n          }));\n        }\n      };\n      editor.initialized ? init() : editor.on('init', init);\n      return boundCallback.clear;\n    };\n  };\n  const isListGroup = item => hasNonNullableKey(item, 'menu');\n  const buildListItems = items => map(items, item => {\n    const text = item.text || item.title || '';\n    if (isListGroup(item)) {\n      return {\n        text,\n        items: buildListItems(item.menu)\n      };\n    } else {\n      return {\n        text,\n        value: item.value\n      };\n    }\n  });\n  const buildMenuItems = (editor, items, format, onAction) => map(items, item => {\n    const text = item.text || item.title;\n    if (isListGroup(item)) {\n      return {\n        type: 'nestedmenuitem',\n        text,\n        getSubmenuItems: () => buildMenuItems(editor, item.menu, format, onAction)\n      };\n    } else {\n      return {\n        text,\n        type: 'togglemenuitem',\n        onAction: () => onAction(item.value),\n        onSetup: onSetupToggle(editor, format, item.value)\n      };\n    }\n  });\n  const applyTableCellStyle = (editor, style) => value => {\n    editor.execCommand('mceTableApplyCellStyle', false, {\n      [style]: value\n    });\n  };\n  const filterNoneItem = list => bind(list, item => {\n    if (isListGroup(item)) {\n      return [{\n        ...item,\n        menu: filterNoneItem(item.menu)\n      }];\n    } else {\n      return isNotEmpty(item.value) ? [item] : [];\n    }\n  });\n  const generateMenuItemsCallback = (editor, items, format, onAction) => callback => callback(buildMenuItems(editor, items, format, onAction));\n  const buildColorMenu = (editor, colorList, style) => {\n    const colorMap = map(colorList, entry => ({\n      text: entry.title,\n      value: '#' + anyToHex(entry.value).value,\n      type: 'choiceitem'\n    }));\n    return [{\n      type: 'fancymenuitem',\n      fancytype: 'colorswatch',\n      initData: {\n        colors: colorMap.length > 0 ? colorMap : undefined,\n        allowCustomColors: false\n      },\n      onAction: data => {\n        const value = data.value === 'remove' ? '' : data.value;\n        editor.execCommand('mceTableApplyCellStyle', false, {\n          [style]: value\n        });\n      }\n    }];\n  };\n  const changeRowHeader = editor => () => {\n    const currentType = editor.queryCommandValue('mceTableRowType');\n    const newType = currentType === 'header' ? 'body' : 'header';\n    editor.execCommand('mceTableRowType', false, {\n      type: newType\n    });\n  };\n  const changeColumnHeader = editor => () => {\n    const currentType = editor.queryCommandValue('mceTableColType');\n    const newType = currentType === 'th' ? 'td' : 'th';\n    editor.execCommand('mceTableColType', false, {\n      type: newType\n    });\n  };\n  const getClassList$1 = editor => {\n    const classes = buildListItems(getCellClassList(editor));\n    if (classes.length > 0) {\n      return Optional.some({\n        name: 'class',\n        type: 'listbox',\n        label: 'Class',\n        items: classes\n      });\n    }\n    return Optional.none();\n  };\n  const children = [{\n    name: 'width',\n    type: 'input',\n    label: 'Width'\n  }, {\n    name: 'height',\n    type: 'input',\n    label: 'Height'\n  }, {\n    name: 'celltype',\n    type: 'listbox',\n    label: 'Cell type',\n    items: [{\n      text: 'Cell',\n      value: 'td'\n    }, {\n      text: 'Header cell',\n      value: 'th'\n    }]\n  }, {\n    name: 'scope',\n    type: 'listbox',\n    label: 'Scope',\n    items: [{\n      text: 'None',\n      value: ''\n    }, {\n      text: 'Row',\n      value: 'row'\n    }, {\n      text: 'Column',\n      value: 'col'\n    }, {\n      text: 'Row group',\n      value: 'rowgroup'\n    }, {\n      text: 'Column group',\n      value: 'colgroup'\n    }]\n  }, {\n    name: 'halign',\n    type: 'listbox',\n    label: 'Horizontal align',\n    items: [{\n      text: 'None',\n      value: ''\n    }, {\n      text: 'Left',\n      value: 'left'\n    }, {\n      text: 'Center',\n      value: 'center'\n    }, {\n      text: 'Right',\n      value: 'right'\n    }]\n  }, {\n    name: 'valign',\n    type: 'listbox',\n    label: 'Vertical align',\n    items: verticalAlignValues\n  }];\n  const getItems$2 = editor => children.concat(getClassList$1(editor).toArray());\n  const getAdvancedTab = (editor, dialogName) => {\n    const emptyBorderStyle = [{\n      text: 'Select...',\n      value: ''\n    }];\n    const advTabItems = [{\n      name: 'borderstyle',\n      type: 'listbox',\n      label: 'Border style',\n      items: emptyBorderStyle.concat(buildListItems(getTableBorderStyles(editor)))\n    }, {\n      name: 'bordercolor',\n      type: 'colorinput',\n      label: 'Border color'\n    }, {\n      name: 'backgroundcolor',\n      type: 'colorinput',\n      label: 'Background color'\n    }];\n    const borderWidth = {\n      name: 'borderwidth',\n      type: 'input',\n      label: 'Border width'\n    };\n    const items = dialogName === 'cell' ? [borderWidth].concat(advTabItems) : advTabItems;\n    return {\n      title: 'Advanced',\n      name: 'advanced',\n      items\n    };\n  };\n  const normal = (editor, element) => {\n    const dom = editor.dom;\n    const setAttrib = (attr, value) => {\n      dom.setAttrib(element, attr, value);\n    };\n    const setStyle = (prop, value) => {\n      dom.setStyle(element, prop, value);\n    };\n    const setFormat = (formatName, value) => {\n      if (value === '') {\n        editor.formatter.remove(formatName, {\n          value: null\n        }, element, true);\n      } else {\n        editor.formatter.apply(formatName, {\n          value\n        }, element);\n      }\n    };\n    return {\n      setAttrib,\n      setStyle,\n      setFormat\n    };\n  };\n  const DomModifier = {\n    normal\n  };\n  const isHeaderCell = isTag('th');\n  const getRowHeaderType = (isHeaderRow, isHeaderCells) => {\n    if (isHeaderRow && isHeaderCells) {\n      return 'sectionCells';\n    } else if (isHeaderRow) {\n      return 'section';\n    } else {\n      return 'cells';\n    }\n  };\n  const getRowType$1 = row => {\n    const isHeaderRow = row.section === 'thead';\n    const isHeaderCells = is(findCommonCellType(row.cells), 'th');\n    if (row.section === 'tfoot') {\n      return {\n        type: 'footer'\n      };\n    } else if (isHeaderRow || isHeaderCells) {\n      return {\n        type: 'header',\n        subType: getRowHeaderType(isHeaderRow, isHeaderCells)\n      };\n    } else {\n      return {\n        type: 'body'\n      };\n    }\n  };\n  const findCommonCellType = cells => {\n    const headerCells = filter(cells, cell => isHeaderCell(cell.element));\n    if (headerCells.length === 0) {\n      return Optional.some('td');\n    } else if (headerCells.length === cells.length) {\n      return Optional.some('th');\n    } else {\n      return Optional.none();\n    }\n  };\n  const findCommonRowType = rows => {\n    const rowTypes = map(rows, row => getRowType$1(row).type);\n    const hasHeader = contains(rowTypes, 'header');\n    const hasFooter = contains(rowTypes, 'footer');\n    if (!hasHeader && !hasFooter) {\n      return Optional.some('body');\n    } else {\n      const hasBody = contains(rowTypes, 'body');\n      if (hasHeader && !hasBody && !hasFooter) {\n        return Optional.some('header');\n      } else if (!hasHeader && !hasBody && hasFooter) {\n        return Optional.some('footer');\n      } else {\n        return Optional.none();\n      }\n    }\n  };\n  const cached = f => {\n    let called = false;\n    let r;\n    return (...args) => {\n      if (!called) {\n        called = true;\n        r = f.apply(null, args);\n      }\n      return r;\n    };\n  };\n  const findInWarehouse = (warehouse, element) => findMap(warehouse.all, r => find(r.cells, e => eq(element, e.element)));\n  const extractCells = (warehouse, target, predicate) => {\n    const details = map(target.selection, cell$1 => {\n      return cell(cell$1).bind(lc => findInWarehouse(warehouse, lc)).filter(predicate);\n    });\n    const cells = cat(details);\n    return someIf(cells.length > 0, cells);\n  };\n  const onMergable = (_warehouse, target) => target.mergable;\n  const onUnmergable = (_warehouse, target) => target.unmergable;\n  const onCells = (warehouse, target) => extractCells(warehouse, target, always);\n  const isUnlockedTableCell = (warehouse, cell) => findInWarehouse(warehouse, cell).exists(detail => !detail.isLocked);\n  const allUnlocked = (warehouse, cells) => forall(cells, cell => isUnlockedTableCell(warehouse, cell));\n  const onUnlockedMergable = (warehouse, target) => onMergable(warehouse, target).filter(mergeable => allUnlocked(warehouse, mergeable.cells));\n  const onUnlockedUnmergable = (warehouse, target) => onUnmergable(warehouse, target).filter(cells => allUnlocked(warehouse, cells));\n  const generate = cases => {\n    if (!isArray(cases)) {\n      throw new Error('cases must be an array');\n    }\n    if (cases.length === 0) {\n      throw new Error('there must be at least one case');\n    }\n    const constructors = [];\n    const adt = {};\n    each(cases, (acase, count) => {\n      const keys$1 = keys(acase);\n      if (keys$1.length !== 1) {\n        throw new Error('one and only one name per case');\n      }\n      const key = keys$1[0];\n      const value = acase[key];\n      if (adt[key] !== undefined) {\n        throw new Error('duplicate key detected:' + key);\n      } else if (key === 'cata') {\n        throw new Error('cannot have a case named cata (sorry)');\n      } else if (!isArray(value)) {\n        throw new Error('case arguments must be an array');\n      }\n      constructors.push(key);\n      adt[key] = (...args) => {\n        const argLength = args.length;\n        if (argLength !== value.length) {\n          throw new Error('Wrong number of arguments to case ' + key + '. Expected ' + value.length + ' (' + value + '), got ' + argLength);\n        }\n        const match = branches => {\n          const branchKeys = keys(branches);\n          if (constructors.length !== branchKeys.length) {\n            throw new Error('Wrong number of arguments to match. Expected: ' + constructors.join(',') + '\\nActual: ' + branchKeys.join(','));\n          }\n          const allReqd = forall(constructors, reqKey => {\n            return contains(branchKeys, reqKey);\n          });\n          if (!allReqd) {\n            throw new Error('Not all branches were specified when using match. Specified: ' + branchKeys.join(', ') + '\\nRequired: ' + constructors.join(', '));\n          }\n          return branches[key].apply(null, args);\n        };\n        return {\n          fold: (...foldArgs) => {\n            if (foldArgs.length !== cases.length) {\n              throw new Error('Wrong number of arguments to fold. Expected ' + cases.length + ', got ' + foldArgs.length);\n            }\n            const target = foldArgs[count];\n            return target.apply(null, args);\n          },\n          match,\n          log: label => {\n            console.log(label, {\n              constructors,\n              constructor: key,\n              params: args\n            });\n          }\n        };\n      };\n    });\n    return adt;\n  };\n  const Adt = {\n    generate\n  };\n  const adt = Adt.generate([{\n    none: []\n  }, {\n    only: ['index']\n  }, {\n    left: ['index', 'next']\n  }, {\n    middle: ['prev', 'index', 'next']\n  }, {\n    right: ['prev', 'index']\n  }]);\n  ({\n    ...adt\n  });\n  const opGetRowsType = (table, target) => {\n    const house = Warehouse.fromTable(table);\n    const details = onCells(house, target);\n    return details.bind(selectedCells => {\n      const lastSelectedCell = selectedCells[selectedCells.length - 1];\n      const minRowRange = selectedCells[0].row;\n      const maxRowRange = lastSelectedCell.row + lastSelectedCell.rowspan;\n      const selectedRows = house.all.slice(minRowRange, maxRowRange);\n      return findCommonRowType(selectedRows);\n    }).getOr('');\n  };\n  const getRowsType = opGetRowsType;\n  const rgbToHex = value => startsWith(value, 'rgb') ? rgbaToHexString(value) : value;\n  const extractAdvancedStyles = elm => {\n    const element = SugarElement.fromDom(elm);\n    return {\n      borderwidth: getRaw(element, 'border-width').getOr(''),\n      borderstyle: getRaw(element, 'border-style').getOr(''),\n      bordercolor: getRaw(element, 'border-color').map(rgbToHex).getOr(''),\n      backgroundcolor: getRaw(element, 'background-color').map(rgbToHex).getOr('')\n    };\n  };\n  const getSharedValues = data => {\n    const baseData = data[0];\n    const comparisonData = data.slice(1);\n    each(comparisonData, items => {\n      each(keys(baseData), key => {\n        each$1(items, (itemValue, itemKey) => {\n          const comparisonValue = baseData[key];\n          if (comparisonValue !== '' && key === itemKey) {\n            if (comparisonValue !== itemValue) {\n              baseData[key] = '';\n            }\n          }\n        });\n      });\n    });\n    return baseData;\n  };\n  const getAlignment = (formats, formatName, editor, elm) => find(formats, name => !isUndefined(editor.formatter.matchNode(elm, formatName + name))).getOr('');\n  const getHAlignment = curry(getAlignment, ['left', 'center', 'right'], 'align');\n  const getVAlignment = curry(getAlignment, ['top', 'middle', 'bottom'], 'valign');\n  const extractDataFromSettings = (editor, hasAdvTableTab) => {\n    const style = getDefaultStyles(editor);\n    const attrs = getDefaultAttributes(editor);\n    const extractAdvancedStyleData = () => ({\n      borderstyle: get$4(style, 'border-style').getOr(''),\n      bordercolor: rgbToHex(get$4(style, 'border-color').getOr('')),\n      backgroundcolor: rgbToHex(get$4(style, 'background-color').getOr(''))\n    });\n    const defaultData = {\n      height: '',\n      width: '100%',\n      cellspacing: '',\n      cellpadding: '',\n      caption: false,\n      class: '',\n      align: '',\n      border: ''\n    };\n    const getBorder = () => {\n      const borderWidth = style['border-width'];\n      if (shouldStyleWithCss(editor) && borderWidth) {\n        return {\n          border: borderWidth\n        };\n      }\n      return get$4(attrs, 'border').fold(() => ({}), border => ({\n        border\n      }));\n    };\n    const advStyle = hasAdvTableTab ? extractAdvancedStyleData() : {};\n    const getCellPaddingCellSpacing = () => {\n      const spacing = get$4(style, 'border-spacing').or(get$4(attrs, 'cellspacing')).fold(() => ({}), cellspacing => ({\n        cellspacing\n      }));\n      const padding = get$4(style, 'border-padding').or(get$4(attrs, 'cellpadding')).fold(() => ({}), cellpadding => ({\n        cellpadding\n      }));\n      return {\n        ...spacing,\n        ...padding\n      };\n    };\n    const data = {\n      ...defaultData,\n      ...style,\n      ...attrs,\n      ...advStyle,\n      ...getBorder(),\n      ...getCellPaddingCellSpacing()\n    };\n    return data;\n  };\n  const getRowType = elm => table(SugarElement.fromDom(elm)).map(table => {\n    const target = {\n      selection: fromDom(elm.cells)\n    };\n    return getRowsType(table, target);\n  }).getOr('');\n  const extractDataFromTableElement = (editor, elm, hasAdvTableTab) => {\n    const getBorder = (dom, elm) => {\n      const optBorderWidth = getRaw(SugarElement.fromDom(elm), 'border-width');\n      if (shouldStyleWithCss(editor) && optBorderWidth.isSome()) {\n        return optBorderWidth.getOr('');\n      }\n      return dom.getAttrib(elm, 'border') || getTDTHOverallStyle(editor.dom, elm, 'border-width') || getTDTHOverallStyle(editor.dom, elm, 'border') || '';\n    };\n    const dom = editor.dom;\n    const cellspacing = shouldStyleWithCss(editor) ? dom.getStyle(elm, 'border-spacing') || dom.getAttrib(elm, 'cellspacing') : dom.getAttrib(elm, 'cellspacing') || dom.getStyle(elm, 'border-spacing');\n    const cellpadding = shouldStyleWithCss(editor) ? getTDTHOverallStyle(dom, elm, 'padding') || dom.getAttrib(elm, 'cellpadding') : dom.getAttrib(elm, 'cellpadding') || getTDTHOverallStyle(dom, elm, 'padding');\n    return {\n      width: dom.getStyle(elm, 'width') || dom.getAttrib(elm, 'width'),\n      height: dom.getStyle(elm, 'height') || dom.getAttrib(elm, 'height'),\n      cellspacing: cellspacing !== null && cellspacing !== void 0 ? cellspacing : '',\n      cellpadding: cellpadding !== null && cellpadding !== void 0 ? cellpadding : '',\n      border: getBorder(dom, elm),\n      caption: !!dom.select('caption', elm)[0],\n      class: dom.getAttrib(elm, 'class', ''),\n      align: getHAlignment(editor, elm),\n      ...(hasAdvTableTab ? extractAdvancedStyles(elm) : {})\n    };\n  };\n  const extractDataFromRowElement = (editor, elm, hasAdvancedRowTab) => {\n    const dom = editor.dom;\n    return {\n      height: dom.getStyle(elm, 'height') || dom.getAttrib(elm, 'height'),\n      class: dom.getAttrib(elm, 'class', ''),\n      type: getRowType(elm),\n      align: getHAlignment(editor, elm),\n      ...(hasAdvancedRowTab ? extractAdvancedStyles(elm) : {})\n    };\n  };\n  const extractDataFromCellElement = (editor, cell, hasAdvancedCellTab, column) => {\n    const dom = editor.dom;\n    const colElm = column.getOr(cell);\n    const getStyle = (element, style) => dom.getStyle(element, style) || dom.getAttrib(element, style);\n    return {\n      width: getStyle(colElm, 'width'),\n      height: getStyle(cell, 'height'),\n      scope: dom.getAttrib(cell, 'scope'),\n      celltype: getNodeName(cell),\n      class: dom.getAttrib(cell, 'class', ''),\n      halign: getHAlignment(editor, cell),\n      valign: getVAlignment(editor, cell),\n      ...(hasAdvancedCellTab ? extractAdvancedStyles(cell) : {})\n    };\n  };\n  const getSelectedCells = (table, cells) => {\n    const warehouse = Warehouse.fromTable(table);\n    const allCells = Warehouse.justCells(warehouse);\n    const filtered = filter(allCells, cellA => exists(cells, cellB => eq(cellA.element, cellB)));\n    return map(filtered, cell => ({\n      element: cell.element.dom,\n      column: Warehouse.getColumnAt(warehouse, cell.column).map(col => col.element.dom)\n    }));\n  };\n  const updateSimpleProps$1 = (modifier, colModifier, data, shouldUpdate) => {\n    if (shouldUpdate('scope')) {\n      modifier.setAttrib('scope', data.scope);\n    }\n    if (shouldUpdate('class')) {\n      modifier.setAttrib('class', data.class);\n    }\n    if (shouldUpdate('height')) {\n      modifier.setStyle('height', addPxSuffix(data.height));\n    }\n    if (shouldUpdate('width')) {\n      colModifier.setStyle('width', addPxSuffix(data.width));\n    }\n  };\n  const updateAdvancedProps$1 = (modifier, data, shouldUpdate) => {\n    if (shouldUpdate('backgroundcolor')) {\n      modifier.setFormat('tablecellbackgroundcolor', data.backgroundcolor);\n    }\n    if (shouldUpdate('bordercolor')) {\n      modifier.setFormat('tablecellbordercolor', data.bordercolor);\n    }\n    if (shouldUpdate('borderstyle')) {\n      modifier.setFormat('tablecellborderstyle', data.borderstyle);\n    }\n    if (shouldUpdate('borderwidth')) {\n      modifier.setFormat('tablecellborderwidth', addPxSuffix(data.borderwidth));\n    }\n  };\n  const applyStyleData$1 = (editor, cells, data, wasChanged) => {\n    const isSingleCell = cells.length === 1;\n    each(cells, item => {\n      const cellElm = item.element;\n      const shouldOverrideCurrentValue = isSingleCell ? always : wasChanged;\n      const modifier = DomModifier.normal(editor, cellElm);\n      const colModifier = item.column.map(col => DomModifier.normal(editor, col)).getOr(modifier);\n      updateSimpleProps$1(modifier, colModifier, data, shouldOverrideCurrentValue);\n      if (hasAdvancedCellTab(editor)) {\n        updateAdvancedProps$1(modifier, data, shouldOverrideCurrentValue);\n      }\n      if (wasChanged('halign')) {\n        setAlign(editor, cellElm, data.halign);\n      }\n      if (wasChanged('valign')) {\n        setVAlign(editor, cellElm, data.valign);\n      }\n    });\n  };\n  const applyStructureData$1 = (editor, data) => {\n    editor.execCommand('mceTableCellType', false, {\n      type: data.celltype,\n      no_events: true\n    });\n  };\n  const applyCellData = (editor, cells, oldData, data) => {\n    const modifiedData = filter$1(data, (value, key) => oldData[key] !== value);\n    if (size(modifiedData) > 0 && cells.length >= 1) {\n      table(cells[0]).each(table => {\n        const selectedCells = getSelectedCells(table, cells);\n        const styleModified = size(filter$1(modifiedData, (_value, key) => key !== 'scope' && key !== 'celltype')) > 0;\n        const structureModified = has(modifiedData, 'celltype');\n        if (styleModified || has(modifiedData, 'scope')) {\n          applyStyleData$1(editor, selectedCells, data, curry(has, modifiedData));\n        }\n        if (structureModified) {\n          applyStructureData$1(editor, data);\n        }\n        fireTableModified(editor, table.dom, {\n          structure: structureModified,\n          style: styleModified\n        });\n      });\n    }\n  };\n  const onSubmitCellForm = (editor, cells, oldData, api) => {\n    const data = api.getData();\n    api.close();\n    editor.undoManager.transact(() => {\n      applyCellData(editor, cells, oldData, data);\n      editor.focus();\n    });\n  };\n  const getData$1 = (editor, cells) => {\n    const cellsData = table(cells[0]).map(table => map(getSelectedCells(table, cells), item => extractDataFromCellElement(editor, item.element, hasAdvancedCellTab(editor), item.column)));\n    return getSharedValues(cellsData.getOrDie());\n  };\n  const open$2 = editor => {\n    const cells = getCellsFromSelection(editor);\n    if (cells.length === 0) {\n      return;\n    }\n    const data = getData$1(editor, cells);\n    const dialogTabPanel = {\n      type: 'tabpanel',\n      tabs: [{\n        title: 'General',\n        name: 'general',\n        items: getItems$2(editor)\n      }, getAdvancedTab(editor, 'cell')]\n    };\n    const dialogPanel = {\n      type: 'panel',\n      items: [{\n        type: 'grid',\n        columns: 2,\n        items: getItems$2(editor)\n      }]\n    };\n    editor.windowManager.open({\n      title: 'Cell Properties',\n      size: 'normal',\n      body: hasAdvancedCellTab(editor) ? dialogTabPanel : dialogPanel,\n      buttons: [{\n        type: 'cancel',\n        name: 'cancel',\n        text: 'Cancel'\n      }, {\n        type: 'submit',\n        name: 'save',\n        text: 'Save',\n        primary: true\n      }],\n      initialData: data,\n      onSubmit: curry(onSubmitCellForm, editor, cells, data)\n    });\n  };\n  const getClassList = editor => {\n    const classes = buildListItems(getRowClassList(editor));\n    if (classes.length > 0) {\n      return Optional.some({\n        name: 'class',\n        type: 'listbox',\n        label: 'Class',\n        items: classes\n      });\n    }\n    return Optional.none();\n  };\n  const formChildren = [{\n    type: 'listbox',\n    name: 'type',\n    label: 'Row type',\n    items: [{\n      text: 'Header',\n      value: 'header'\n    }, {\n      text: 'Body',\n      value: 'body'\n    }, {\n      text: 'Footer',\n      value: 'footer'\n    }]\n  }, {\n    type: 'listbox',\n    name: 'align',\n    label: 'Alignment',\n    items: [{\n      text: 'None',\n      value: ''\n    }, {\n      text: 'Left',\n      value: 'left'\n    }, {\n      text: 'Center',\n      value: 'center'\n    }, {\n      text: 'Right',\n      value: 'right'\n    }]\n  }, {\n    label: 'Height',\n    name: 'height',\n    type: 'input'\n  }];\n  const getItems$1 = editor => formChildren.concat(getClassList(editor).toArray());\n  const updateSimpleProps = (modifier, data, shouldUpdate) => {\n    if (shouldUpdate('class')) {\n      modifier.setAttrib('class', data.class);\n    }\n    if (shouldUpdate('height')) {\n      modifier.setStyle('height', addPxSuffix(data.height));\n    }\n  };\n  const updateAdvancedProps = (modifier, data, shouldUpdate) => {\n    if (shouldUpdate('backgroundcolor')) {\n      modifier.setStyle('background-color', data.backgroundcolor);\n    }\n    if (shouldUpdate('bordercolor')) {\n      modifier.setStyle('border-color', data.bordercolor);\n    }\n    if (shouldUpdate('borderstyle')) {\n      modifier.setStyle('border-style', data.borderstyle);\n    }\n  };\n  const applyStyleData = (editor, rows, data, wasChanged) => {\n    const isSingleRow = rows.length === 1;\n    const shouldOverrideCurrentValue = isSingleRow ? always : wasChanged;\n    each(rows, rowElm => {\n      const modifier = DomModifier.normal(editor, rowElm);\n      updateSimpleProps(modifier, data, shouldOverrideCurrentValue);\n      if (hasAdvancedRowTab(editor)) {\n        updateAdvancedProps(modifier, data, shouldOverrideCurrentValue);\n      }\n      if (wasChanged('align')) {\n        setAlign(editor, rowElm, data.align);\n      }\n    });\n  };\n  const applyStructureData = (editor, data) => {\n    editor.execCommand('mceTableRowType', false, {\n      type: data.type,\n      no_events: true\n    });\n  };\n  const applyRowData = (editor, rows, oldData, data) => {\n    const modifiedData = filter$1(data, (value, key) => oldData[key] !== value);\n    if (size(modifiedData) > 0) {\n      const typeModified = has(modifiedData, 'type');\n      const styleModified = typeModified ? size(modifiedData) > 1 : true;\n      if (styleModified) {\n        applyStyleData(editor, rows, data, curry(has, modifiedData));\n      }\n      if (typeModified) {\n        applyStructureData(editor, data);\n      }\n      table(SugarElement.fromDom(rows[0])).each(table => fireTableModified(editor, table.dom, {\n        structure: typeModified,\n        style: styleModified\n      }));\n    }\n  };\n  const onSubmitRowForm = (editor, rows, oldData, api) => {\n    const data = api.getData();\n    api.close();\n    editor.undoManager.transact(() => {\n      applyRowData(editor, rows, oldData, data);\n      editor.focus();\n    });\n  };\n  const open$1 = editor => {\n    const rows = getRowsFromSelection(getSelectionStart(editor), ephemera.selected);\n    if (rows.length === 0) {\n      return;\n    }\n    const rowsData = map(rows, rowElm => extractDataFromRowElement(editor, rowElm.dom, hasAdvancedRowTab(editor)));\n    const data = getSharedValues(rowsData);\n    const dialogTabPanel = {\n      type: 'tabpanel',\n      tabs: [{\n        title: 'General',\n        name: 'general',\n        items: getItems$1(editor)\n      }, getAdvancedTab(editor, 'row')]\n    };\n    const dialogPanel = {\n      type: 'panel',\n      items: [{\n        type: 'grid',\n        columns: 2,\n        items: getItems$1(editor)\n      }]\n    };\n    editor.windowManager.open({\n      title: 'Row Properties',\n      size: 'normal',\n      body: hasAdvancedRowTab(editor) ? dialogTabPanel : dialogPanel,\n      buttons: [{\n        type: 'cancel',\n        name: 'cancel',\n        text: 'Cancel'\n      }, {\n        type: 'submit',\n        name: 'save',\n        text: 'Save',\n        primary: true\n      }],\n      initialData: data,\n      onSubmit: curry(onSubmitRowForm, editor, map(rows, r => r.dom), data)\n    });\n  };\n  const getItems = (editor, classes, insertNewTable) => {\n    const rowColCountItems = !insertNewTable ? [] : [{\n      type: 'input',\n      name: 'cols',\n      label: 'Cols',\n      inputMode: 'numeric'\n    }, {\n      type: 'input',\n      name: 'rows',\n      label: 'Rows',\n      inputMode: 'numeric'\n    }];\n    const alwaysItems = [{\n      type: 'input',\n      name: 'width',\n      label: 'Width'\n    }, {\n      type: 'input',\n      name: 'height',\n      label: 'Height'\n    }];\n    const appearanceItems = hasAppearanceOptions(editor) ? [{\n      type: 'input',\n      name: 'cellspacing',\n      label: 'Cell spacing',\n      inputMode: 'numeric'\n    }, {\n      type: 'input',\n      name: 'cellpadding',\n      label: 'Cell padding',\n      inputMode: 'numeric'\n    }, {\n      type: 'input',\n      name: 'border',\n      label: 'Border width'\n    }, {\n      type: 'label',\n      label: 'Caption',\n      items: [{\n        type: 'checkbox',\n        name: 'caption',\n        label: 'Show caption'\n      }]\n    }] : [];\n    const alignmentItem = [{\n      type: 'listbox',\n      name: 'align',\n      label: 'Alignment',\n      items: [{\n        text: 'None',\n        value: ''\n      }, {\n        text: 'Left',\n        value: 'left'\n      }, {\n        text: 'Center',\n        value: 'center'\n      }, {\n        text: 'Right',\n        value: 'right'\n      }]\n    }];\n    const classListItem = classes.length > 0 ? [{\n      type: 'listbox',\n      name: 'class',\n      label: 'Class',\n      items: classes\n    }] : [];\n    return rowColCountItems.concat(alwaysItems).concat(appearanceItems).concat(alignmentItem).concat(classListItem);\n  };\n  const styleTDTH = (dom, elm, name, value) => {\n    if (elm.tagName === 'TD' || elm.tagName === 'TH') {\n      if (isString(name) && isNonNullable(value)) {\n        dom.setStyle(elm, name, value);\n      } else {\n        dom.setStyles(elm, name);\n      }\n    } else {\n      if (elm.children) {\n        for (let i = 0; i < elm.children.length; i++) {\n          styleTDTH(dom, elm.children[i], name, value);\n        }\n      }\n    }\n  };\n  const applyDataToElement = (editor, tableElm, data) => {\n    const dom = editor.dom;\n    const attrs = {};\n    const styles = {};\n    if (!isUndefined(data.class)) {\n      attrs.class = data.class;\n    }\n    styles.height = addPxSuffix(data.height);\n    if (shouldStyleWithCss(editor)) {\n      styles.width = addPxSuffix(data.width);\n    } else if (dom.getAttrib(tableElm, 'width')) {\n      attrs.width = removePxSuffix(data.width);\n    }\n    if (shouldStyleWithCss(editor)) {\n      styles['border-width'] = addPxSuffix(data.border);\n      styles['border-spacing'] = addPxSuffix(data.cellspacing);\n    } else {\n      attrs.border = data.border;\n      attrs.cellpadding = data.cellpadding;\n      attrs.cellspacing = data.cellspacing;\n    }\n    if (shouldStyleWithCss(editor) && tableElm.children) {\n      for (let i = 0; i < tableElm.children.length; i++) {\n        styleTDTH(dom, tableElm.children[i], {\n          'border-width': addPxSuffix(data.border),\n          'padding': addPxSuffix(data.cellpadding)\n        });\n        if (hasAdvancedTableTab(editor)) {\n          styleTDTH(dom, tableElm.children[i], {\n            'border-color': data.bordercolor\n          });\n        }\n      }\n    }\n    if (hasAdvancedTableTab(editor)) {\n      const advData = data;\n      styles['background-color'] = advData.backgroundcolor;\n      styles['border-color'] = advData.bordercolor;\n      styles['border-style'] = advData.borderstyle;\n    }\n    attrs.style = dom.serializeStyle({\n      ...getDefaultStyles(editor),\n      ...styles\n    });\n    dom.setAttribs(tableElm, {\n      ...getDefaultAttributes(editor),\n      ...attrs\n    });\n  };\n  const onSubmitTableForm = (editor, tableElm, oldData, api) => {\n    const dom = editor.dom;\n    const data = api.getData();\n    const modifiedData = filter$1(data, (value, key) => oldData[key] !== value);\n    api.close();\n    if (data.class === '') {\n      delete data.class;\n    }\n    editor.undoManager.transact(() => {\n      if (!tableElm) {\n        const cols = toInt(data.cols).getOr(1);\n        const rows = toInt(data.rows).getOr(1);\n        editor.execCommand('mceInsertTable', false, {\n          rows,\n          columns: cols\n        });\n        tableElm = getSelectionCell(getSelectionStart(editor), getIsRoot(editor)).bind(cell => table(cell, getIsRoot(editor))).map(table => table.dom).getOrDie();\n      }\n      if (size(modifiedData) > 0) {\n        applyDataToElement(editor, tableElm, data);\n        const captionElm = dom.select('caption', tableElm)[0];\n        if (captionElm && !data.caption || !captionElm && data.caption) {\n          editor.execCommand('mceTableToggleCaption');\n        }\n        setAlign(editor, tableElm, data.align);\n      }\n      editor.focus();\n      editor.addVisual();\n      if (size(modifiedData) > 0) {\n        const captionModified = has(modifiedData, 'caption');\n        const styleModified = captionModified ? size(modifiedData) > 1 : true;\n        fireTableModified(editor, tableElm, {\n          structure: captionModified,\n          style: styleModified\n        });\n      }\n    });\n  };\n  const open = (editor, insertNewTable) => {\n    const dom = editor.dom;\n    let tableElm;\n    let data = extractDataFromSettings(editor, hasAdvancedTableTab(editor));\n    if (insertNewTable) {\n      data.cols = '1';\n      data.rows = '1';\n      if (hasAdvancedTableTab(editor)) {\n        data.borderstyle = '';\n        data.bordercolor = '';\n        data.backgroundcolor = '';\n      }\n    } else {\n      tableElm = dom.getParent(editor.selection.getStart(), 'table', editor.getBody());\n      if (tableElm) {\n        data = extractDataFromTableElement(editor, tableElm, hasAdvancedTableTab(editor));\n      } else {\n        if (hasAdvancedTableTab(editor)) {\n          data.borderstyle = '';\n          data.bordercolor = '';\n          data.backgroundcolor = '';\n        }\n      }\n    }\n    const classes = buildListItems(getTableClassList(editor));\n    if (classes.length > 0) {\n      if (data.class) {\n        data.class = data.class.replace(/\\s*mce\\-item\\-table\\s*/g, '');\n      }\n    }\n    const generalPanel = {\n      type: 'grid',\n      columns: 2,\n      items: getItems(editor, classes, insertNewTable)\n    };\n    const nonAdvancedForm = () => ({\n      type: 'panel',\n      items: [generalPanel]\n    });\n    const advancedForm = () => ({\n      type: 'tabpanel',\n      tabs: [{\n        title: 'General',\n        name: 'general',\n        items: [generalPanel]\n      }, getAdvancedTab(editor, 'table')]\n    });\n    const dialogBody = hasAdvancedTableTab(editor) ? advancedForm() : nonAdvancedForm();\n    editor.windowManager.open({\n      title: 'Table Properties',\n      size: 'normal',\n      body: dialogBody,\n      onSubmit: curry(onSubmitTableForm, editor, tableElm, data),\n      buttons: [{\n        type: 'cancel',\n        name: 'cancel',\n        text: 'Cancel'\n      }, {\n        type: 'submit',\n        name: 'save',\n        text: 'Save',\n        primary: true\n      }],\n      initialData: data\n    });\n  };\n  const registerCommands = editor => {\n    each$1({\n      mceTableProps: curry(open, editor, false),\n      mceTableRowProps: curry(open$1, editor),\n      mceTableCellProps: curry(open$2, editor)\n    }, (func, name) => editor.addCommand(name, () => func()));\n    editor.addCommand('mceInsertTableDialog', _ui => {\n      open(editor, true);\n    });\n  };\n  const child = (scope, selector) => child$1(scope, selector).isSome();\n  const selection = identity;\n  const unmergable = selectedCells => {\n    const hasSpan = (elem, type) => getOpt(elem, type).exists(span => parseInt(span, 10) > 1);\n    const hasRowOrColSpan = elem => hasSpan(elem, 'rowspan') || hasSpan(elem, 'colspan');\n    return selectedCells.length > 0 && forall(selectedCells, hasRowOrColSpan) ? Optional.some(selectedCells) : Optional.none();\n  };\n  const mergable = (table, selectedCells, ephemera) => {\n    if (selectedCells.length <= 1) {\n      return Optional.none();\n    } else {\n      return retrieveBox(table, ephemera.firstSelectedSelector, ephemera.lastSelectedSelector).map(bounds => ({\n        bounds,\n        cells: selectedCells\n      }));\n    }\n  };\n  const noMenu = cell => ({\n    element: cell,\n    mergable: Optional.none(),\n    unmergable: Optional.none(),\n    selection: [cell]\n  });\n  const forMenu = (selectedCells, table, cell) => ({\n    element: cell,\n    mergable: mergable(table, selectedCells, ephemera),\n    unmergable: unmergable(selectedCells),\n    selection: selection(selectedCells)\n  });\n  const getSelectionTargets = editor => {\n    const targets = Cell(Optional.none());\n    const changeHandlers = Cell([]);\n    let selectionDetails = Optional.none();\n    const isCaption = isTag('caption');\n    const isDisabledForSelection = key => selectionDetails.forall(details => !details[key]);\n    const getStart = () => getSelectionCellOrCaption(getSelectionStart(editor), getIsRoot(editor));\n    const getEnd = () => getSelectionCellOrCaption(getSelectionEnd(editor), getIsRoot(editor));\n    const findTargets = () => getStart().bind(startCellOrCaption => flatten(lift2(table(startCellOrCaption), getEnd().bind(table), (startTable, endTable) => {\n      if (eq(startTable, endTable)) {\n        if (isCaption(startCellOrCaption)) {\n          return Optional.some(noMenu(startCellOrCaption));\n        } else {\n          return Optional.some(forMenu(getCellsFromSelection(editor), startTable, startCellOrCaption));\n        }\n      }\n      return Optional.none();\n    })));\n    const getExtractedDetails = targets => {\n      const tableOpt = table(targets.element);\n      return tableOpt.map(table => {\n        const warehouse = Warehouse.fromTable(table);\n        const selectedCells = onCells(warehouse, targets).getOr([]);\n        const locked = foldl(selectedCells, (acc, cell) => {\n          if (cell.isLocked) {\n            acc.onAny = true;\n            if (cell.column === 0) {\n              acc.onFirst = true;\n            } else if (cell.column + cell.colspan >= warehouse.grid.columns) {\n              acc.onLast = true;\n            }\n          }\n          return acc;\n        }, {\n          onAny: false,\n          onFirst: false,\n          onLast: false\n        });\n        return {\n          mergeable: onUnlockedMergable(warehouse, targets).isSome(),\n          unmergeable: onUnlockedUnmergable(warehouse, targets).isSome(),\n          locked\n        };\n      });\n    };\n    const resetTargets = () => {\n      targets.set(cached(findTargets)());\n      selectionDetails = targets.get().bind(getExtractedDetails);\n      each(changeHandlers.get(), call);\n    };\n    const setupHandler = handler => {\n      handler();\n      changeHandlers.set(changeHandlers.get().concat([handler]));\n      return () => {\n        changeHandlers.set(filter(changeHandlers.get(), h => h !== handler));\n      };\n    };\n    const onSetup = (api, isDisabled) => setupHandler(() => targets.get().fold(() => {\n      api.setEnabled(false);\n    }, targets => {\n      api.setEnabled(!isDisabled(targets));\n    }));\n    const onSetupWithToggle = (api, isDisabled, isActive) => setupHandler(() => targets.get().fold(() => {\n      api.setEnabled(false);\n      api.setActive(false);\n    }, targets => {\n      api.setEnabled(!isDisabled(targets));\n      api.setActive(isActive(targets));\n    }));\n    const isDisabledFromLocked = lockedDisable => selectionDetails.exists(details => details.locked[lockedDisable]);\n    const onSetupTable = api => onSetup(api, _ => false);\n    const onSetupCellOrRow = api => onSetup(api, targets => isCaption(targets.element));\n    const onSetupColumn = lockedDisable => api => onSetup(api, targets => isCaption(targets.element) || isDisabledFromLocked(lockedDisable));\n    const onSetupPasteable = getClipboardData => api => onSetup(api, targets => isCaption(targets.element) || getClipboardData().isNone());\n    const onSetupPasteableColumn = (getClipboardData, lockedDisable) => api => onSetup(api, targets => isCaption(targets.element) || getClipboardData().isNone() || isDisabledFromLocked(lockedDisable));\n    const onSetupMergeable = api => onSetup(api, _targets => isDisabledForSelection('mergeable'));\n    const onSetupUnmergeable = api => onSetup(api, _targets => isDisabledForSelection('unmergeable'));\n    const onSetupTableWithCaption = api => {\n      return onSetupWithToggle(api, never, targets => {\n        const tableOpt = table(targets.element, getIsRoot(editor));\n        return tableOpt.exists(table => child(table, 'caption'));\n      });\n    };\n    const onSetupTableHeaders = (command, headerType) => api => {\n      return onSetupWithToggle(api, targets => isCaption(targets.element), () => editor.queryCommandValue(command) === headerType);\n    };\n    const onSetupTableRowHeaders = onSetupTableHeaders('mceTableRowType', 'header');\n    const onSetupTableColumnHeaders = onSetupTableHeaders('mceTableColType', 'th');\n    editor.on('NodeChange ExecCommand TableSelectorChange', resetTargets);\n    return {\n      onSetupTable,\n      onSetupCellOrRow,\n      onSetupColumn,\n      onSetupPasteable,\n      onSetupPasteableColumn,\n      onSetupMergeable,\n      onSetupUnmergeable,\n      resetTargets,\n      onSetupTableWithCaption,\n      onSetupTableRowHeaders,\n      onSetupTableColumnHeaders,\n      targets: targets.get\n    };\n  };\n  var global = tinymce.util.Tools.resolve('tinymce.FakeClipboard');\n  const tableTypeBase = 'x-tinymce/dom-table-';\n  const tableTypeRow = tableTypeBase + 'rows';\n  const tableTypeColumn = tableTypeBase + 'columns';\n  const getData = type => {\n    var _a;\n    const items = (_a = global.read()) !== null && _a !== void 0 ? _a : [];\n    return findMap(items, item => Optional.from(item.getType(type)));\n  };\n  const getRows = () => getData(tableTypeRow);\n  const getColumns = () => getData(tableTypeColumn);\n  const addButtons = (editor, selectionTargets) => {\n    editor.ui.registry.addMenuButton('table', {\n      tooltip: 'Table',\n      icon: 'table',\n      fetch: callback => callback('inserttable | cell row column | advtablesort | tableprops deletetable')\n    });\n    const cmd = command => () => editor.execCommand(command);\n    const addButtonIfRegistered = (name, spec) => {\n      if (editor.queryCommandSupported(spec.command)) {\n        editor.ui.registry.addButton(name, {\n          ...spec,\n          onAction: isFunction(spec.onAction) ? spec.onAction : cmd(spec.command)\n        });\n      }\n    };\n    const addToggleButtonIfRegistered = (name, spec) => {\n      if (editor.queryCommandSupported(spec.command)) {\n        editor.ui.registry.addToggleButton(name, {\n          ...spec,\n          onAction: isFunction(spec.onAction) ? spec.onAction : cmd(spec.command)\n        });\n      }\n    };\n    addButtonIfRegistered('tableprops', {\n      tooltip: 'Table properties',\n      command: 'mceTableProps',\n      icon: 'table',\n      onSetup: selectionTargets.onSetupTable\n    });\n    addButtonIfRegistered('tabledelete', {\n      tooltip: 'Delete table',\n      command: 'mceTableDelete',\n      icon: 'table-delete-table',\n      onSetup: selectionTargets.onSetupTable\n    });\n    addButtonIfRegistered('tablecellprops', {\n      tooltip: 'Cell properties',\n      command: 'mceTableCellProps',\n      icon: 'table-cell-properties',\n      onSetup: selectionTargets.onSetupCellOrRow\n    });\n    addButtonIfRegistered('tablemergecells', {\n      tooltip: 'Merge cells',\n      command: 'mceTableMergeCells',\n      icon: 'table-merge-cells',\n      onSetup: selectionTargets.onSetupMergeable\n    });\n    addButtonIfRegistered('tablesplitcells', {\n      tooltip: 'Split cell',\n      command: 'mceTableSplitCells',\n      icon: 'table-split-cells',\n      onSetup: selectionTargets.onSetupUnmergeable\n    });\n    addButtonIfRegistered('tableinsertrowbefore', {\n      tooltip: 'Insert row before',\n      command: 'mceTableInsertRowBefore',\n      icon: 'table-insert-row-above',\n      onSetup: selectionTargets.onSetupCellOrRow\n    });\n    addButtonIfRegistered('tableinsertrowafter', {\n      tooltip: 'Insert row after',\n      command: 'mceTableInsertRowAfter',\n      icon: 'table-insert-row-after',\n      onSetup: selectionTargets.onSetupCellOrRow\n    });\n    addButtonIfRegistered('tabledeleterow', {\n      tooltip: 'Delete row',\n      command: 'mceTableDeleteRow',\n      icon: 'table-delete-row',\n      onSetup: selectionTargets.onSetupCellOrRow\n    });\n    addButtonIfRegistered('tablerowprops', {\n      tooltip: 'Row properties',\n      command: 'mceTableRowProps',\n      icon: 'table-row-properties',\n      onSetup: selectionTargets.onSetupCellOrRow\n    });\n    addButtonIfRegistered('tableinsertcolbefore', {\n      tooltip: 'Insert column before',\n      command: 'mceTableInsertColBefore',\n      icon: 'table-insert-column-before',\n      onSetup: selectionTargets.onSetupColumn('onFirst')\n    });\n    addButtonIfRegistered('tableinsertcolafter', {\n      tooltip: 'Insert column after',\n      command: 'mceTableInsertColAfter',\n      icon: 'table-insert-column-after',\n      onSetup: selectionTargets.onSetupColumn('onLast')\n    });\n    addButtonIfRegistered('tabledeletecol', {\n      tooltip: 'Delete column',\n      command: 'mceTableDeleteCol',\n      icon: 'table-delete-column',\n      onSetup: selectionTargets.onSetupColumn('onAny')\n    });\n    addButtonIfRegistered('tablecutrow', {\n      tooltip: 'Cut row',\n      command: 'mceTableCutRow',\n      icon: 'cut-row',\n      onSetup: selectionTargets.onSetupCellOrRow\n    });\n    addButtonIfRegistered('tablecopyrow', {\n      tooltip: 'Copy row',\n      command: 'mceTableCopyRow',\n      icon: 'duplicate-row',\n      onSetup: selectionTargets.onSetupCellOrRow\n    });\n    addButtonIfRegistered('tablepasterowbefore', {\n      tooltip: 'Paste row before',\n      command: 'mceTablePasteRowBefore',\n      icon: 'paste-row-before',\n      onSetup: selectionTargets.onSetupPasteable(getRows)\n    });\n    addButtonIfRegistered('tablepasterowafter', {\n      tooltip: 'Paste row after',\n      command: 'mceTablePasteRowAfter',\n      icon: 'paste-row-after',\n      onSetup: selectionTargets.onSetupPasteable(getRows)\n    });\n    addButtonIfRegistered('tablecutcol', {\n      tooltip: 'Cut column',\n      command: 'mceTableCutCol',\n      icon: 'cut-column',\n      onSetup: selectionTargets.onSetupColumn('onAny')\n    });\n    addButtonIfRegistered('tablecopycol', {\n      tooltip: 'Copy column',\n      command: 'mceTableCopyCol',\n      icon: 'duplicate-column',\n      onSetup: selectionTargets.onSetupColumn('onAny')\n    });\n    addButtonIfRegistered('tablepastecolbefore', {\n      tooltip: 'Paste column before',\n      command: 'mceTablePasteColBefore',\n      icon: 'paste-column-before',\n      onSetup: selectionTargets.onSetupPasteableColumn(getColumns, 'onFirst')\n    });\n    addButtonIfRegistered('tablepastecolafter', {\n      tooltip: 'Paste column after',\n      command: 'mceTablePasteColAfter',\n      icon: 'paste-column-after',\n      onSetup: selectionTargets.onSetupPasteableColumn(getColumns, 'onLast')\n    });\n    addButtonIfRegistered('tableinsertdialog', {\n      tooltip: 'Insert table',\n      command: 'mceInsertTableDialog',\n      icon: 'table'\n    });\n    const tableClassList = filterNoneItem(getTableClassList(editor));\n    if (tableClassList.length !== 0 && editor.queryCommandSupported('mceTableToggleClass')) {\n      editor.ui.registry.addMenuButton('tableclass', {\n        icon: 'table-classes',\n        tooltip: 'Table styles',\n        fetch: generateMenuItemsCallback(editor, tableClassList, 'tableclass', value => editor.execCommand('mceTableToggleClass', false, value)),\n        onSetup: selectionTargets.onSetupTable\n      });\n    }\n    const tableCellClassList = filterNoneItem(getCellClassList(editor));\n    if (tableCellClassList.length !== 0 && editor.queryCommandSupported('mceTableCellToggleClass')) {\n      editor.ui.registry.addMenuButton('tablecellclass', {\n        icon: 'table-cell-classes',\n        tooltip: 'Cell styles',\n        fetch: generateMenuItemsCallback(editor, tableCellClassList, 'tablecellclass', value => editor.execCommand('mceTableCellToggleClass', false, value)),\n        onSetup: selectionTargets.onSetupCellOrRow\n      });\n    }\n    if (editor.queryCommandSupported('mceTableApplyCellStyle')) {\n      editor.ui.registry.addMenuButton('tablecellvalign', {\n        icon: 'vertical-align',\n        tooltip: 'Vertical align',\n        fetch: generateMenuItemsCallback(editor, verticalAlignValues, 'tablecellverticalalign', applyTableCellStyle(editor, 'vertical-align')),\n        onSetup: selectionTargets.onSetupCellOrRow\n      });\n      editor.ui.registry.addMenuButton('tablecellborderwidth', {\n        icon: 'border-width',\n        tooltip: 'Border width',\n        fetch: generateMenuItemsCallback(editor, getTableBorderWidths(editor), 'tablecellborderwidth', applyTableCellStyle(editor, 'border-width')),\n        onSetup: selectionTargets.onSetupCellOrRow\n      });\n      editor.ui.registry.addMenuButton('tablecellborderstyle', {\n        icon: 'border-style',\n        tooltip: 'Border style',\n        fetch: generateMenuItemsCallback(editor, getTableBorderStyles(editor), 'tablecellborderstyle', applyTableCellStyle(editor, 'border-style')),\n        onSetup: selectionTargets.onSetupCellOrRow\n      });\n      editor.ui.registry.addMenuButton('tablecellbackgroundcolor', {\n        icon: 'cell-background-color',\n        tooltip: 'Background color',\n        fetch: callback => callback(buildColorMenu(editor, getTableBackgroundColorMap(editor), 'background-color')),\n        onSetup: selectionTargets.onSetupCellOrRow\n      });\n      editor.ui.registry.addMenuButton('tablecellbordercolor', {\n        icon: 'cell-border-color',\n        tooltip: 'Border color',\n        fetch: callback => callback(buildColorMenu(editor, getTableBorderColorMap(editor), 'border-color')),\n        onSetup: selectionTargets.onSetupCellOrRow\n      });\n    }\n    addToggleButtonIfRegistered('tablecaption', {\n      tooltip: 'Table caption',\n      icon: 'table-caption',\n      command: 'mceTableToggleCaption',\n      onSetup: selectionTargets.onSetupTableWithCaption\n    });\n    addToggleButtonIfRegistered('tablerowheader', {\n      tooltip: 'Row header',\n      icon: 'table-top-header',\n      command: 'mceTableRowType',\n      onAction: changeRowHeader(editor),\n      onSetup: selectionTargets.onSetupTableRowHeaders\n    });\n    addToggleButtonIfRegistered('tablecolheader', {\n      tooltip: 'Column header',\n      icon: 'table-left-header',\n      command: 'mceTableColType',\n      onAction: changeColumnHeader(editor),\n      onSetup: selectionTargets.onSetupTableColumnHeaders\n    });\n  };\n  const addToolbars = editor => {\n    const isTable = table => editor.dom.is(table, 'table') && editor.getBody().contains(table);\n    const toolbar = getToolbar(editor);\n    if (toolbar.length > 0) {\n      editor.ui.registry.addContextToolbar('table', {\n        predicate: isTable,\n        items: toolbar,\n        scope: 'node',\n        position: 'node'\n      });\n    }\n  };\n  const addMenuItems = (editor, selectionTargets) => {\n    const cmd = command => () => editor.execCommand(command);\n    const addMenuIfRegistered = (name, spec) => {\n      if (editor.queryCommandSupported(spec.command)) {\n        editor.ui.registry.addMenuItem(name, {\n          ...spec,\n          onAction: isFunction(spec.onAction) ? spec.onAction : cmd(spec.command)\n        });\n        return true;\n      } else {\n        return false;\n      }\n    };\n    const addToggleMenuIfRegistered = (name, spec) => {\n      if (editor.queryCommandSupported(spec.command)) {\n        editor.ui.registry.addToggleMenuItem(name, {\n          ...spec,\n          onAction: isFunction(spec.onAction) ? spec.onAction : cmd(spec.command)\n        });\n      }\n    };\n    const insertTableAction = data => {\n      editor.execCommand('mceInsertTable', false, {\n        rows: data.numRows,\n        columns: data.numColumns\n      });\n    };\n    const hasRowMenuItems = [addMenuIfRegistered('tableinsertrowbefore', {\n      text: 'Insert row before',\n      icon: 'table-insert-row-above',\n      command: 'mceTableInsertRowBefore',\n      onSetup: selectionTargets.onSetupCellOrRow\n    }), addMenuIfRegistered('tableinsertrowafter', {\n      text: 'Insert row after',\n      icon: 'table-insert-row-after',\n      command: 'mceTableInsertRowAfter',\n      onSetup: selectionTargets.onSetupCellOrRow\n    }), addMenuIfRegistered('tabledeleterow', {\n      text: 'Delete row',\n      icon: 'table-delete-row',\n      command: 'mceTableDeleteRow',\n      onSetup: selectionTargets.onSetupCellOrRow\n    }), addMenuIfRegistered('tablerowprops', {\n      text: 'Row properties',\n      icon: 'table-row-properties',\n      command: 'mceTableRowProps',\n      onSetup: selectionTargets.onSetupCellOrRow\n    }), addMenuIfRegistered('tablecutrow', {\n      text: 'Cut row',\n      icon: 'cut-row',\n      command: 'mceTableCutRow',\n      onSetup: selectionTargets.onSetupCellOrRow\n    }), addMenuIfRegistered('tablecopyrow', {\n      text: 'Copy row',\n      icon: 'duplicate-row',\n      command: 'mceTableCopyRow',\n      onSetup: selectionTargets.onSetupCellOrRow\n    }), addMenuIfRegistered('tablepasterowbefore', {\n      text: 'Paste row before',\n      icon: 'paste-row-before',\n      command: 'mceTablePasteRowBefore',\n      onSetup: selectionTargets.onSetupPasteable(getRows)\n    }), addMenuIfRegistered('tablepasterowafter', {\n      text: 'Paste row after',\n      icon: 'paste-row-after',\n      command: 'mceTablePasteRowAfter',\n      onSetup: selectionTargets.onSetupPasteable(getRows)\n    })];\n    const hasColumnMenuItems = [addMenuIfRegistered('tableinsertcolumnbefore', {\n      text: 'Insert column before',\n      icon: 'table-insert-column-before',\n      command: 'mceTableInsertColBefore',\n      onSetup: selectionTargets.onSetupColumn('onFirst')\n    }), addMenuIfRegistered('tableinsertcolumnafter', {\n      text: 'Insert column after',\n      icon: 'table-insert-column-after',\n      command: 'mceTableInsertColAfter',\n      onSetup: selectionTargets.onSetupColumn('onLast')\n    }), addMenuIfRegistered('tabledeletecolumn', {\n      text: 'Delete column',\n      icon: 'table-delete-column',\n      command: 'mceTableDeleteCol',\n      onSetup: selectionTargets.onSetupColumn('onAny')\n    }), addMenuIfRegistered('tablecutcolumn', {\n      text: 'Cut column',\n      icon: 'cut-column',\n      command: 'mceTableCutCol',\n      onSetup: selectionTargets.onSetupColumn('onAny')\n    }), addMenuIfRegistered('tablecopycolumn', {\n      text: 'Copy column',\n      icon: 'duplicate-column',\n      command: 'mceTableCopyCol',\n      onSetup: selectionTargets.onSetupColumn('onAny')\n    }), addMenuIfRegistered('tablepastecolumnbefore', {\n      text: 'Paste column before',\n      icon: 'paste-column-before',\n      command: 'mceTablePasteColBefore',\n      onSetup: selectionTargets.onSetupPasteableColumn(getColumns, 'onFirst')\n    }), addMenuIfRegistered('tablepastecolumnafter', {\n      text: 'Paste column after',\n      icon: 'paste-column-after',\n      command: 'mceTablePasteColAfter',\n      onSetup: selectionTargets.onSetupPasteableColumn(getColumns, 'onLast')\n    })];\n    const hasCellMenuItems = [addMenuIfRegistered('tablecellprops', {\n      text: 'Cell properties',\n      icon: 'table-cell-properties',\n      command: 'mceTableCellProps',\n      onSetup: selectionTargets.onSetupCellOrRow\n    }), addMenuIfRegistered('tablemergecells', {\n      text: 'Merge cells',\n      icon: 'table-merge-cells',\n      command: 'mceTableMergeCells',\n      onSetup: selectionTargets.onSetupMergeable\n    }), addMenuIfRegistered('tablesplitcells', {\n      text: 'Split cell',\n      icon: 'table-split-cells',\n      command: 'mceTableSplitCells',\n      onSetup: selectionTargets.onSetupUnmergeable\n    })];\n    if (!hasTableGrid(editor)) {\n      editor.ui.registry.addMenuItem('inserttable', {\n        text: 'Table',\n        icon: 'table',\n        onAction: cmd('mceInsertTableDialog')\n      });\n    } else {\n      editor.ui.registry.addNestedMenuItem('inserttable', {\n        text: 'Table',\n        icon: 'table',\n        getSubmenuItems: () => [{\n          type: 'fancymenuitem',\n          fancytype: 'inserttable',\n          onAction: insertTableAction\n        }]\n      });\n    }\n    editor.ui.registry.addMenuItem('inserttabledialog', {\n      text: 'Insert table',\n      icon: 'table',\n      onAction: cmd('mceInsertTableDialog')\n    });\n    addMenuIfRegistered('tableprops', {\n      text: 'Table properties',\n      onSetup: selectionTargets.onSetupTable,\n      command: 'mceTableProps'\n    });\n    addMenuIfRegistered('deletetable', {\n      text: 'Delete table',\n      icon: 'table-delete-table',\n      onSetup: selectionTargets.onSetupTable,\n      command: 'mceTableDelete'\n    });\n    if (contains(hasRowMenuItems, true)) {\n      editor.ui.registry.addNestedMenuItem('row', {\n        type: 'nestedmenuitem',\n        text: 'Row',\n        getSubmenuItems: constant('tableinsertrowbefore tableinsertrowafter tabledeleterow tablerowprops | tablecutrow tablecopyrow tablepasterowbefore tablepasterowafter')\n      });\n    }\n    if (contains(hasColumnMenuItems, true)) {\n      editor.ui.registry.addNestedMenuItem('column', {\n        type: 'nestedmenuitem',\n        text: 'Column',\n        getSubmenuItems: constant('tableinsertcolumnbefore tableinsertcolumnafter tabledeletecolumn | tablecutcolumn tablecopycolumn tablepastecolumnbefore tablepastecolumnafter')\n      });\n    }\n    if (contains(hasCellMenuItems, true)) {\n      editor.ui.registry.addNestedMenuItem('cell', {\n        type: 'nestedmenuitem',\n        text: 'Cell',\n        getSubmenuItems: constant('tablecellprops tablemergecells tablesplitcells')\n      });\n    }\n    editor.ui.registry.addContextMenu('table', {\n      update: () => {\n        selectionTargets.resetTargets();\n        return selectionTargets.targets().fold(constant(''), targets => {\n          if (name(targets.element) === 'caption') {\n            return 'tableprops deletetable';\n          } else {\n            return 'cell row column | advtablesort | tableprops deletetable';\n          }\n        });\n      }\n    });\n    const tableClassList = filterNoneItem(getTableClassList(editor));\n    if (tableClassList.length !== 0 && editor.queryCommandSupported('mceTableToggleClass')) {\n      editor.ui.registry.addNestedMenuItem('tableclass', {\n        icon: 'table-classes',\n        text: 'Table styles',\n        getSubmenuItems: () => buildMenuItems(editor, tableClassList, 'tableclass', value => editor.execCommand('mceTableToggleClass', false, value)),\n        onSetup: selectionTargets.onSetupTable\n      });\n    }\n    const tableCellClassList = filterNoneItem(getCellClassList(editor));\n    if (tableCellClassList.length !== 0 && editor.queryCommandSupported('mceTableCellToggleClass')) {\n      editor.ui.registry.addNestedMenuItem('tablecellclass', {\n        icon: 'table-cell-classes',\n        text: 'Cell styles',\n        getSubmenuItems: () => buildMenuItems(editor, tableCellClassList, 'tablecellclass', value => editor.execCommand('mceTableCellToggleClass', false, value)),\n        onSetup: selectionTargets.onSetupCellOrRow\n      });\n    }\n    if (editor.queryCommandSupported('mceTableApplyCellStyle')) {\n      editor.ui.registry.addNestedMenuItem('tablecellvalign', {\n        icon: 'vertical-align',\n        text: 'Vertical align',\n        getSubmenuItems: () => buildMenuItems(editor, verticalAlignValues, 'tablecellverticalalign', applyTableCellStyle(editor, 'vertical-align')),\n        onSetup: selectionTargets.onSetupCellOrRow\n      });\n      editor.ui.registry.addNestedMenuItem('tablecellborderwidth', {\n        icon: 'border-width',\n        text: 'Border width',\n        getSubmenuItems: () => buildMenuItems(editor, getTableBorderWidths(editor), 'tablecellborderwidth', applyTableCellStyle(editor, 'border-width')),\n        onSetup: selectionTargets.onSetupCellOrRow\n      });\n      editor.ui.registry.addNestedMenuItem('tablecellborderstyle', {\n        icon: 'border-style',\n        text: 'Border style',\n        getSubmenuItems: () => buildMenuItems(editor, getTableBorderStyles(editor), 'tablecellborderstyle', applyTableCellStyle(editor, 'border-style')),\n        onSetup: selectionTargets.onSetupCellOrRow\n      });\n      editor.ui.registry.addNestedMenuItem('tablecellbackgroundcolor', {\n        icon: 'cell-background-color',\n        text: 'Background color',\n        getSubmenuItems: () => buildColorMenu(editor, getTableBackgroundColorMap(editor), 'background-color'),\n        onSetup: selectionTargets.onSetupCellOrRow\n      });\n      editor.ui.registry.addNestedMenuItem('tablecellbordercolor', {\n        icon: 'cell-border-color',\n        text: 'Border color',\n        getSubmenuItems: () => buildColorMenu(editor, getTableBorderColorMap(editor), 'border-color'),\n        onSetup: selectionTargets.onSetupCellOrRow\n      });\n    }\n    addToggleMenuIfRegistered('tablecaption', {\n      icon: 'table-caption',\n      text: 'Table caption',\n      command: 'mceTableToggleCaption',\n      onSetup: selectionTargets.onSetupTableWithCaption\n    });\n    addToggleMenuIfRegistered('tablerowheader', {\n      text: 'Row header',\n      icon: 'table-top-header',\n      command: 'mceTableRowType',\n      onAction: changeRowHeader(editor),\n      onSetup: selectionTargets.onSetupTableRowHeaders\n    });\n    addToggleMenuIfRegistered('tablecolheader', {\n      text: 'Column header',\n      icon: 'table-left-header',\n      command: 'mceTableColType',\n      onAction: changeColumnHeader(editor),\n      onSetup: selectionTargets.onSetupTableRowHeaders\n    });\n  };\n  const Plugin = editor => {\n    const selectionTargets = getSelectionTargets(editor);\n    register(editor);\n    registerCommands(editor);\n    addMenuItems(editor, selectionTargets);\n    addButtons(editor, selectionTargets);\n    addToolbars(editor);\n  };\n  var Plugin$1 = () => {\n    global$3.add('table', Plugin);\n  };\n  Plugin$1();\n})();","map":{"version":3,"names":["global$3","tinymce","util","Tools","resolve","hasProto","v","constructor","predicate","_a","prototype","name","typeOf","x","t","Array","isArray","String","o","proto","isPrototypeOf","isType$1","type","value","isSimpleType","eq$1","a","isString","isBoolean","isUndefined","undefined","isNullable","isNonNullable","isFunction","isNumber","noop","compose1","fbc","fab","constant","identity","tripleEquals","b","curry","fn","initialArgs","restArgs","all","concat","apply","call","f","never","always","Optional","tag","some","none","singletonNone","fold","onNone","onSome","isSome","isNone","map","mapper","bind","binder","exists","forall","filter","getOr","replacement","or","getOrThunk","thunk","orThunk","getOrDie","message","Error","from","getOrNull","getOrUndefined","each","worker","toArray","toString","keys","Object","hasOwnProperty","each$1","obj","props","k","len","length","i","objAcc","r","internalFilter","pred","onTrue","onFalse","filter$1","mapToArray","push","values","size","get$4","key","has","hasNonNullableKey","nativeIndexOf","indexOf","nativePush","rawIndexOf","ts","contains","xs","range","num","eachr","partition","pass","fail","arr","foldr","acc","foldl","findUntil","until","find","flatten$1","mapToObject","get$3","head","last","findMap","fromHtml","html","scope","doc","document","div","createElement","innerHTML","hasChildNodes","childNodes","console","error","fromDom$1","fromTag","node","fromText","text","createTextNode","dom","fromPoint","docElm","y","elementFromPoint","SugarElement","fromDom","window","Function","COMMENT","DOCUMENT","DOCUMENT_FRAGMENT","ELEMENT","TEXT","element","nodeName","toLowerCase","nodeType","isType","isComment","isElement","isText","isDocument","isDocumentFragment","isTag","e","is$2","selector","elem","matches","msMatchesSelector","webkitMatchesSelector","mozMatchesSelector","bypassSelector","childElementCount","all$1","base","querySelectorAll","one","querySelector","eq","e1","e2","is$1","owner","ownerDocument","documentOrOwner","dos","parent","parentNode","parents","isRoot","stop","ret","rawParent","p","prevSibling","previousSibling","nextSibling","children$3","child$3","index","cs","firstChild","isShadowRoot","host","supported","Element","attachShadow","Node","getRootNode","getShadowRoot","getShadowHost","inBody","body","children$2","descendants$1","result","children$1","descendants","ClosestOrAncestor","is","ancestor","ancestor$1","el","child$2","child$1","descendant","closest","rawSet","setAttribute","set$2","setAll","attrs","get$2","getAttribute","getOpt","remove$2","removeAttribute","clone","attributes","attr","lhs","rhs","comparator","left","cat","lift2","oa","ob","flatten","oot","someIf","removeFromStart","str","numChars","substring","checkRange","substr","start","removeLeading","prefix","startsWith","blank","s","replace","trim","isNotEmpty","isEmpty","toInt","radix","parseInt","isNaN","toFloat","parseFloat","isSupported","style","getPropertyValue","internalSet","property","setProperty","internalRemove","removeProperty","set$1","get$1","styles","getComputedStyle","getUnsafeProperty","getRaw","raw","remove$1","getAttrValue","cell","fallback","firstLayer","filterFirstLayer","validSectionList","isValidSection","parentName","grid","rows","columns","detail","rowspan","colspan","extended","row","column","isLocked","rowdetail","cells","section","bounds","startRow","startCol","finishRow","finishCol","columnext","colgroup","lookup","tags","isRootOrUpperTable","elm","join","columnGroups","columnGroup","table","fromRowsOrColGroups","elems","getSection","cells$1","getParentSection","group","fromTable$1","rows$1","columnGroups$1","LOCKED_COL_ATTR","getLockedColumnsFromTable","lockedColStr","match","lockedCols","getAt","warehouse","access","findItem","item","filtered","filterItems","generateColumns","rowData","columnsGroup","columnIndex","colIndex","generate$1","list","tableOpt","lockedColumns","maxRows","maxColumns","rowCount","colgroupRows","currentRow","rowCell","current","occupiedColumnPosition","occupiedRowPosition","rowPosition","columnPosition","newpos","Math","max","colgroups","colgroup$1","grid$1","fromTable","justCells","w","justColumns","hasColumns","getColumnAt","Warehouse","generate","global$2","getTDTHOverallStyle","select","firstChildStyle","currentStyle","getStyle","setAlign","editor","split","align","formatter","remove","setVAlign","fireTableModified","data","dispatch","toNumber","px","getProp","calcContentBoxSize","upper","lower","paddingUpper","paddingLower","borderUpper","borderLower","getCalculatedWidth","boxSizing","width","getBoundingClientRect","offsetWidth","getInnerWidth","getInner","global$1","defaultTableToolbar","defaultCellBorderWidths","title","defaultCellBorderStyles","defaultWidth","getPixelForcedWidth","parentBlock","getParent","selection","getStart","isBlock","getBody","determineDefaultStyles","defaultStyles","isResponsiveForced","shouldStyleWithCss","isPixelsForced","determineDefaultAttributes","defaultAttributes","option","options","get","register","registerOption","processor","default","deviceType","isTouch","getTableSizingMode","getTableBorderWidths","getTableBorderStyles","hasAdvancedCellTab","hasAdvancedRowTab","hasAdvancedTableTab","hasAppearanceOptions","hasTableGrid","getCellClassList","getRowClassList","getTableClassList","getToolbar","getTableBackgroundColorMap","getTableBorderColorMap","getDefaultStyles","isSet","getDefaultAttributes","getNodeName","getIsRoot","removePxSuffix","addPxSuffix","test","getSelectionStart","getSelectionEnd","getEnd","isWithin","isRectangular","isRect","detailIsWithin","j","getBounds","detailA","detailB","min","getAnyBox","startCell","finishCell","startCoords","finishCoords","sc","fc","getBox$1","getBox","first","getWarehouse","before","marker","parent$1","insertBefore","after$1","sibling","append$1","prepend","firstChild$1","appendChild","wrap","wrapper","after","elements","append","removeChild","unwrap","children","NodeValue","getOption","nodeValue","set","api","TagBoundaries","DomUniverse","clone$1","cloneNode","isBoundary","isEmptyTag","isNonEditable","comparePosition","other","compareDocumentPosition","copyAttributesTo","source","destination","as","isSpecial","getLanguage","up","down","copyTo","insert","afterAll","appendAll","create","nu","query","getText","setText","universe","look","tail","slice","oneAll","unsafeOne","commonElement","end","sharedOne$1","sharedOne","_universe","lookupTable","container","retrieve$1","sels","getEdges","firstSelectedSelector","lastSelectedSelector","retrieve","retrieveBox","edges","sectionSelector","firstAncestor","lastAncestor","fA","lA","nodes","strSelected","strSelectedSelector","strFirstSelected","strFirstSelectedSelector","strLastSelected","strLastSelectedSelector","ephemera","selected","selectedSelector","firstSelected","lastSelected","getSelectionCellFallback","getSelectionFromSelector","initCell","cellName","getSelectionCellOrCaption","getSelectionCell","getCellsFromSelection","model","getSelectedCells","getRowsFromSelection","cellOpt","rowsOpt","verticalAlignValues","hexColour","shorthandRegex","longformRegex","isHexString","hex","normalizeHex","toUpperCase","fromString$1","toHex","component","fromRgba","rgbaColour","red","green","blue","rgbRegex","rgbaRegex","alpha","fromStringValues","g","fromString","rgbaString","rgbMatch","exec","rgbaMatch","anyToHex","color","canvas","height","canvasContext","getContext","clearRect","fillStyle","fillRect","rgba","getImageData","rgbaToHexString","h","Cell","initial","singleton","doRevoke","subject","revoke","clear","unbindable","unbind","onSetupToggle","formatName","formatValue","boundCallback","init","selectedCells","checkNode","setActive","formatChanged","initialized","on","isListGroup","buildListItems","items","menu","buildMenuItems","format","onAction","getSubmenuItems","onSetup","applyTableCellStyle","execCommand","filterNoneItem","generateMenuItemsCallback","callback","buildColorMenu","colorList","colorMap","entry","fancytype","initData","colors","allowCustomColors","changeRowHeader","currentType","queryCommandValue","newType","changeColumnHeader","getClassList$1","classes","label","getItems$2","getAdvancedTab","dialogName","emptyBorderStyle","advTabItems","borderWidth","normal","setAttrib","setStyle","prop","setFormat","DomModifier","isHeaderCell","getRowHeaderType","isHeaderRow","isHeaderCells","getRowType$1","findCommonCellType","subType","headerCells","findCommonRowType","rowTypes","hasHeader","hasFooter","hasBody","cached","called","args","findInWarehouse","extractCells","target","details","cell$1","lc","onMergable","_warehouse","mergable","onUnmergable","unmergable","onCells","isUnlockedTableCell","allUnlocked","onUnlockedMergable","mergeable","onUnlockedUnmergable","cases","constructors","adt","acase","count","keys$1","argLength","branches","branchKeys","allReqd","reqKey","foldArgs","log","params","Adt","only","middle","right","opGetRowsType","house","lastSelectedCell","minRowRange","maxRowRange","selectedRows","getRowsType","rgbToHex","extractAdvancedStyles","borderwidth","borderstyle","bordercolor","backgroundcolor","getSharedValues","baseData","comparisonData","itemValue","itemKey","comparisonValue","getAlignment","formats","matchNode","getHAlignment","getVAlignment","extractDataFromSettings","hasAdvTableTab","extractAdvancedStyleData","defaultData","cellspacing","cellpadding","caption","class","border","getBorder","advStyle","getCellPaddingCellSpacing","spacing","padding","getRowType","extractDataFromTableElement","optBorderWidth","getAttrib","extractDataFromRowElement","extractDataFromCellElement","colElm","celltype","halign","valign","allCells","cellA","cellB","col","updateSimpleProps$1","modifier","colModifier","shouldUpdate","updateAdvancedProps$1","applyStyleData$1","wasChanged","isSingleCell","cellElm","shouldOverrideCurrentValue","applyStructureData$1","no_events","applyCellData","oldData","modifiedData","styleModified","_value","structureModified","structure","onSubmitCellForm","getData","close","undoManager","transact","focus","getData$1","cellsData","open$2","dialogTabPanel","tabs","dialogPanel","windowManager","open","buttons","primary","initialData","onSubmit","getClassList","formChildren","getItems$1","updateSimpleProps","updateAdvancedProps","applyStyleData","isSingleRow","rowElm","applyStructureData","applyRowData","typeModified","onSubmitRowForm","open$1","rowsData","getItems","insertNewTable","rowColCountItems","inputMode","alwaysItems","appearanceItems","alignmentItem","classListItem","styleTDTH","tagName","setStyles","applyDataToElement","tableElm","advData","serializeStyle","setAttribs","onSubmitTableForm","cols","captionElm","addVisual","captionModified","generalPanel","nonAdvancedForm","advancedForm","dialogBody","registerCommands","mceTableProps","mceTableRowProps","mceTableCellProps","func","addCommand","_ui","child","hasSpan","span","hasRowOrColSpan","noMenu","forMenu","getSelectionTargets","targets","changeHandlers","selectionDetails","isCaption","isDisabledForSelection","findTargets","startCellOrCaption","startTable","endTable","getExtractedDetails","locked","onAny","onFirst","onLast","unmergeable","resetTargets","setupHandler","handler","isDisabled","setEnabled","onSetupWithToggle","isActive","isDisabledFromLocked","lockedDisable","onSetupTable","_","onSetupCellOrRow","onSetupColumn","onSetupPasteable","getClipboardData","onSetupPasteableColumn","onSetupMergeable","_targets","onSetupUnmergeable","onSetupTableWithCaption","onSetupTableHeaders","command","headerType","onSetupTableRowHeaders","onSetupTableColumnHeaders","global","tableTypeBase","tableTypeRow","tableTypeColumn","read","getType","getRows","getColumns","addButtons","selectionTargets","ui","registry","addMenuButton","tooltip","icon","fetch","cmd","addButtonIfRegistered","spec","queryCommandSupported","addButton","addToggleButtonIfRegistered","addToggleButton","tableClassList","tableCellClassList","addToolbars","isTable","toolbar","addContextToolbar","position","addMenuItems","addMenuIfRegistered","addMenuItem","addToggleMenuIfRegistered","addToggleMenuItem","insertTableAction","numRows","numColumns","hasRowMenuItems","hasColumnMenuItems","hasCellMenuItems","addNestedMenuItem","addContextMenu","update","Plugin","Plugin$1","add"],"sources":["/home/hyq/GoHome/src/ginblog/web/admin/node_modules/tinymce/plugins/table/plugin.js"],"sourcesContent":["/**\n * TinyMCE version 6.2.0 (2022-09-08)\n */\n\n(function () {\n    'use strict';\n\n    var global$3 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    const hasProto = (v, constructor, predicate) => {\n      var _a;\n      if (predicate(v, constructor.prototype)) {\n        return true;\n      } else {\n        return ((_a = v.constructor) === null || _a === void 0 ? void 0 : _a.name) === constructor.name;\n      }\n    };\n    const typeOf = x => {\n      const t = typeof x;\n      if (x === null) {\n        return 'null';\n      } else if (t === 'object' && Array.isArray(x)) {\n        return 'array';\n      } else if (t === 'object' && hasProto(x, String, (o, proto) => proto.isPrototypeOf(o))) {\n        return 'string';\n      } else {\n        return t;\n      }\n    };\n    const isType$1 = type => value => typeOf(value) === type;\n    const isSimpleType = type => value => typeof value === type;\n    const eq$1 = t => a => t === a;\n    const isString = isType$1('string');\n    const isArray = isType$1('array');\n    const isBoolean = isSimpleType('boolean');\n    const isUndefined = eq$1(undefined);\n    const isNullable = a => a === null || a === undefined;\n    const isNonNullable = a => !isNullable(a);\n    const isFunction = isSimpleType('function');\n    const isNumber = isSimpleType('number');\n\n    const noop = () => {\n    };\n    const compose1 = (fbc, fab) => a => fbc(fab(a));\n    const constant = value => {\n      return () => {\n        return value;\n      };\n    };\n    const identity = x => {\n      return x;\n    };\n    const tripleEquals = (a, b) => {\n      return a === b;\n    };\n    function curry(fn, ...initialArgs) {\n      return (...restArgs) => {\n        const all = initialArgs.concat(restArgs);\n        return fn.apply(null, all);\n      };\n    }\n    const call = f => {\n      f();\n    };\n    const never = constant(false);\n    const always = constant(true);\n\n    class Optional {\n      constructor(tag, value) {\n        this.tag = tag;\n        this.value = value;\n      }\n      static some(value) {\n        return new Optional(true, value);\n      }\n      static none() {\n        return Optional.singletonNone;\n      }\n      fold(onNone, onSome) {\n        if (this.tag) {\n          return onSome(this.value);\n        } else {\n          return onNone();\n        }\n      }\n      isSome() {\n        return this.tag;\n      }\n      isNone() {\n        return !this.tag;\n      }\n      map(mapper) {\n        if (this.tag) {\n          return Optional.some(mapper(this.value));\n        } else {\n          return Optional.none();\n        }\n      }\n      bind(binder) {\n        if (this.tag) {\n          return binder(this.value);\n        } else {\n          return Optional.none();\n        }\n      }\n      exists(predicate) {\n        return this.tag && predicate(this.value);\n      }\n      forall(predicate) {\n        return !this.tag || predicate(this.value);\n      }\n      filter(predicate) {\n        if (!this.tag || predicate(this.value)) {\n          return this;\n        } else {\n          return Optional.none();\n        }\n      }\n      getOr(replacement) {\n        return this.tag ? this.value : replacement;\n      }\n      or(replacement) {\n        return this.tag ? this : replacement;\n      }\n      getOrThunk(thunk) {\n        return this.tag ? this.value : thunk();\n      }\n      orThunk(thunk) {\n        return this.tag ? this : thunk();\n      }\n      getOrDie(message) {\n        if (!this.tag) {\n          throw new Error(message !== null && message !== void 0 ? message : 'Called getOrDie on None');\n        } else {\n          return this.value;\n        }\n      }\n      static from(value) {\n        return isNonNullable(value) ? Optional.some(value) : Optional.none();\n      }\n      getOrNull() {\n        return this.tag ? this.value : null;\n      }\n      getOrUndefined() {\n        return this.value;\n      }\n      each(worker) {\n        if (this.tag) {\n          worker(this.value);\n        }\n      }\n      toArray() {\n        return this.tag ? [this.value] : [];\n      }\n      toString() {\n        return this.tag ? `some(${ this.value })` : 'none()';\n      }\n    }\n    Optional.singletonNone = new Optional(false);\n\n    const keys = Object.keys;\n    const hasOwnProperty = Object.hasOwnProperty;\n    const each$1 = (obj, f) => {\n      const props = keys(obj);\n      for (let k = 0, len = props.length; k < len; k++) {\n        const i = props[k];\n        const x = obj[i];\n        f(x, i);\n      }\n    };\n    const objAcc = r => (x, i) => {\n      r[i] = x;\n    };\n    const internalFilter = (obj, pred, onTrue, onFalse) => {\n      each$1(obj, (x, i) => {\n        (pred(x, i) ? onTrue : onFalse)(x, i);\n      });\n    };\n    const filter$1 = (obj, pred) => {\n      const t = {};\n      internalFilter(obj, pred, objAcc(t), noop);\n      return t;\n    };\n    const mapToArray = (obj, f) => {\n      const r = [];\n      each$1(obj, (value, name) => {\n        r.push(f(value, name));\n      });\n      return r;\n    };\n    const values = obj => {\n      return mapToArray(obj, identity);\n    };\n    const size = obj => {\n      return keys(obj).length;\n    };\n    const get$4 = (obj, key) => {\n      return has(obj, key) ? Optional.from(obj[key]) : Optional.none();\n    };\n    const has = (obj, key) => hasOwnProperty.call(obj, key);\n    const hasNonNullableKey = (obj, key) => has(obj, key) && obj[key] !== undefined && obj[key] !== null;\n\n    const nativeIndexOf = Array.prototype.indexOf;\n    const nativePush = Array.prototype.push;\n    const rawIndexOf = (ts, t) => nativeIndexOf.call(ts, t);\n    const contains = (xs, x) => rawIndexOf(xs, x) > -1;\n    const exists = (xs, pred) => {\n      for (let i = 0, len = xs.length; i < len; i++) {\n        const x = xs[i];\n        if (pred(x, i)) {\n          return true;\n        }\n      }\n      return false;\n    };\n    const range = (num, f) => {\n      const r = [];\n      for (let i = 0; i < num; i++) {\n        r.push(f(i));\n      }\n      return r;\n    };\n    const map = (xs, f) => {\n      const len = xs.length;\n      const r = new Array(len);\n      for (let i = 0; i < len; i++) {\n        const x = xs[i];\n        r[i] = f(x, i);\n      }\n      return r;\n    };\n    const each = (xs, f) => {\n      for (let i = 0, len = xs.length; i < len; i++) {\n        const x = xs[i];\n        f(x, i);\n      }\n    };\n    const eachr = (xs, f) => {\n      for (let i = xs.length - 1; i >= 0; i--) {\n        const x = xs[i];\n        f(x, i);\n      }\n    };\n    const partition = (xs, pred) => {\n      const pass = [];\n      const fail = [];\n      for (let i = 0, len = xs.length; i < len; i++) {\n        const x = xs[i];\n        const arr = pred(x, i) ? pass : fail;\n        arr.push(x);\n      }\n      return {\n        pass,\n        fail\n      };\n    };\n    const filter = (xs, pred) => {\n      const r = [];\n      for (let i = 0, len = xs.length; i < len; i++) {\n        const x = xs[i];\n        if (pred(x, i)) {\n          r.push(x);\n        }\n      }\n      return r;\n    };\n    const foldr = (xs, f, acc) => {\n      eachr(xs, (x, i) => {\n        acc = f(acc, x, i);\n      });\n      return acc;\n    };\n    const foldl = (xs, f, acc) => {\n      each(xs, (x, i) => {\n        acc = f(acc, x, i);\n      });\n      return acc;\n    };\n    const findUntil = (xs, pred, until) => {\n      for (let i = 0, len = xs.length; i < len; i++) {\n        const x = xs[i];\n        if (pred(x, i)) {\n          return Optional.some(x);\n        } else if (until(x, i)) {\n          break;\n        }\n      }\n      return Optional.none();\n    };\n    const find = (xs, pred) => {\n      return findUntil(xs, pred, never);\n    };\n    const flatten$1 = xs => {\n      const r = [];\n      for (let i = 0, len = xs.length; i < len; ++i) {\n        if (!isArray(xs[i])) {\n          throw new Error('Arr.flatten item ' + i + ' was not an array, input: ' + xs);\n        }\n        nativePush.apply(r, xs[i]);\n      }\n      return r;\n    };\n    const bind = (xs, f) => flatten$1(map(xs, f));\n    const forall = (xs, pred) => {\n      for (let i = 0, len = xs.length; i < len; ++i) {\n        const x = xs[i];\n        if (pred(x, i) !== true) {\n          return false;\n        }\n      }\n      return true;\n    };\n    const mapToObject = (xs, f) => {\n      const r = {};\n      for (let i = 0, len = xs.length; i < len; i++) {\n        const x = xs[i];\n        r[String(x)] = f(x, i);\n      }\n      return r;\n    };\n    const get$3 = (xs, i) => i >= 0 && i < xs.length ? Optional.some(xs[i]) : Optional.none();\n    const head = xs => get$3(xs, 0);\n    const last = xs => get$3(xs, xs.length - 1);\n    const findMap = (arr, f) => {\n      for (let i = 0; i < arr.length; i++) {\n        const r = f(arr[i], i);\n        if (r.isSome()) {\n          return r;\n        }\n      }\n      return Optional.none();\n    };\n\n    const fromHtml = (html, scope) => {\n      const doc = scope || document;\n      const div = doc.createElement('div');\n      div.innerHTML = html;\n      if (!div.hasChildNodes() || div.childNodes.length > 1) {\n        const message = 'HTML does not have a single root node';\n        console.error(message, html);\n        throw new Error(message);\n      }\n      return fromDom$1(div.childNodes[0]);\n    };\n    const fromTag = (tag, scope) => {\n      const doc = scope || document;\n      const node = doc.createElement(tag);\n      return fromDom$1(node);\n    };\n    const fromText = (text, scope) => {\n      const doc = scope || document;\n      const node = doc.createTextNode(text);\n      return fromDom$1(node);\n    };\n    const fromDom$1 = node => {\n      if (node === null || node === undefined) {\n        throw new Error('Node cannot be null or undefined');\n      }\n      return { dom: node };\n    };\n    const fromPoint = (docElm, x, y) => Optional.from(docElm.dom.elementFromPoint(x, y)).map(fromDom$1);\n    const SugarElement = {\n      fromHtml,\n      fromTag,\n      fromText,\n      fromDom: fromDom$1,\n      fromPoint\n    };\n\n    typeof window !== 'undefined' ? window : Function('return this;')();\n\n    const COMMENT = 8;\n    const DOCUMENT = 9;\n    const DOCUMENT_FRAGMENT = 11;\n    const ELEMENT = 1;\n    const TEXT = 3;\n\n    const name = element => {\n      const r = element.dom.nodeName;\n      return r.toLowerCase();\n    };\n    const type = element => element.dom.nodeType;\n    const isType = t => element => type(element) === t;\n    const isComment = element => type(element) === COMMENT || name(element) === '#comment';\n    const isElement = isType(ELEMENT);\n    const isText = isType(TEXT);\n    const isDocument = isType(DOCUMENT);\n    const isDocumentFragment = isType(DOCUMENT_FRAGMENT);\n    const isTag = tag => e => isElement(e) && name(e) === tag;\n\n    const is$2 = (element, selector) => {\n      const dom = element.dom;\n      if (dom.nodeType !== ELEMENT) {\n        return false;\n      } else {\n        const elem = dom;\n        if (elem.matches !== undefined) {\n          return elem.matches(selector);\n        } else if (elem.msMatchesSelector !== undefined) {\n          return elem.msMatchesSelector(selector);\n        } else if (elem.webkitMatchesSelector !== undefined) {\n          return elem.webkitMatchesSelector(selector);\n        } else if (elem.mozMatchesSelector !== undefined) {\n          return elem.mozMatchesSelector(selector);\n        } else {\n          throw new Error('Browser lacks native selectors');\n        }\n      }\n    };\n    const bypassSelector = dom => dom.nodeType !== ELEMENT && dom.nodeType !== DOCUMENT && dom.nodeType !== DOCUMENT_FRAGMENT || dom.childElementCount === 0;\n    const all$1 = (selector, scope) => {\n      const base = scope === undefined ? document : scope.dom;\n      return bypassSelector(base) ? [] : map(base.querySelectorAll(selector), SugarElement.fromDom);\n    };\n    const one = (selector, scope) => {\n      const base = scope === undefined ? document : scope.dom;\n      return bypassSelector(base) ? Optional.none() : Optional.from(base.querySelector(selector)).map(SugarElement.fromDom);\n    };\n\n    const eq = (e1, e2) => e1.dom === e2.dom;\n    const is$1 = is$2;\n\n    const owner = element => SugarElement.fromDom(element.dom.ownerDocument);\n    const documentOrOwner = dos => isDocument(dos) ? dos : owner(dos);\n    const parent = element => Optional.from(element.dom.parentNode).map(SugarElement.fromDom);\n    const parents = (element, isRoot) => {\n      const stop = isFunction(isRoot) ? isRoot : never;\n      let dom = element.dom;\n      const ret = [];\n      while (dom.parentNode !== null && dom.parentNode !== undefined) {\n        const rawParent = dom.parentNode;\n        const p = SugarElement.fromDom(rawParent);\n        ret.push(p);\n        if (stop(p) === true) {\n          break;\n        } else {\n          dom = rawParent;\n        }\n      }\n      return ret;\n    };\n    const prevSibling = element => Optional.from(element.dom.previousSibling).map(SugarElement.fromDom);\n    const nextSibling = element => Optional.from(element.dom.nextSibling).map(SugarElement.fromDom);\n    const children$3 = element => map(element.dom.childNodes, SugarElement.fromDom);\n    const child$3 = (element, index) => {\n      const cs = element.dom.childNodes;\n      return Optional.from(cs[index]).map(SugarElement.fromDom);\n    };\n    const firstChild = element => child$3(element, 0);\n\n    const isShadowRoot = dos => isDocumentFragment(dos) && isNonNullable(dos.dom.host);\n    const supported = isFunction(Element.prototype.attachShadow) && isFunction(Node.prototype.getRootNode);\n    const getRootNode = supported ? e => SugarElement.fromDom(e.dom.getRootNode()) : documentOrOwner;\n    const getShadowRoot = e => {\n      const r = getRootNode(e);\n      return isShadowRoot(r) ? Optional.some(r) : Optional.none();\n    };\n    const getShadowHost = e => SugarElement.fromDom(e.dom.host);\n\n    const inBody = element => {\n      const dom = isText(element) ? element.dom.parentNode : element.dom;\n      if (dom === undefined || dom === null || dom.ownerDocument === null) {\n        return false;\n      }\n      const doc = dom.ownerDocument;\n      return getShadowRoot(SugarElement.fromDom(dom)).fold(() => doc.body.contains(dom), compose1(inBody, getShadowHost));\n    };\n\n    const children$2 = (scope, predicate) => filter(children$3(scope), predicate);\n    const descendants$1 = (scope, predicate) => {\n      let result = [];\n      each(children$3(scope), x => {\n        if (predicate(x)) {\n          result = result.concat([x]);\n        }\n        result = result.concat(descendants$1(x, predicate));\n      });\n      return result;\n    };\n\n    const children$1 = (scope, selector) => children$2(scope, e => is$2(e, selector));\n    const descendants = (scope, selector) => all$1(selector, scope);\n\n    var ClosestOrAncestor = (is, ancestor, scope, a, isRoot) => {\n      if (is(scope, a)) {\n        return Optional.some(scope);\n      } else if (isFunction(isRoot) && isRoot(scope)) {\n        return Optional.none();\n      } else {\n        return ancestor(scope, a, isRoot);\n      }\n    };\n\n    const ancestor$1 = (scope, predicate, isRoot) => {\n      let element = scope.dom;\n      const stop = isFunction(isRoot) ? isRoot : never;\n      while (element.parentNode) {\n        element = element.parentNode;\n        const el = SugarElement.fromDom(element);\n        if (predicate(el)) {\n          return Optional.some(el);\n        } else if (stop(el)) {\n          break;\n        }\n      }\n      return Optional.none();\n    };\n    const child$2 = (scope, predicate) => {\n      const pred = node => predicate(SugarElement.fromDom(node));\n      const result = find(scope.dom.childNodes, pred);\n      return result.map(SugarElement.fromDom);\n    };\n\n    const ancestor = (scope, selector, isRoot) => ancestor$1(scope, e => is$2(e, selector), isRoot);\n    const child$1 = (scope, selector) => child$2(scope, e => is$2(e, selector));\n    const descendant = (scope, selector) => one(selector, scope);\n    const closest = (scope, selector, isRoot) => {\n      const is = (element, selector) => is$2(element, selector);\n      return ClosestOrAncestor(is, ancestor, scope, selector, isRoot);\n    };\n\n    const rawSet = (dom, key, value) => {\n      if (isString(value) || isBoolean(value) || isNumber(value)) {\n        dom.setAttribute(key, value + '');\n      } else {\n        console.error('Invalid call to Attribute.set. Key ', key, ':: Value ', value, ':: Element ', dom);\n        throw new Error('Attribute value was not simple');\n      }\n    };\n    const set$2 = (element, key, value) => {\n      rawSet(element.dom, key, value);\n    };\n    const setAll = (element, attrs) => {\n      const dom = element.dom;\n      each$1(attrs, (v, k) => {\n        rawSet(dom, k, v);\n      });\n    };\n    const get$2 = (element, key) => {\n      const v = element.dom.getAttribute(key);\n      return v === null ? undefined : v;\n    };\n    const getOpt = (element, key) => Optional.from(get$2(element, key));\n    const remove$2 = (element, key) => {\n      element.dom.removeAttribute(key);\n    };\n    const clone = element => foldl(element.dom.attributes, (acc, attr) => {\n      acc[attr.name] = attr.value;\n      return acc;\n    }, {});\n\n    const is = (lhs, rhs, comparator = tripleEquals) => lhs.exists(left => comparator(left, rhs));\n    const cat = arr => {\n      const r = [];\n      const push = x => {\n        r.push(x);\n      };\n      for (let i = 0; i < arr.length; i++) {\n        arr[i].each(push);\n      }\n      return r;\n    };\n    const lift2 = (oa, ob, f) => oa.isSome() && ob.isSome() ? Optional.some(f(oa.getOrDie(), ob.getOrDie())) : Optional.none();\n    const flatten = oot => oot.bind(identity);\n    const someIf = (b, a) => b ? Optional.some(a) : Optional.none();\n\n    const removeFromStart = (str, numChars) => {\n      return str.substring(numChars);\n    };\n\n    const checkRange = (str, substr, start) => substr === '' || str.length >= substr.length && str.substr(start, start + substr.length) === substr;\n    const removeLeading = (str, prefix) => {\n      return startsWith(str, prefix) ? removeFromStart(str, prefix.length) : str;\n    };\n    const startsWith = (str, prefix) => {\n      return checkRange(str, prefix, 0);\n    };\n    const blank = r => s => s.replace(r, '');\n    const trim = blank(/^\\s+|\\s+$/g);\n    const isNotEmpty = s => s.length > 0;\n    const isEmpty = s => !isNotEmpty(s);\n    const toInt = (value, radix = 10) => {\n      const num = parseInt(value, radix);\n      return isNaN(num) ? Optional.none() : Optional.some(num);\n    };\n    const toFloat = value => {\n      const num = parseFloat(value);\n      return isNaN(num) ? Optional.none() : Optional.some(num);\n    };\n\n    const isSupported = dom => dom.style !== undefined && isFunction(dom.style.getPropertyValue);\n\n    const internalSet = (dom, property, value) => {\n      if (!isString(value)) {\n        console.error('Invalid call to CSS.set. Property ', property, ':: Value ', value, ':: Element ', dom);\n        throw new Error('CSS value must be a string: ' + value);\n      }\n      if (isSupported(dom)) {\n        dom.style.setProperty(property, value);\n      }\n    };\n    const internalRemove = (dom, property) => {\n      if (isSupported(dom)) {\n        dom.style.removeProperty(property);\n      }\n    };\n    const set$1 = (element, property, value) => {\n      const dom = element.dom;\n      internalSet(dom, property, value);\n    };\n    const get$1 = (element, property) => {\n      const dom = element.dom;\n      const styles = window.getComputedStyle(dom);\n      const r = styles.getPropertyValue(property);\n      return r === '' && !inBody(element) ? getUnsafeProperty(dom, property) : r;\n    };\n    const getUnsafeProperty = (dom, property) => isSupported(dom) ? dom.style.getPropertyValue(property) : '';\n    const getRaw = (element, property) => {\n      const dom = element.dom;\n      const raw = getUnsafeProperty(dom, property);\n      return Optional.from(raw).filter(r => r.length > 0);\n    };\n    const remove$1 = (element, property) => {\n      const dom = element.dom;\n      internalRemove(dom, property);\n      if (is(getOpt(element, 'style').map(trim), '')) {\n        remove$2(element, 'style');\n      }\n    };\n\n    const getAttrValue = (cell, name, fallback = 0) => getOpt(cell, name).map(value => parseInt(value, 10)).getOr(fallback);\n\n    const firstLayer = (scope, selector) => {\n      return filterFirstLayer(scope, selector, always);\n    };\n    const filterFirstLayer = (scope, selector, predicate) => {\n      return bind(children$3(scope), x => {\n        if (is$2(x, selector)) {\n          return predicate(x) ? [x] : [];\n        } else {\n          return filterFirstLayer(x, selector, predicate);\n        }\n      });\n    };\n\n    const validSectionList = [\n      'tfoot',\n      'thead',\n      'tbody',\n      'colgroup'\n    ];\n    const isValidSection = parentName => contains(validSectionList, parentName);\n    const grid = (rows, columns) => ({\n      rows,\n      columns\n    });\n    const detail = (element, rowspan, colspan) => ({\n      element,\n      rowspan,\n      colspan\n    });\n    const extended = (element, rowspan, colspan, row, column, isLocked) => ({\n      element,\n      rowspan,\n      colspan,\n      row,\n      column,\n      isLocked\n    });\n    const rowdetail = (element, cells, section) => ({\n      element,\n      cells,\n      section\n    });\n    const bounds = (startRow, startCol, finishRow, finishCol) => ({\n      startRow,\n      startCol,\n      finishRow,\n      finishCol\n    });\n    const columnext = (element, colspan, column) => ({\n      element,\n      colspan,\n      column\n    });\n    const colgroup = (element, columns) => ({\n      element,\n      columns\n    });\n\n    const lookup = (tags, element, isRoot = never) => {\n      if (isRoot(element)) {\n        return Optional.none();\n      }\n      if (contains(tags, name(element))) {\n        return Optional.some(element);\n      }\n      const isRootOrUpperTable = elm => is$2(elm, 'table') || isRoot(elm);\n      return ancestor(element, tags.join(','), isRootOrUpperTable);\n    };\n    const cell = (element, isRoot) => lookup([\n      'td',\n      'th'\n    ], element, isRoot);\n    const cells = ancestor => firstLayer(ancestor, 'th,td');\n    const columns = ancestor => {\n      if (is$2(ancestor, 'colgroup')) {\n        return children$1(ancestor, 'col');\n      } else {\n        return bind(columnGroups(ancestor), columnGroup => children$1(columnGroup, 'col'));\n      }\n    };\n    const table = (element, isRoot) => closest(element, 'table', isRoot);\n    const rows = ancestor => firstLayer(ancestor, 'tr');\n    const columnGroups = ancestor => table(ancestor).fold(constant([]), table => children$1(table, 'colgroup'));\n\n    const fromRowsOrColGroups = (elems, getSection) => map(elems, row => {\n      if (name(row) === 'colgroup') {\n        const cells = map(columns(row), column => {\n          const colspan = getAttrValue(column, 'span', 1);\n          return detail(column, 1, colspan);\n        });\n        return rowdetail(row, cells, 'colgroup');\n      } else {\n        const cells$1 = map(cells(row), cell => {\n          const rowspan = getAttrValue(cell, 'rowspan', 1);\n          const colspan = getAttrValue(cell, 'colspan', 1);\n          return detail(cell, rowspan, colspan);\n        });\n        return rowdetail(row, cells$1, getSection(row));\n      }\n    });\n    const getParentSection = group => parent(group).map(parent => {\n      const parentName = name(parent);\n      return isValidSection(parentName) ? parentName : 'tbody';\n    }).getOr('tbody');\n    const fromTable$1 = table => {\n      const rows$1 = rows(table);\n      const columnGroups$1 = columnGroups(table);\n      const elems = [\n        ...columnGroups$1,\n        ...rows$1\n      ];\n      return fromRowsOrColGroups(elems, getParentSection);\n    };\n\n    const LOCKED_COL_ATTR = 'data-snooker-locked-cols';\n    const getLockedColumnsFromTable = table => getOpt(table, LOCKED_COL_ATTR).bind(lockedColStr => Optional.from(lockedColStr.match(/\\d+/g))).map(lockedCols => mapToObject(lockedCols, always));\n\n    const key = (row, column) => {\n      return row + ',' + column;\n    };\n    const getAt = (warehouse, row, column) => Optional.from(warehouse.access[key(row, column)]);\n    const findItem = (warehouse, item, comparator) => {\n      const filtered = filterItems(warehouse, detail => {\n        return comparator(item, detail.element);\n      });\n      return filtered.length > 0 ? Optional.some(filtered[0]) : Optional.none();\n    };\n    const filterItems = (warehouse, predicate) => {\n      const all = bind(warehouse.all, r => {\n        return r.cells;\n      });\n      return filter(all, predicate);\n    };\n    const generateColumns = rowData => {\n      const columnsGroup = {};\n      let index = 0;\n      each(rowData.cells, column => {\n        const colspan = column.colspan;\n        range(colspan, columnIndex => {\n          const colIndex = index + columnIndex;\n          columnsGroup[colIndex] = columnext(column.element, colspan, colIndex);\n        });\n        index += colspan;\n      });\n      return columnsGroup;\n    };\n    const generate$1 = list => {\n      const access = {};\n      const cells = [];\n      const tableOpt = head(list).map(rowData => rowData.element).bind(table);\n      const lockedColumns = tableOpt.bind(getLockedColumnsFromTable).getOr({});\n      let maxRows = 0;\n      let maxColumns = 0;\n      let rowCount = 0;\n      const {\n        pass: colgroupRows,\n        fail: rows\n      } = partition(list, rowData => rowData.section === 'colgroup');\n      each(rows, rowData => {\n        const currentRow = [];\n        each(rowData.cells, rowCell => {\n          let start = 0;\n          while (access[key(rowCount, start)] !== undefined) {\n            start++;\n          }\n          const isLocked = hasNonNullableKey(lockedColumns, start.toString());\n          const current = extended(rowCell.element, rowCell.rowspan, rowCell.colspan, rowCount, start, isLocked);\n          for (let occupiedColumnPosition = 0; occupiedColumnPosition < rowCell.colspan; occupiedColumnPosition++) {\n            for (let occupiedRowPosition = 0; occupiedRowPosition < rowCell.rowspan; occupiedRowPosition++) {\n              const rowPosition = rowCount + occupiedRowPosition;\n              const columnPosition = start + occupiedColumnPosition;\n              const newpos = key(rowPosition, columnPosition);\n              access[newpos] = current;\n              maxColumns = Math.max(maxColumns, columnPosition + 1);\n            }\n          }\n          currentRow.push(current);\n        });\n        maxRows++;\n        cells.push(rowdetail(rowData.element, currentRow, rowData.section));\n        rowCount++;\n      });\n      const {columns, colgroups} = last(colgroupRows).map(rowData => {\n        const columns = generateColumns(rowData);\n        const colgroup$1 = colgroup(rowData.element, values(columns));\n        return {\n          colgroups: [colgroup$1],\n          columns\n        };\n      }).getOrThunk(() => ({\n        colgroups: [],\n        columns: {}\n      }));\n      const grid$1 = grid(maxRows, maxColumns);\n      return {\n        grid: grid$1,\n        access,\n        all: cells,\n        columns,\n        colgroups\n      };\n    };\n    const fromTable = table => {\n      const list = fromTable$1(table);\n      return generate$1(list);\n    };\n    const justCells = warehouse => bind(warehouse.all, w => w.cells);\n    const justColumns = warehouse => values(warehouse.columns);\n    const hasColumns = warehouse => keys(warehouse.columns).length > 0;\n    const getColumnAt = (warehouse, columnIndex) => Optional.from(warehouse.columns[columnIndex]);\n    const Warehouse = {\n      fromTable,\n      generate: generate$1,\n      getAt,\n      findItem,\n      filterItems,\n      justCells,\n      justColumns,\n      hasColumns,\n      getColumnAt\n    };\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    const getTDTHOverallStyle = (dom, elm, name) => {\n      const cells = dom.select('td,th', elm);\n      let firstChildStyle;\n      for (let i = 0; i < cells.length; i++) {\n        const currentStyle = dom.getStyle(cells[i], name);\n        if (isUndefined(firstChildStyle)) {\n          firstChildStyle = currentStyle;\n        }\n        if (firstChildStyle !== currentStyle) {\n          return '';\n        }\n      }\n      return firstChildStyle;\n    };\n    const setAlign = (editor, elm, name) => {\n      global$2.each('left center right'.split(' '), align => {\n        if (align !== name) {\n          editor.formatter.remove('align' + align, {}, elm);\n        }\n      });\n      if (name) {\n        editor.formatter.apply('align' + name, {}, elm);\n      }\n    };\n    const setVAlign = (editor, elm, name) => {\n      global$2.each('top middle bottom'.split(' '), align => {\n        if (align !== name) {\n          editor.formatter.remove('valign' + align, {}, elm);\n        }\n      });\n      if (name) {\n        editor.formatter.apply('valign' + name, {}, elm);\n      }\n    };\n\n    const fireTableModified = (editor, table, data) => {\n      editor.dispatch('TableModified', {\n        ...data,\n        table\n      });\n    };\n\n    const toNumber = (px, fallback) => toFloat(px).getOr(fallback);\n    const getProp = (element, name, fallback) => toNumber(get$1(element, name), fallback);\n    const calcContentBoxSize = (element, size, upper, lower) => {\n      const paddingUpper = getProp(element, `padding-${ upper }`, 0);\n      const paddingLower = getProp(element, `padding-${ lower }`, 0);\n      const borderUpper = getProp(element, `border-${ upper }-width`, 0);\n      const borderLower = getProp(element, `border-${ lower }-width`, 0);\n      return size - paddingUpper - paddingLower - borderUpper - borderLower;\n    };\n    const getCalculatedWidth = (element, boxSizing) => {\n      const dom = element.dom;\n      const width = dom.getBoundingClientRect().width || dom.offsetWidth;\n      return boxSizing === 'border-box' ? width : calcContentBoxSize(element, width, 'left', 'right');\n    };\n    const getInnerWidth = element => getCalculatedWidth(element, 'content-box');\n\n    const getInner = getInnerWidth;\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.Env');\n\n    const defaultTableToolbar = 'tableprops tabledelete | tableinsertrowbefore tableinsertrowafter tabledeleterow | tableinsertcolbefore tableinsertcolafter tabledeletecol';\n    const defaultCellBorderWidths = range(5, i => {\n      const size = `${ i + 1 }px`;\n      return {\n        title: size,\n        value: size\n      };\n    });\n    const defaultCellBorderStyles = map([\n      'Solid',\n      'Dotted',\n      'Dashed',\n      'Double',\n      'Groove',\n      'Ridge',\n      'Inset',\n      'Outset',\n      'None',\n      'Hidden'\n    ], type => {\n      return {\n        title: type,\n        value: type.toLowerCase()\n      };\n    });\n    const defaultWidth = '100%';\n    const getPixelForcedWidth = editor => {\n      var _a;\n      const dom = editor.dom;\n      const parentBlock = (_a = dom.getParent(editor.selection.getStart(), dom.isBlock)) !== null && _a !== void 0 ? _a : editor.getBody();\n      return getInner(SugarElement.fromDom(parentBlock)) + 'px';\n    };\n    const determineDefaultStyles = (editor, defaultStyles) => {\n      if (isResponsiveForced(editor) || !shouldStyleWithCss(editor)) {\n        return defaultStyles;\n      } else if (isPixelsForced(editor)) {\n        return {\n          ...defaultStyles,\n          width: getPixelForcedWidth(editor)\n        };\n      } else {\n        return {\n          ...defaultStyles,\n          width: defaultWidth\n        };\n      }\n    };\n    const determineDefaultAttributes = (editor, defaultAttributes) => {\n      if (isResponsiveForced(editor) || shouldStyleWithCss(editor)) {\n        return defaultAttributes;\n      } else if (isPixelsForced(editor)) {\n        return {\n          ...defaultAttributes,\n          width: getPixelForcedWidth(editor)\n        };\n      } else {\n        return {\n          ...defaultAttributes,\n          width: defaultWidth\n        };\n      }\n    };\n    const option = name => editor => editor.options.get(name);\n    const register = editor => {\n      const registerOption = editor.options.register;\n      registerOption('table_border_widths', {\n        processor: 'object[]',\n        default: defaultCellBorderWidths\n      });\n      registerOption('table_border_styles', {\n        processor: 'object[]',\n        default: defaultCellBorderStyles\n      });\n      registerOption('table_cell_advtab', {\n        processor: 'boolean',\n        default: true\n      });\n      registerOption('table_row_advtab', {\n        processor: 'boolean',\n        default: true\n      });\n      registerOption('table_advtab', {\n        processor: 'boolean',\n        default: true\n      });\n      registerOption('table_appearance_options', {\n        processor: 'boolean',\n        default: true\n      });\n      registerOption('table_grid', {\n        processor: 'boolean',\n        default: !global$1.deviceType.isTouch()\n      });\n      registerOption('table_cell_class_list', {\n        processor: 'object[]',\n        default: []\n      });\n      registerOption('table_row_class_list', {\n        processor: 'object[]',\n        default: []\n      });\n      registerOption('table_class_list', {\n        processor: 'object[]',\n        default: []\n      });\n      registerOption('table_toolbar', {\n        processor: 'string',\n        default: defaultTableToolbar\n      });\n      registerOption('table_background_color_map', {\n        processor: 'object[]',\n        default: []\n      });\n      registerOption('table_border_color_map', {\n        processor: 'object[]',\n        default: []\n      });\n    };\n    const getTableSizingMode = option('table_sizing_mode');\n    const getTableBorderWidths = option('table_border_widths');\n    const getTableBorderStyles = option('table_border_styles');\n    const hasAdvancedCellTab = option('table_cell_advtab');\n    const hasAdvancedRowTab = option('table_row_advtab');\n    const hasAdvancedTableTab = option('table_advtab');\n    const hasAppearanceOptions = option('table_appearance_options');\n    const hasTableGrid = option('table_grid');\n    const shouldStyleWithCss = option('table_style_by_css');\n    const getCellClassList = option('table_cell_class_list');\n    const getRowClassList = option('table_row_class_list');\n    const getTableClassList = option('table_class_list');\n    const getToolbar = option('table_toolbar');\n    const getTableBackgroundColorMap = option('table_background_color_map');\n    const getTableBorderColorMap = option('table_border_color_map');\n    const isPixelsForced = editor => getTableSizingMode(editor) === 'fixed';\n    const isResponsiveForced = editor => getTableSizingMode(editor) === 'responsive';\n    const getDefaultStyles = editor => {\n      const options = editor.options;\n      const defaultStyles = options.get('table_default_styles');\n      return options.isSet('table_default_styles') ? defaultStyles : determineDefaultStyles(editor, defaultStyles);\n    };\n    const getDefaultAttributes = editor => {\n      const options = editor.options;\n      const defaultAttributes = options.get('table_default_attributes');\n      return options.isSet('table_default_attributes') ? defaultAttributes : determineDefaultAttributes(editor, defaultAttributes);\n    };\n\n    const getNodeName = elm => elm.nodeName.toLowerCase();\n    const getBody = editor => SugarElement.fromDom(editor.getBody());\n    const getIsRoot = editor => element => eq(element, getBody(editor));\n    const removePxSuffix = size => size ? size.replace(/px$/, '') : '';\n    const addPxSuffix = size => /^\\d+(\\.\\d+)?$/.test(size) ? size + 'px' : size;\n    const getSelectionStart = editor => SugarElement.fromDom(editor.selection.getStart());\n    const getSelectionEnd = editor => SugarElement.fromDom(editor.selection.getEnd());\n\n    const isWithin = (bounds, detail) => {\n      return detail.column >= bounds.startCol && detail.column + detail.colspan - 1 <= bounds.finishCol && detail.row >= bounds.startRow && detail.row + detail.rowspan - 1 <= bounds.finishRow;\n    };\n    const isRectangular = (warehouse, bounds) => {\n      let isRect = true;\n      const detailIsWithin = curry(isWithin, bounds);\n      for (let i = bounds.startRow; i <= bounds.finishRow; i++) {\n        for (let j = bounds.startCol; j <= bounds.finishCol; j++) {\n          isRect = isRect && Warehouse.getAt(warehouse, i, j).exists(detailIsWithin);\n        }\n      }\n      return isRect ? Optional.some(bounds) : Optional.none();\n    };\n\n    const getBounds = (detailA, detailB) => {\n      return bounds(Math.min(detailA.row, detailB.row), Math.min(detailA.column, detailB.column), Math.max(detailA.row + detailA.rowspan - 1, detailB.row + detailB.rowspan - 1), Math.max(detailA.column + detailA.colspan - 1, detailB.column + detailB.colspan - 1));\n    };\n    const getAnyBox = (warehouse, startCell, finishCell) => {\n      const startCoords = Warehouse.findItem(warehouse, startCell, eq);\n      const finishCoords = Warehouse.findItem(warehouse, finishCell, eq);\n      return startCoords.bind(sc => {\n        return finishCoords.map(fc => {\n          return getBounds(sc, fc);\n        });\n      });\n    };\n    const getBox$1 = (warehouse, startCell, finishCell) => {\n      return getAnyBox(warehouse, startCell, finishCell).bind(bounds => {\n        return isRectangular(warehouse, bounds);\n      });\n    };\n\n    const getBox = (table, first, last) => {\n      const warehouse = getWarehouse(table);\n      return getBox$1(warehouse, first, last);\n    };\n    const getWarehouse = Warehouse.fromTable;\n\n    const before = (marker, element) => {\n      const parent$1 = parent(marker);\n      parent$1.each(v => {\n        v.dom.insertBefore(element.dom, marker.dom);\n      });\n    };\n    const after$1 = (marker, element) => {\n      const sibling = nextSibling(marker);\n      sibling.fold(() => {\n        const parent$1 = parent(marker);\n        parent$1.each(v => {\n          append$1(v, element);\n        });\n      }, v => {\n        before(v, element);\n      });\n    };\n    const prepend = (parent, element) => {\n      const firstChild$1 = firstChild(parent);\n      firstChild$1.fold(() => {\n        append$1(parent, element);\n      }, v => {\n        parent.dom.insertBefore(element.dom, v.dom);\n      });\n    };\n    const append$1 = (parent, element) => {\n      parent.dom.appendChild(element.dom);\n    };\n    const wrap = (element, wrapper) => {\n      before(element, wrapper);\n      append$1(wrapper, element);\n    };\n\n    const after = (marker, elements) => {\n      each(elements, (x, i) => {\n        const e = i === 0 ? marker : elements[i - 1];\n        after$1(e, x);\n      });\n    };\n    const append = (parent, elements) => {\n      each(elements, x => {\n        append$1(parent, x);\n      });\n    };\n\n    const remove = element => {\n      const dom = element.dom;\n      if (dom.parentNode !== null) {\n        dom.parentNode.removeChild(dom);\n      }\n    };\n    const unwrap = wrapper => {\n      const children = children$3(wrapper);\n      if (children.length > 0) {\n        after(wrapper, children);\n      }\n      remove(wrapper);\n    };\n\n    const NodeValue = (is, name) => {\n      const get = element => {\n        if (!is(element)) {\n          throw new Error('Can only get ' + name + ' value of a ' + name + ' node');\n        }\n        return getOption(element).getOr('');\n      };\n      const getOption = element => is(element) ? Optional.from(element.dom.nodeValue) : Optional.none();\n      const set = (element, value) => {\n        if (!is(element)) {\n          throw new Error('Can only set raw ' + name + ' value of a ' + name + ' node');\n        }\n        element.dom.nodeValue = value;\n      };\n      return {\n        get,\n        getOption,\n        set\n      };\n    };\n\n    const api = NodeValue(isText, 'text');\n    const get = element => api.get(element);\n    const set = (element, value) => api.set(element, value);\n\n    var TagBoundaries = [\n      'body',\n      'p',\n      'div',\n      'article',\n      'aside',\n      'figcaption',\n      'figure',\n      'footer',\n      'header',\n      'nav',\n      'section',\n      'ol',\n      'ul',\n      'li',\n      'table',\n      'thead',\n      'tbody',\n      'tfoot',\n      'caption',\n      'tr',\n      'td',\n      'th',\n      'h1',\n      'h2',\n      'h3',\n      'h4',\n      'h5',\n      'h6',\n      'blockquote',\n      'pre',\n      'address'\n    ];\n\n    var DomUniverse = () => {\n      const clone$1 = element => {\n        return SugarElement.fromDom(element.dom.cloneNode(false));\n      };\n      const document = element => documentOrOwner(element).dom;\n      const isBoundary = element => {\n        if (!isElement(element)) {\n          return false;\n        }\n        if (name(element) === 'body') {\n          return true;\n        }\n        return contains(TagBoundaries, name(element));\n      };\n      const isEmptyTag = element => {\n        if (!isElement(element)) {\n          return false;\n        }\n        return contains([\n          'br',\n          'img',\n          'hr',\n          'input'\n        ], name(element));\n      };\n      const isNonEditable = element => isElement(element) && get$2(element, 'contenteditable') === 'false';\n      const comparePosition = (element, other) => {\n        return element.dom.compareDocumentPosition(other.dom);\n      };\n      const copyAttributesTo = (source, destination) => {\n        const as = clone(source);\n        setAll(destination, as);\n      };\n      const isSpecial = element => {\n        const tag = name(element);\n        return contains([\n          'script',\n          'noscript',\n          'iframe',\n          'noframes',\n          'noembed',\n          'title',\n          'style',\n          'textarea',\n          'xmp'\n        ], tag);\n      };\n      const getLanguage = element => isElement(element) ? getOpt(element, 'lang') : Optional.none();\n      return {\n        up: constant({\n          selector: ancestor,\n          closest: closest,\n          predicate: ancestor$1,\n          all: parents\n        }),\n        down: constant({\n          selector: descendants,\n          predicate: descendants$1\n        }),\n        styles: constant({\n          get: get$1,\n          getRaw: getRaw,\n          set: set$1,\n          remove: remove$1\n        }),\n        attrs: constant({\n          get: get$2,\n          set: set$2,\n          remove: remove$2,\n          copyTo: copyAttributesTo\n        }),\n        insert: constant({\n          before: before,\n          after: after$1,\n          afterAll: after,\n          append: append$1,\n          appendAll: append,\n          prepend: prepend,\n          wrap: wrap\n        }),\n        remove: constant({\n          unwrap: unwrap,\n          remove: remove\n        }),\n        create: constant({\n          nu: SugarElement.fromTag,\n          clone: clone$1,\n          text: SugarElement.fromText\n        }),\n        query: constant({\n          comparePosition,\n          prevSibling: prevSibling,\n          nextSibling: nextSibling\n        }),\n        property: constant({\n          children: children$3,\n          name: name,\n          parent: parent,\n          document,\n          isText: isText,\n          isComment: isComment,\n          isElement: isElement,\n          isSpecial,\n          getLanguage,\n          getText: get,\n          setText: set,\n          isBoundary,\n          isEmptyTag,\n          isNonEditable\n        }),\n        eq: eq,\n        is: is$1\n      };\n    };\n\n    const all = (universe, look, elements, f) => {\n      const head = elements[0];\n      const tail = elements.slice(1);\n      return f(universe, look, head, tail);\n    };\n    const oneAll = (universe, look, elements) => {\n      return elements.length > 0 ? all(universe, look, elements, unsafeOne) : Optional.none();\n    };\n    const unsafeOne = (universe, look, head, tail) => {\n      const start = look(universe, head);\n      return foldr(tail, (b, a) => {\n        const current = look(universe, a);\n        return commonElement(universe, b, current);\n      }, start);\n    };\n    const commonElement = (universe, start, end) => {\n      return start.bind(s => {\n        return end.filter(curry(universe.eq, s));\n      });\n    };\n\n    const sharedOne$1 = oneAll;\n\n    const universe = DomUniverse();\n    const sharedOne = (look, elements) => {\n      return sharedOne$1(universe, (_universe, element) => {\n        return look(element);\n      }, elements);\n    };\n\n    const lookupTable = container => {\n      return ancestor(container, 'table');\n    };\n    const retrieve$1 = (container, selector) => {\n      const sels = descendants(container, selector);\n      return sels.length > 0 ? Optional.some(sels) : Optional.none();\n    };\n    const getEdges = (container, firstSelectedSelector, lastSelectedSelector) => {\n      return descendant(container, firstSelectedSelector).bind(first => {\n        return descendant(container, lastSelectedSelector).bind(last => {\n          return sharedOne(lookupTable, [\n            first,\n            last\n          ]).map(table => {\n            return {\n              first,\n              last,\n              table\n            };\n          });\n        });\n      });\n    };\n\n    const retrieve = (container, selector) => {\n      return retrieve$1(container, selector);\n    };\n    const retrieveBox = (container, firstSelectedSelector, lastSelectedSelector) => {\n      return getEdges(container, firstSelectedSelector, lastSelectedSelector).bind(edges => {\n        const isRoot = ancestor => {\n          return eq(container, ancestor);\n        };\n        const sectionSelector = 'thead,tfoot,tbody,table';\n        const firstAncestor = ancestor(edges.first, sectionSelector, isRoot);\n        const lastAncestor = ancestor(edges.last, sectionSelector, isRoot);\n        return firstAncestor.bind(fA => {\n          return lastAncestor.bind(lA => {\n            return eq(fA, lA) ? getBox(edges.table, edges.first, edges.last) : Optional.none();\n          });\n        });\n      });\n    };\n\n    const fromDom = nodes => map(nodes, SugarElement.fromDom);\n\n    const strSelected = 'data-mce-selected';\n    const strSelectedSelector = 'td[' + strSelected + '],th[' + strSelected + ']';\n    const strFirstSelected = 'data-mce-first-selected';\n    const strFirstSelectedSelector = 'td[' + strFirstSelected + '],th[' + strFirstSelected + ']';\n    const strLastSelected = 'data-mce-last-selected';\n    const strLastSelectedSelector = 'td[' + strLastSelected + '],th[' + strLastSelected + ']';\n    const ephemera = {\n      selected: strSelected,\n      selectedSelector: strSelectedSelector,\n      firstSelected: strFirstSelected,\n      firstSelectedSelector: strFirstSelectedSelector,\n      lastSelected: strLastSelected,\n      lastSelectedSelector: strLastSelectedSelector\n    };\n\n    const getSelectionCellFallback = element => table(element).bind(table => retrieve(table, ephemera.firstSelectedSelector)).fold(constant(element), cells => cells[0]);\n    const getSelectionFromSelector = selector => (initCell, isRoot) => {\n      const cellName = name(initCell);\n      const cell = cellName === 'col' || cellName === 'colgroup' ? getSelectionCellFallback(initCell) : initCell;\n      return closest(cell, selector, isRoot);\n    };\n    const getSelectionCellOrCaption = getSelectionFromSelector('th,td,caption');\n    const getSelectionCell = getSelectionFromSelector('th,td');\n    const getCellsFromSelection = editor => fromDom(editor.model.table.getSelectedCells());\n    const getRowsFromSelection = (selected, selector) => {\n      const cellOpt = getSelectionCell(selected);\n      const rowsOpt = cellOpt.bind(cell => table(cell)).map(table => rows(table));\n      return lift2(cellOpt, rowsOpt, (cell, rows) => filter(rows, row => exists(fromDom(row.dom.cells), rowCell => get$2(rowCell, selector) === '1' || eq(rowCell, cell)))).getOr([]);\n    };\n\n    const verticalAlignValues = [\n      {\n        text: 'None',\n        value: ''\n      },\n      {\n        text: 'Top',\n        value: 'top'\n      },\n      {\n        text: 'Middle',\n        value: 'middle'\n      },\n      {\n        text: 'Bottom',\n        value: 'bottom'\n      }\n    ];\n\n    const hexColour = value => ({ value });\n    const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n    const longformRegex = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i;\n    const isHexString = hex => shorthandRegex.test(hex) || longformRegex.test(hex);\n    const normalizeHex = hex => removeLeading(hex, '#').toUpperCase();\n    const fromString$1 = hex => isHexString(hex) ? Optional.some({ value: normalizeHex(hex) }) : Optional.none();\n    const toHex = component => {\n      const hex = component.toString(16);\n      return (hex.length === 1 ? '0' + hex : hex).toUpperCase();\n    };\n    const fromRgba = rgbaColour => {\n      const value = toHex(rgbaColour.red) + toHex(rgbaColour.green) + toHex(rgbaColour.blue);\n      return hexColour(value);\n    };\n\n    const rgbRegex = /^\\s*rgb\\s*\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)\\s*$/i;\n    const rgbaRegex = /^\\s*rgba\\s*\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d?(?:\\.\\d+)?)\\s*\\)\\s*$/i;\n    const rgbaColour = (red, green, blue, alpha) => ({\n      red,\n      green,\n      blue,\n      alpha\n    });\n    const fromStringValues = (red, green, blue, alpha) => {\n      const r = parseInt(red, 10);\n      const g = parseInt(green, 10);\n      const b = parseInt(blue, 10);\n      const a = parseFloat(alpha);\n      return rgbaColour(r, g, b, a);\n    };\n    const fromString = rgbaString => {\n      if (rgbaString === 'transparent') {\n        return Optional.some(rgbaColour(0, 0, 0, 0));\n      }\n      const rgbMatch = rgbRegex.exec(rgbaString);\n      if (rgbMatch !== null) {\n        return Optional.some(fromStringValues(rgbMatch[1], rgbMatch[2], rgbMatch[3], '1'));\n      }\n      const rgbaMatch = rgbaRegex.exec(rgbaString);\n      if (rgbaMatch !== null) {\n        return Optional.some(fromStringValues(rgbaMatch[1], rgbaMatch[2], rgbaMatch[3], rgbaMatch[4]));\n      }\n      return Optional.none();\n    };\n\n    const anyToHex = color => fromString$1(color).orThunk(() => fromString(color).map(fromRgba)).getOrThunk(() => {\n      const canvas = document.createElement('canvas');\n      canvas.height = 1;\n      canvas.width = 1;\n      const canvasContext = canvas.getContext('2d');\n      canvasContext.clearRect(0, 0, canvas.width, canvas.height);\n      canvasContext.fillStyle = '#FFFFFF';\n      canvasContext.fillStyle = color;\n      canvasContext.fillRect(0, 0, 1, 1);\n      const rgba = canvasContext.getImageData(0, 0, 1, 1).data;\n      const r = rgba[0];\n      const g = rgba[1];\n      const b = rgba[2];\n      const a = rgba[3];\n      return fromRgba(rgbaColour(r, g, b, a));\n    });\n    const rgbaToHexString = color => fromString(color).map(fromRgba).map(h => '#' + h.value).getOr(color);\n\n    const Cell = initial => {\n      let value = initial;\n      const get = () => {\n        return value;\n      };\n      const set = v => {\n        value = v;\n      };\n      return {\n        get,\n        set\n      };\n    };\n\n    const singleton = doRevoke => {\n      const subject = Cell(Optional.none());\n      const revoke = () => subject.get().each(doRevoke);\n      const clear = () => {\n        revoke();\n        subject.set(Optional.none());\n      };\n      const isSet = () => subject.get().isSome();\n      const get = () => subject.get();\n      const set = s => {\n        revoke();\n        subject.set(Optional.some(s));\n      };\n      return {\n        clear,\n        isSet,\n        get,\n        set\n      };\n    };\n    const unbindable = () => singleton(s => s.unbind());\n\n    const onSetupToggle = (editor, formatName, formatValue) => {\n      return api => {\n        const boundCallback = unbindable();\n        const isNone = isEmpty(formatValue);\n        const init = () => {\n          const selectedCells = getCellsFromSelection(editor);\n          const checkNode = cell => editor.formatter.match(formatName, { value: formatValue }, cell.dom, isNone);\n          if (isNone) {\n            api.setActive(!exists(selectedCells, checkNode));\n            boundCallback.set(editor.formatter.formatChanged(formatName, match => api.setActive(!match), true));\n          } else {\n            api.setActive(forall(selectedCells, checkNode));\n            boundCallback.set(editor.formatter.formatChanged(formatName, api.setActive, false, { value: formatValue }));\n          }\n        };\n        editor.initialized ? init() : editor.on('init', init);\n        return boundCallback.clear;\n      };\n    };\n    const isListGroup = item => hasNonNullableKey(item, 'menu');\n    const buildListItems = items => map(items, item => {\n      const text = item.text || item.title || '';\n      if (isListGroup(item)) {\n        return {\n          text,\n          items: buildListItems(item.menu)\n        };\n      } else {\n        return {\n          text,\n          value: item.value\n        };\n      }\n    });\n    const buildMenuItems = (editor, items, format, onAction) => map(items, item => {\n      const text = item.text || item.title;\n      if (isListGroup(item)) {\n        return {\n          type: 'nestedmenuitem',\n          text,\n          getSubmenuItems: () => buildMenuItems(editor, item.menu, format, onAction)\n        };\n      } else {\n        return {\n          text,\n          type: 'togglemenuitem',\n          onAction: () => onAction(item.value),\n          onSetup: onSetupToggle(editor, format, item.value)\n        };\n      }\n    });\n    const applyTableCellStyle = (editor, style) => value => {\n      editor.execCommand('mceTableApplyCellStyle', false, { [style]: value });\n    };\n    const filterNoneItem = list => bind(list, item => {\n      if (isListGroup(item)) {\n        return [{\n            ...item,\n            menu: filterNoneItem(item.menu)\n          }];\n      } else {\n        return isNotEmpty(item.value) ? [item] : [];\n      }\n    });\n    const generateMenuItemsCallback = (editor, items, format, onAction) => callback => callback(buildMenuItems(editor, items, format, onAction));\n    const buildColorMenu = (editor, colorList, style) => {\n      const colorMap = map(colorList, entry => ({\n        text: entry.title,\n        value: '#' + anyToHex(entry.value).value,\n        type: 'choiceitem'\n      }));\n      return [{\n          type: 'fancymenuitem',\n          fancytype: 'colorswatch',\n          initData: {\n            colors: colorMap.length > 0 ? colorMap : undefined,\n            allowCustomColors: false\n          },\n          onAction: data => {\n            const value = data.value === 'remove' ? '' : data.value;\n            editor.execCommand('mceTableApplyCellStyle', false, { [style]: value });\n          }\n        }];\n    };\n    const changeRowHeader = editor => () => {\n      const currentType = editor.queryCommandValue('mceTableRowType');\n      const newType = currentType === 'header' ? 'body' : 'header';\n      editor.execCommand('mceTableRowType', false, { type: newType });\n    };\n    const changeColumnHeader = editor => () => {\n      const currentType = editor.queryCommandValue('mceTableColType');\n      const newType = currentType === 'th' ? 'td' : 'th';\n      editor.execCommand('mceTableColType', false, { type: newType });\n    };\n\n    const getClassList$1 = editor => {\n      const classes = buildListItems(getCellClassList(editor));\n      if (classes.length > 0) {\n        return Optional.some({\n          name: 'class',\n          type: 'listbox',\n          label: 'Class',\n          items: classes\n        });\n      }\n      return Optional.none();\n    };\n    const children = [\n      {\n        name: 'width',\n        type: 'input',\n        label: 'Width'\n      },\n      {\n        name: 'height',\n        type: 'input',\n        label: 'Height'\n      },\n      {\n        name: 'celltype',\n        type: 'listbox',\n        label: 'Cell type',\n        items: [\n          {\n            text: 'Cell',\n            value: 'td'\n          },\n          {\n            text: 'Header cell',\n            value: 'th'\n          }\n        ]\n      },\n      {\n        name: 'scope',\n        type: 'listbox',\n        label: 'Scope',\n        items: [\n          {\n            text: 'None',\n            value: ''\n          },\n          {\n            text: 'Row',\n            value: 'row'\n          },\n          {\n            text: 'Column',\n            value: 'col'\n          },\n          {\n            text: 'Row group',\n            value: 'rowgroup'\n          },\n          {\n            text: 'Column group',\n            value: 'colgroup'\n          }\n        ]\n      },\n      {\n        name: 'halign',\n        type: 'listbox',\n        label: 'Horizontal align',\n        items: [\n          {\n            text: 'None',\n            value: ''\n          },\n          {\n            text: 'Left',\n            value: 'left'\n          },\n          {\n            text: 'Center',\n            value: 'center'\n          },\n          {\n            text: 'Right',\n            value: 'right'\n          }\n        ]\n      },\n      {\n        name: 'valign',\n        type: 'listbox',\n        label: 'Vertical align',\n        items: verticalAlignValues\n      }\n    ];\n    const getItems$2 = editor => children.concat(getClassList$1(editor).toArray());\n\n    const getAdvancedTab = (editor, dialogName) => {\n      const emptyBorderStyle = [{\n          text: 'Select...',\n          value: ''\n        }];\n      const advTabItems = [\n        {\n          name: 'borderstyle',\n          type: 'listbox',\n          label: 'Border style',\n          items: emptyBorderStyle.concat(buildListItems(getTableBorderStyles(editor)))\n        },\n        {\n          name: 'bordercolor',\n          type: 'colorinput',\n          label: 'Border color'\n        },\n        {\n          name: 'backgroundcolor',\n          type: 'colorinput',\n          label: 'Background color'\n        }\n      ];\n      const borderWidth = {\n        name: 'borderwidth',\n        type: 'input',\n        label: 'Border width'\n      };\n      const items = dialogName === 'cell' ? [borderWidth].concat(advTabItems) : advTabItems;\n      return {\n        title: 'Advanced',\n        name: 'advanced',\n        items\n      };\n    };\n\n    const normal = (editor, element) => {\n      const dom = editor.dom;\n      const setAttrib = (attr, value) => {\n        dom.setAttrib(element, attr, value);\n      };\n      const setStyle = (prop, value) => {\n        dom.setStyle(element, prop, value);\n      };\n      const setFormat = (formatName, value) => {\n        if (value === '') {\n          editor.formatter.remove(formatName, { value: null }, element, true);\n        } else {\n          editor.formatter.apply(formatName, { value }, element);\n        }\n      };\n      return {\n        setAttrib,\n        setStyle,\n        setFormat\n      };\n    };\n    const DomModifier = { normal };\n\n    const isHeaderCell = isTag('th');\n    const getRowHeaderType = (isHeaderRow, isHeaderCells) => {\n      if (isHeaderRow && isHeaderCells) {\n        return 'sectionCells';\n      } else if (isHeaderRow) {\n        return 'section';\n      } else {\n        return 'cells';\n      }\n    };\n    const getRowType$1 = row => {\n      const isHeaderRow = row.section === 'thead';\n      const isHeaderCells = is(findCommonCellType(row.cells), 'th');\n      if (row.section === 'tfoot') {\n        return { type: 'footer' };\n      } else if (isHeaderRow || isHeaderCells) {\n        return {\n          type: 'header',\n          subType: getRowHeaderType(isHeaderRow, isHeaderCells)\n        };\n      } else {\n        return { type: 'body' };\n      }\n    };\n    const findCommonCellType = cells => {\n      const headerCells = filter(cells, cell => isHeaderCell(cell.element));\n      if (headerCells.length === 0) {\n        return Optional.some('td');\n      } else if (headerCells.length === cells.length) {\n        return Optional.some('th');\n      } else {\n        return Optional.none();\n      }\n    };\n    const findCommonRowType = rows => {\n      const rowTypes = map(rows, row => getRowType$1(row).type);\n      const hasHeader = contains(rowTypes, 'header');\n      const hasFooter = contains(rowTypes, 'footer');\n      if (!hasHeader && !hasFooter) {\n        return Optional.some('body');\n      } else {\n        const hasBody = contains(rowTypes, 'body');\n        if (hasHeader && !hasBody && !hasFooter) {\n          return Optional.some('header');\n        } else if (!hasHeader && !hasBody && hasFooter) {\n          return Optional.some('footer');\n        } else {\n          return Optional.none();\n        }\n      }\n    };\n\n    const cached = f => {\n      let called = false;\n      let r;\n      return (...args) => {\n        if (!called) {\n          called = true;\n          r = f.apply(null, args);\n        }\n        return r;\n      };\n    };\n\n    const findInWarehouse = (warehouse, element) => findMap(warehouse.all, r => find(r.cells, e => eq(element, e.element)));\n    const extractCells = (warehouse, target, predicate) => {\n      const details = map(target.selection, cell$1 => {\n        return cell(cell$1).bind(lc => findInWarehouse(warehouse, lc)).filter(predicate);\n      });\n      const cells = cat(details);\n      return someIf(cells.length > 0, cells);\n    };\n    const onMergable = (_warehouse, target) => target.mergable;\n    const onUnmergable = (_warehouse, target) => target.unmergable;\n    const onCells = (warehouse, target) => extractCells(warehouse, target, always);\n    const isUnlockedTableCell = (warehouse, cell) => findInWarehouse(warehouse, cell).exists(detail => !detail.isLocked);\n    const allUnlocked = (warehouse, cells) => forall(cells, cell => isUnlockedTableCell(warehouse, cell));\n    const onUnlockedMergable = (warehouse, target) => onMergable(warehouse, target).filter(mergeable => allUnlocked(warehouse, mergeable.cells));\n    const onUnlockedUnmergable = (warehouse, target) => onUnmergable(warehouse, target).filter(cells => allUnlocked(warehouse, cells));\n\n    const generate = cases => {\n      if (!isArray(cases)) {\n        throw new Error('cases must be an array');\n      }\n      if (cases.length === 0) {\n        throw new Error('there must be at least one case');\n      }\n      const constructors = [];\n      const adt = {};\n      each(cases, (acase, count) => {\n        const keys$1 = keys(acase);\n        if (keys$1.length !== 1) {\n          throw new Error('one and only one name per case');\n        }\n        const key = keys$1[0];\n        const value = acase[key];\n        if (adt[key] !== undefined) {\n          throw new Error('duplicate key detected:' + key);\n        } else if (key === 'cata') {\n          throw new Error('cannot have a case named cata (sorry)');\n        } else if (!isArray(value)) {\n          throw new Error('case arguments must be an array');\n        }\n        constructors.push(key);\n        adt[key] = (...args) => {\n          const argLength = args.length;\n          if (argLength !== value.length) {\n            throw new Error('Wrong number of arguments to case ' + key + '. Expected ' + value.length + ' (' + value + '), got ' + argLength);\n          }\n          const match = branches => {\n            const branchKeys = keys(branches);\n            if (constructors.length !== branchKeys.length) {\n              throw new Error('Wrong number of arguments to match. Expected: ' + constructors.join(',') + '\\nActual: ' + branchKeys.join(','));\n            }\n            const allReqd = forall(constructors, reqKey => {\n              return contains(branchKeys, reqKey);\n            });\n            if (!allReqd) {\n              throw new Error('Not all branches were specified when using match. Specified: ' + branchKeys.join(', ') + '\\nRequired: ' + constructors.join(', '));\n            }\n            return branches[key].apply(null, args);\n          };\n          return {\n            fold: (...foldArgs) => {\n              if (foldArgs.length !== cases.length) {\n                throw new Error('Wrong number of arguments to fold. Expected ' + cases.length + ', got ' + foldArgs.length);\n              }\n              const target = foldArgs[count];\n              return target.apply(null, args);\n            },\n            match,\n            log: label => {\n              console.log(label, {\n                constructors,\n                constructor: key,\n                params: args\n              });\n            }\n          };\n        };\n      });\n      return adt;\n    };\n    const Adt = { generate };\n\n    const adt = Adt.generate([\n      { none: [] },\n      { only: ['index'] },\n      {\n        left: [\n          'index',\n          'next'\n        ]\n      },\n      {\n        middle: [\n          'prev',\n          'index',\n          'next'\n        ]\n      },\n      {\n        right: [\n          'prev',\n          'index'\n        ]\n      }\n    ]);\n    ({ ...adt });\n\n    const opGetRowsType = (table, target) => {\n      const house = Warehouse.fromTable(table);\n      const details = onCells(house, target);\n      return details.bind(selectedCells => {\n        const lastSelectedCell = selectedCells[selectedCells.length - 1];\n        const minRowRange = selectedCells[0].row;\n        const maxRowRange = lastSelectedCell.row + lastSelectedCell.rowspan;\n        const selectedRows = house.all.slice(minRowRange, maxRowRange);\n        return findCommonRowType(selectedRows);\n      }).getOr('');\n    };\n    const getRowsType = opGetRowsType;\n\n    const rgbToHex = value => startsWith(value, 'rgb') ? rgbaToHexString(value) : value;\n    const extractAdvancedStyles = elm => {\n      const element = SugarElement.fromDom(elm);\n      return {\n        borderwidth: getRaw(element, 'border-width').getOr(''),\n        borderstyle: getRaw(element, 'border-style').getOr(''),\n        bordercolor: getRaw(element, 'border-color').map(rgbToHex).getOr(''),\n        backgroundcolor: getRaw(element, 'background-color').map(rgbToHex).getOr('')\n      };\n    };\n    const getSharedValues = data => {\n      const baseData = data[0];\n      const comparisonData = data.slice(1);\n      each(comparisonData, items => {\n        each(keys(baseData), key => {\n          each$1(items, (itemValue, itemKey) => {\n            const comparisonValue = baseData[key];\n            if (comparisonValue !== '' && key === itemKey) {\n              if (comparisonValue !== itemValue) {\n                baseData[key] = '';\n              }\n            }\n          });\n        });\n      });\n      return baseData;\n    };\n    const getAlignment = (formats, formatName, editor, elm) => find(formats, name => !isUndefined(editor.formatter.matchNode(elm, formatName + name))).getOr('');\n    const getHAlignment = curry(getAlignment, [\n      'left',\n      'center',\n      'right'\n    ], 'align');\n    const getVAlignment = curry(getAlignment, [\n      'top',\n      'middle',\n      'bottom'\n    ], 'valign');\n    const extractDataFromSettings = (editor, hasAdvTableTab) => {\n      const style = getDefaultStyles(editor);\n      const attrs = getDefaultAttributes(editor);\n      const extractAdvancedStyleData = () => ({\n        borderstyle: get$4(style, 'border-style').getOr(''),\n        bordercolor: rgbToHex(get$4(style, 'border-color').getOr('')),\n        backgroundcolor: rgbToHex(get$4(style, 'background-color').getOr(''))\n      });\n      const defaultData = {\n        height: '',\n        width: '100%',\n        cellspacing: '',\n        cellpadding: '',\n        caption: false,\n        class: '',\n        align: '',\n        border: ''\n      };\n      const getBorder = () => {\n        const borderWidth = style['border-width'];\n        if (shouldStyleWithCss(editor) && borderWidth) {\n          return { border: borderWidth };\n        }\n        return get$4(attrs, 'border').fold(() => ({}), border => ({ border }));\n      };\n      const advStyle = hasAdvTableTab ? extractAdvancedStyleData() : {};\n      const getCellPaddingCellSpacing = () => {\n        const spacing = get$4(style, 'border-spacing').or(get$4(attrs, 'cellspacing')).fold(() => ({}), cellspacing => ({ cellspacing }));\n        const padding = get$4(style, 'border-padding').or(get$4(attrs, 'cellpadding')).fold(() => ({}), cellpadding => ({ cellpadding }));\n        return {\n          ...spacing,\n          ...padding\n        };\n      };\n      const data = {\n        ...defaultData,\n        ...style,\n        ...attrs,\n        ...advStyle,\n        ...getBorder(),\n        ...getCellPaddingCellSpacing()\n      };\n      return data;\n    };\n    const getRowType = elm => table(SugarElement.fromDom(elm)).map(table => {\n      const target = { selection: fromDom(elm.cells) };\n      return getRowsType(table, target);\n    }).getOr('');\n    const extractDataFromTableElement = (editor, elm, hasAdvTableTab) => {\n      const getBorder = (dom, elm) => {\n        const optBorderWidth = getRaw(SugarElement.fromDom(elm), 'border-width');\n        if (shouldStyleWithCss(editor) && optBorderWidth.isSome()) {\n          return optBorderWidth.getOr('');\n        }\n        return dom.getAttrib(elm, 'border') || getTDTHOverallStyle(editor.dom, elm, 'border-width') || getTDTHOverallStyle(editor.dom, elm, 'border') || '';\n      };\n      const dom = editor.dom;\n      const cellspacing = shouldStyleWithCss(editor) ? dom.getStyle(elm, 'border-spacing') || dom.getAttrib(elm, 'cellspacing') : dom.getAttrib(elm, 'cellspacing') || dom.getStyle(elm, 'border-spacing');\n      const cellpadding = shouldStyleWithCss(editor) ? getTDTHOverallStyle(dom, elm, 'padding') || dom.getAttrib(elm, 'cellpadding') : dom.getAttrib(elm, 'cellpadding') || getTDTHOverallStyle(dom, elm, 'padding');\n      return {\n        width: dom.getStyle(elm, 'width') || dom.getAttrib(elm, 'width'),\n        height: dom.getStyle(elm, 'height') || dom.getAttrib(elm, 'height'),\n        cellspacing: cellspacing !== null && cellspacing !== void 0 ? cellspacing : '',\n        cellpadding: cellpadding !== null && cellpadding !== void 0 ? cellpadding : '',\n        border: getBorder(dom, elm),\n        caption: !!dom.select('caption', elm)[0],\n        class: dom.getAttrib(elm, 'class', ''),\n        align: getHAlignment(editor, elm),\n        ...hasAdvTableTab ? extractAdvancedStyles(elm) : {}\n      };\n    };\n    const extractDataFromRowElement = (editor, elm, hasAdvancedRowTab) => {\n      const dom = editor.dom;\n      return {\n        height: dom.getStyle(elm, 'height') || dom.getAttrib(elm, 'height'),\n        class: dom.getAttrib(elm, 'class', ''),\n        type: getRowType(elm),\n        align: getHAlignment(editor, elm),\n        ...hasAdvancedRowTab ? extractAdvancedStyles(elm) : {}\n      };\n    };\n    const extractDataFromCellElement = (editor, cell, hasAdvancedCellTab, column) => {\n      const dom = editor.dom;\n      const colElm = column.getOr(cell);\n      const getStyle = (element, style) => dom.getStyle(element, style) || dom.getAttrib(element, style);\n      return {\n        width: getStyle(colElm, 'width'),\n        height: getStyle(cell, 'height'),\n        scope: dom.getAttrib(cell, 'scope'),\n        celltype: getNodeName(cell),\n        class: dom.getAttrib(cell, 'class', ''),\n        halign: getHAlignment(editor, cell),\n        valign: getVAlignment(editor, cell),\n        ...hasAdvancedCellTab ? extractAdvancedStyles(cell) : {}\n      };\n    };\n\n    const getSelectedCells = (table, cells) => {\n      const warehouse = Warehouse.fromTable(table);\n      const allCells = Warehouse.justCells(warehouse);\n      const filtered = filter(allCells, cellA => exists(cells, cellB => eq(cellA.element, cellB)));\n      return map(filtered, cell => ({\n        element: cell.element.dom,\n        column: Warehouse.getColumnAt(warehouse, cell.column).map(col => col.element.dom)\n      }));\n    };\n    const updateSimpleProps$1 = (modifier, colModifier, data, shouldUpdate) => {\n      if (shouldUpdate('scope')) {\n        modifier.setAttrib('scope', data.scope);\n      }\n      if (shouldUpdate('class')) {\n        modifier.setAttrib('class', data.class);\n      }\n      if (shouldUpdate('height')) {\n        modifier.setStyle('height', addPxSuffix(data.height));\n      }\n      if (shouldUpdate('width')) {\n        colModifier.setStyle('width', addPxSuffix(data.width));\n      }\n    };\n    const updateAdvancedProps$1 = (modifier, data, shouldUpdate) => {\n      if (shouldUpdate('backgroundcolor')) {\n        modifier.setFormat('tablecellbackgroundcolor', data.backgroundcolor);\n      }\n      if (shouldUpdate('bordercolor')) {\n        modifier.setFormat('tablecellbordercolor', data.bordercolor);\n      }\n      if (shouldUpdate('borderstyle')) {\n        modifier.setFormat('tablecellborderstyle', data.borderstyle);\n      }\n      if (shouldUpdate('borderwidth')) {\n        modifier.setFormat('tablecellborderwidth', addPxSuffix(data.borderwidth));\n      }\n    };\n    const applyStyleData$1 = (editor, cells, data, wasChanged) => {\n      const isSingleCell = cells.length === 1;\n      each(cells, item => {\n        const cellElm = item.element;\n        const shouldOverrideCurrentValue = isSingleCell ? always : wasChanged;\n        const modifier = DomModifier.normal(editor, cellElm);\n        const colModifier = item.column.map(col => DomModifier.normal(editor, col)).getOr(modifier);\n        updateSimpleProps$1(modifier, colModifier, data, shouldOverrideCurrentValue);\n        if (hasAdvancedCellTab(editor)) {\n          updateAdvancedProps$1(modifier, data, shouldOverrideCurrentValue);\n        }\n        if (wasChanged('halign')) {\n          setAlign(editor, cellElm, data.halign);\n        }\n        if (wasChanged('valign')) {\n          setVAlign(editor, cellElm, data.valign);\n        }\n      });\n    };\n    const applyStructureData$1 = (editor, data) => {\n      editor.execCommand('mceTableCellType', false, {\n        type: data.celltype,\n        no_events: true\n      });\n    };\n    const applyCellData = (editor, cells, oldData, data) => {\n      const modifiedData = filter$1(data, (value, key) => oldData[key] !== value);\n      if (size(modifiedData) > 0 && cells.length >= 1) {\n        table(cells[0]).each(table => {\n          const selectedCells = getSelectedCells(table, cells);\n          const styleModified = size(filter$1(modifiedData, (_value, key) => key !== 'scope' && key !== 'celltype')) > 0;\n          const structureModified = has(modifiedData, 'celltype');\n          if (styleModified || has(modifiedData, 'scope')) {\n            applyStyleData$1(editor, selectedCells, data, curry(has, modifiedData));\n          }\n          if (structureModified) {\n            applyStructureData$1(editor, data);\n          }\n          fireTableModified(editor, table.dom, {\n            structure: structureModified,\n            style: styleModified\n          });\n        });\n      }\n    };\n    const onSubmitCellForm = (editor, cells, oldData, api) => {\n      const data = api.getData();\n      api.close();\n      editor.undoManager.transact(() => {\n        applyCellData(editor, cells, oldData, data);\n        editor.focus();\n      });\n    };\n    const getData$1 = (editor, cells) => {\n      const cellsData = table(cells[0]).map(table => map(getSelectedCells(table, cells), item => extractDataFromCellElement(editor, item.element, hasAdvancedCellTab(editor), item.column)));\n      return getSharedValues(cellsData.getOrDie());\n    };\n    const open$2 = editor => {\n      const cells = getCellsFromSelection(editor);\n      if (cells.length === 0) {\n        return;\n      }\n      const data = getData$1(editor, cells);\n      const dialogTabPanel = {\n        type: 'tabpanel',\n        tabs: [\n          {\n            title: 'General',\n            name: 'general',\n            items: getItems$2(editor)\n          },\n          getAdvancedTab(editor, 'cell')\n        ]\n      };\n      const dialogPanel = {\n        type: 'panel',\n        items: [{\n            type: 'grid',\n            columns: 2,\n            items: getItems$2(editor)\n          }]\n      };\n      editor.windowManager.open({\n        title: 'Cell Properties',\n        size: 'normal',\n        body: hasAdvancedCellTab(editor) ? dialogTabPanel : dialogPanel,\n        buttons: [\n          {\n            type: 'cancel',\n            name: 'cancel',\n            text: 'Cancel'\n          },\n          {\n            type: 'submit',\n            name: 'save',\n            text: 'Save',\n            primary: true\n          }\n        ],\n        initialData: data,\n        onSubmit: curry(onSubmitCellForm, editor, cells, data)\n      });\n    };\n\n    const getClassList = editor => {\n      const classes = buildListItems(getRowClassList(editor));\n      if (classes.length > 0) {\n        return Optional.some({\n          name: 'class',\n          type: 'listbox',\n          label: 'Class',\n          items: classes\n        });\n      }\n      return Optional.none();\n    };\n    const formChildren = [\n      {\n        type: 'listbox',\n        name: 'type',\n        label: 'Row type',\n        items: [\n          {\n            text: 'Header',\n            value: 'header'\n          },\n          {\n            text: 'Body',\n            value: 'body'\n          },\n          {\n            text: 'Footer',\n            value: 'footer'\n          }\n        ]\n      },\n      {\n        type: 'listbox',\n        name: 'align',\n        label: 'Alignment',\n        items: [\n          {\n            text: 'None',\n            value: ''\n          },\n          {\n            text: 'Left',\n            value: 'left'\n          },\n          {\n            text: 'Center',\n            value: 'center'\n          },\n          {\n            text: 'Right',\n            value: 'right'\n          }\n        ]\n      },\n      {\n        label: 'Height',\n        name: 'height',\n        type: 'input'\n      }\n    ];\n    const getItems$1 = editor => formChildren.concat(getClassList(editor).toArray());\n\n    const updateSimpleProps = (modifier, data, shouldUpdate) => {\n      if (shouldUpdate('class')) {\n        modifier.setAttrib('class', data.class);\n      }\n      if (shouldUpdate('height')) {\n        modifier.setStyle('height', addPxSuffix(data.height));\n      }\n    };\n    const updateAdvancedProps = (modifier, data, shouldUpdate) => {\n      if (shouldUpdate('backgroundcolor')) {\n        modifier.setStyle('background-color', data.backgroundcolor);\n      }\n      if (shouldUpdate('bordercolor')) {\n        modifier.setStyle('border-color', data.bordercolor);\n      }\n      if (shouldUpdate('borderstyle')) {\n        modifier.setStyle('border-style', data.borderstyle);\n      }\n    };\n    const applyStyleData = (editor, rows, data, wasChanged) => {\n      const isSingleRow = rows.length === 1;\n      const shouldOverrideCurrentValue = isSingleRow ? always : wasChanged;\n      each(rows, rowElm => {\n        const modifier = DomModifier.normal(editor, rowElm);\n        updateSimpleProps(modifier, data, shouldOverrideCurrentValue);\n        if (hasAdvancedRowTab(editor)) {\n          updateAdvancedProps(modifier, data, shouldOverrideCurrentValue);\n        }\n        if (wasChanged('align')) {\n          setAlign(editor, rowElm, data.align);\n        }\n      });\n    };\n    const applyStructureData = (editor, data) => {\n      editor.execCommand('mceTableRowType', false, {\n        type: data.type,\n        no_events: true\n      });\n    };\n    const applyRowData = (editor, rows, oldData, data) => {\n      const modifiedData = filter$1(data, (value, key) => oldData[key] !== value);\n      if (size(modifiedData) > 0) {\n        const typeModified = has(modifiedData, 'type');\n        const styleModified = typeModified ? size(modifiedData) > 1 : true;\n        if (styleModified) {\n          applyStyleData(editor, rows, data, curry(has, modifiedData));\n        }\n        if (typeModified) {\n          applyStructureData(editor, data);\n        }\n        table(SugarElement.fromDom(rows[0])).each(table => fireTableModified(editor, table.dom, {\n          structure: typeModified,\n          style: styleModified\n        }));\n      }\n    };\n    const onSubmitRowForm = (editor, rows, oldData, api) => {\n      const data = api.getData();\n      api.close();\n      editor.undoManager.transact(() => {\n        applyRowData(editor, rows, oldData, data);\n        editor.focus();\n      });\n    };\n    const open$1 = editor => {\n      const rows = getRowsFromSelection(getSelectionStart(editor), ephemera.selected);\n      if (rows.length === 0) {\n        return;\n      }\n      const rowsData = map(rows, rowElm => extractDataFromRowElement(editor, rowElm.dom, hasAdvancedRowTab(editor)));\n      const data = getSharedValues(rowsData);\n      const dialogTabPanel = {\n        type: 'tabpanel',\n        tabs: [\n          {\n            title: 'General',\n            name: 'general',\n            items: getItems$1(editor)\n          },\n          getAdvancedTab(editor, 'row')\n        ]\n      };\n      const dialogPanel = {\n        type: 'panel',\n        items: [{\n            type: 'grid',\n            columns: 2,\n            items: getItems$1(editor)\n          }]\n      };\n      editor.windowManager.open({\n        title: 'Row Properties',\n        size: 'normal',\n        body: hasAdvancedRowTab(editor) ? dialogTabPanel : dialogPanel,\n        buttons: [\n          {\n            type: 'cancel',\n            name: 'cancel',\n            text: 'Cancel'\n          },\n          {\n            type: 'submit',\n            name: 'save',\n            text: 'Save',\n            primary: true\n          }\n        ],\n        initialData: data,\n        onSubmit: curry(onSubmitRowForm, editor, map(rows, r => r.dom), data)\n      });\n    };\n\n    const getItems = (editor, classes, insertNewTable) => {\n      const rowColCountItems = !insertNewTable ? [] : [\n        {\n          type: 'input',\n          name: 'cols',\n          label: 'Cols',\n          inputMode: 'numeric'\n        },\n        {\n          type: 'input',\n          name: 'rows',\n          label: 'Rows',\n          inputMode: 'numeric'\n        }\n      ];\n      const alwaysItems = [\n        {\n          type: 'input',\n          name: 'width',\n          label: 'Width'\n        },\n        {\n          type: 'input',\n          name: 'height',\n          label: 'Height'\n        }\n      ];\n      const appearanceItems = hasAppearanceOptions(editor) ? [\n        {\n          type: 'input',\n          name: 'cellspacing',\n          label: 'Cell spacing',\n          inputMode: 'numeric'\n        },\n        {\n          type: 'input',\n          name: 'cellpadding',\n          label: 'Cell padding',\n          inputMode: 'numeric'\n        },\n        {\n          type: 'input',\n          name: 'border',\n          label: 'Border width'\n        },\n        {\n          type: 'label',\n          label: 'Caption',\n          items: [{\n              type: 'checkbox',\n              name: 'caption',\n              label: 'Show caption'\n            }]\n        }\n      ] : [];\n      const alignmentItem = [{\n          type: 'listbox',\n          name: 'align',\n          label: 'Alignment',\n          items: [\n            {\n              text: 'None',\n              value: ''\n            },\n            {\n              text: 'Left',\n              value: 'left'\n            },\n            {\n              text: 'Center',\n              value: 'center'\n            },\n            {\n              text: 'Right',\n              value: 'right'\n            }\n          ]\n        }];\n      const classListItem = classes.length > 0 ? [{\n          type: 'listbox',\n          name: 'class',\n          label: 'Class',\n          items: classes\n        }] : [];\n      return rowColCountItems.concat(alwaysItems).concat(appearanceItems).concat(alignmentItem).concat(classListItem);\n    };\n\n    const styleTDTH = (dom, elm, name, value) => {\n      if (elm.tagName === 'TD' || elm.tagName === 'TH') {\n        if (isString(name) && isNonNullable(value)) {\n          dom.setStyle(elm, name, value);\n        } else {\n          dom.setStyles(elm, name);\n        }\n      } else {\n        if (elm.children) {\n          for (let i = 0; i < elm.children.length; i++) {\n            styleTDTH(dom, elm.children[i], name, value);\n          }\n        }\n      }\n    };\n    const applyDataToElement = (editor, tableElm, data) => {\n      const dom = editor.dom;\n      const attrs = {};\n      const styles = {};\n      if (!isUndefined(data.class)) {\n        attrs.class = data.class;\n      }\n      styles.height = addPxSuffix(data.height);\n      if (shouldStyleWithCss(editor)) {\n        styles.width = addPxSuffix(data.width);\n      } else if (dom.getAttrib(tableElm, 'width')) {\n        attrs.width = removePxSuffix(data.width);\n      }\n      if (shouldStyleWithCss(editor)) {\n        styles['border-width'] = addPxSuffix(data.border);\n        styles['border-spacing'] = addPxSuffix(data.cellspacing);\n      } else {\n        attrs.border = data.border;\n        attrs.cellpadding = data.cellpadding;\n        attrs.cellspacing = data.cellspacing;\n      }\n      if (shouldStyleWithCss(editor) && tableElm.children) {\n        for (let i = 0; i < tableElm.children.length; i++) {\n          styleTDTH(dom, tableElm.children[i], {\n            'border-width': addPxSuffix(data.border),\n            'padding': addPxSuffix(data.cellpadding)\n          });\n          if (hasAdvancedTableTab(editor)) {\n            styleTDTH(dom, tableElm.children[i], { 'border-color': data.bordercolor });\n          }\n        }\n      }\n      if (hasAdvancedTableTab(editor)) {\n        const advData = data;\n        styles['background-color'] = advData.backgroundcolor;\n        styles['border-color'] = advData.bordercolor;\n        styles['border-style'] = advData.borderstyle;\n      }\n      attrs.style = dom.serializeStyle({\n        ...getDefaultStyles(editor),\n        ...styles\n      });\n      dom.setAttribs(tableElm, {\n        ...getDefaultAttributes(editor),\n        ...attrs\n      });\n    };\n    const onSubmitTableForm = (editor, tableElm, oldData, api) => {\n      const dom = editor.dom;\n      const data = api.getData();\n      const modifiedData = filter$1(data, (value, key) => oldData[key] !== value);\n      api.close();\n      if (data.class === '') {\n        delete data.class;\n      }\n      editor.undoManager.transact(() => {\n        if (!tableElm) {\n          const cols = toInt(data.cols).getOr(1);\n          const rows = toInt(data.rows).getOr(1);\n          editor.execCommand('mceInsertTable', false, {\n            rows,\n            columns: cols\n          });\n          tableElm = getSelectionCell(getSelectionStart(editor), getIsRoot(editor)).bind(cell => table(cell, getIsRoot(editor))).map(table => table.dom).getOrDie();\n        }\n        if (size(modifiedData) > 0) {\n          applyDataToElement(editor, tableElm, data);\n          const captionElm = dom.select('caption', tableElm)[0];\n          if (captionElm && !data.caption || !captionElm && data.caption) {\n            editor.execCommand('mceTableToggleCaption');\n          }\n          setAlign(editor, tableElm, data.align);\n        }\n        editor.focus();\n        editor.addVisual();\n        if (size(modifiedData) > 0) {\n          const captionModified = has(modifiedData, 'caption');\n          const styleModified = captionModified ? size(modifiedData) > 1 : true;\n          fireTableModified(editor, tableElm, {\n            structure: captionModified,\n            style: styleModified\n          });\n        }\n      });\n    };\n    const open = (editor, insertNewTable) => {\n      const dom = editor.dom;\n      let tableElm;\n      let data = extractDataFromSettings(editor, hasAdvancedTableTab(editor));\n      if (insertNewTable) {\n        data.cols = '1';\n        data.rows = '1';\n        if (hasAdvancedTableTab(editor)) {\n          data.borderstyle = '';\n          data.bordercolor = '';\n          data.backgroundcolor = '';\n        }\n      } else {\n        tableElm = dom.getParent(editor.selection.getStart(), 'table', editor.getBody());\n        if (tableElm) {\n          data = extractDataFromTableElement(editor, tableElm, hasAdvancedTableTab(editor));\n        } else {\n          if (hasAdvancedTableTab(editor)) {\n            data.borderstyle = '';\n            data.bordercolor = '';\n            data.backgroundcolor = '';\n          }\n        }\n      }\n      const classes = buildListItems(getTableClassList(editor));\n      if (classes.length > 0) {\n        if (data.class) {\n          data.class = data.class.replace(/\\s*mce\\-item\\-table\\s*/g, '');\n        }\n      }\n      const generalPanel = {\n        type: 'grid',\n        columns: 2,\n        items: getItems(editor, classes, insertNewTable)\n      };\n      const nonAdvancedForm = () => ({\n        type: 'panel',\n        items: [generalPanel]\n      });\n      const advancedForm = () => ({\n        type: 'tabpanel',\n        tabs: [\n          {\n            title: 'General',\n            name: 'general',\n            items: [generalPanel]\n          },\n          getAdvancedTab(editor, 'table')\n        ]\n      });\n      const dialogBody = hasAdvancedTableTab(editor) ? advancedForm() : nonAdvancedForm();\n      editor.windowManager.open({\n        title: 'Table Properties',\n        size: 'normal',\n        body: dialogBody,\n        onSubmit: curry(onSubmitTableForm, editor, tableElm, data),\n        buttons: [\n          {\n            type: 'cancel',\n            name: 'cancel',\n            text: 'Cancel'\n          },\n          {\n            type: 'submit',\n            name: 'save',\n            text: 'Save',\n            primary: true\n          }\n        ],\n        initialData: data\n      });\n    };\n\n    const registerCommands = editor => {\n      each$1({\n        mceTableProps: curry(open, editor, false),\n        mceTableRowProps: curry(open$1, editor),\n        mceTableCellProps: curry(open$2, editor)\n      }, (func, name) => editor.addCommand(name, () => func()));\n      editor.addCommand('mceInsertTableDialog', _ui => {\n        open(editor, true);\n      });\n    };\n\n    const child = (scope, selector) => child$1(scope, selector).isSome();\n\n    const selection = identity;\n    const unmergable = selectedCells => {\n      const hasSpan = (elem, type) => getOpt(elem, type).exists(span => parseInt(span, 10) > 1);\n      const hasRowOrColSpan = elem => hasSpan(elem, 'rowspan') || hasSpan(elem, 'colspan');\n      return selectedCells.length > 0 && forall(selectedCells, hasRowOrColSpan) ? Optional.some(selectedCells) : Optional.none();\n    };\n    const mergable = (table, selectedCells, ephemera) => {\n      if (selectedCells.length <= 1) {\n        return Optional.none();\n      } else {\n        return retrieveBox(table, ephemera.firstSelectedSelector, ephemera.lastSelectedSelector).map(bounds => ({\n          bounds,\n          cells: selectedCells\n        }));\n      }\n    };\n\n    const noMenu = cell => ({\n      element: cell,\n      mergable: Optional.none(),\n      unmergable: Optional.none(),\n      selection: [cell]\n    });\n    const forMenu = (selectedCells, table, cell) => ({\n      element: cell,\n      mergable: mergable(table, selectedCells, ephemera),\n      unmergable: unmergable(selectedCells),\n      selection: selection(selectedCells)\n    });\n\n    const getSelectionTargets = editor => {\n      const targets = Cell(Optional.none());\n      const changeHandlers = Cell([]);\n      let selectionDetails = Optional.none();\n      const isCaption = isTag('caption');\n      const isDisabledForSelection = key => selectionDetails.forall(details => !details[key]);\n      const getStart = () => getSelectionCellOrCaption(getSelectionStart(editor), getIsRoot(editor));\n      const getEnd = () => getSelectionCellOrCaption(getSelectionEnd(editor), getIsRoot(editor));\n      const findTargets = () => getStart().bind(startCellOrCaption => flatten(lift2(table(startCellOrCaption), getEnd().bind(table), (startTable, endTable) => {\n        if (eq(startTable, endTable)) {\n          if (isCaption(startCellOrCaption)) {\n            return Optional.some(noMenu(startCellOrCaption));\n          } else {\n            return Optional.some(forMenu(getCellsFromSelection(editor), startTable, startCellOrCaption));\n          }\n        }\n        return Optional.none();\n      })));\n      const getExtractedDetails = targets => {\n        const tableOpt = table(targets.element);\n        return tableOpt.map(table => {\n          const warehouse = Warehouse.fromTable(table);\n          const selectedCells = onCells(warehouse, targets).getOr([]);\n          const locked = foldl(selectedCells, (acc, cell) => {\n            if (cell.isLocked) {\n              acc.onAny = true;\n              if (cell.column === 0) {\n                acc.onFirst = true;\n              } else if (cell.column + cell.colspan >= warehouse.grid.columns) {\n                acc.onLast = true;\n              }\n            }\n            return acc;\n          }, {\n            onAny: false,\n            onFirst: false,\n            onLast: false\n          });\n          return {\n            mergeable: onUnlockedMergable(warehouse, targets).isSome(),\n            unmergeable: onUnlockedUnmergable(warehouse, targets).isSome(),\n            locked\n          };\n        });\n      };\n      const resetTargets = () => {\n        targets.set(cached(findTargets)());\n        selectionDetails = targets.get().bind(getExtractedDetails);\n        each(changeHandlers.get(), call);\n      };\n      const setupHandler = handler => {\n        handler();\n        changeHandlers.set(changeHandlers.get().concat([handler]));\n        return () => {\n          changeHandlers.set(filter(changeHandlers.get(), h => h !== handler));\n        };\n      };\n      const onSetup = (api, isDisabled) => setupHandler(() => targets.get().fold(() => {\n        api.setEnabled(false);\n      }, targets => {\n        api.setEnabled(!isDisabled(targets));\n      }));\n      const onSetupWithToggle = (api, isDisabled, isActive) => setupHandler(() => targets.get().fold(() => {\n        api.setEnabled(false);\n        api.setActive(false);\n      }, targets => {\n        api.setEnabled(!isDisabled(targets));\n        api.setActive(isActive(targets));\n      }));\n      const isDisabledFromLocked = lockedDisable => selectionDetails.exists(details => details.locked[lockedDisable]);\n      const onSetupTable = api => onSetup(api, _ => false);\n      const onSetupCellOrRow = api => onSetup(api, targets => isCaption(targets.element));\n      const onSetupColumn = lockedDisable => api => onSetup(api, targets => isCaption(targets.element) || isDisabledFromLocked(lockedDisable));\n      const onSetupPasteable = getClipboardData => api => onSetup(api, targets => isCaption(targets.element) || getClipboardData().isNone());\n      const onSetupPasteableColumn = (getClipboardData, lockedDisable) => api => onSetup(api, targets => isCaption(targets.element) || getClipboardData().isNone() || isDisabledFromLocked(lockedDisable));\n      const onSetupMergeable = api => onSetup(api, _targets => isDisabledForSelection('mergeable'));\n      const onSetupUnmergeable = api => onSetup(api, _targets => isDisabledForSelection('unmergeable'));\n      const onSetupTableWithCaption = api => {\n        return onSetupWithToggle(api, never, targets => {\n          const tableOpt = table(targets.element, getIsRoot(editor));\n          return tableOpt.exists(table => child(table, 'caption'));\n        });\n      };\n      const onSetupTableHeaders = (command, headerType) => api => {\n        return onSetupWithToggle(api, targets => isCaption(targets.element), () => editor.queryCommandValue(command) === headerType);\n      };\n      const onSetupTableRowHeaders = onSetupTableHeaders('mceTableRowType', 'header');\n      const onSetupTableColumnHeaders = onSetupTableHeaders('mceTableColType', 'th');\n      editor.on('NodeChange ExecCommand TableSelectorChange', resetTargets);\n      return {\n        onSetupTable,\n        onSetupCellOrRow,\n        onSetupColumn,\n        onSetupPasteable,\n        onSetupPasteableColumn,\n        onSetupMergeable,\n        onSetupUnmergeable,\n        resetTargets,\n        onSetupTableWithCaption,\n        onSetupTableRowHeaders,\n        onSetupTableColumnHeaders,\n        targets: targets.get\n      };\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.FakeClipboard');\n\n    const tableTypeBase = 'x-tinymce/dom-table-';\n    const tableTypeRow = tableTypeBase + 'rows';\n    const tableTypeColumn = tableTypeBase + 'columns';\n    const getData = type => {\n      var _a;\n      const items = (_a = global.read()) !== null && _a !== void 0 ? _a : [];\n      return findMap(items, item => Optional.from(item.getType(type)));\n    };\n    const getRows = () => getData(tableTypeRow);\n    const getColumns = () => getData(tableTypeColumn);\n\n    const addButtons = (editor, selectionTargets) => {\n      editor.ui.registry.addMenuButton('table', {\n        tooltip: 'Table',\n        icon: 'table',\n        fetch: callback => callback('inserttable | cell row column | advtablesort | tableprops deletetable')\n      });\n      const cmd = command => () => editor.execCommand(command);\n      const addButtonIfRegistered = (name, spec) => {\n        if (editor.queryCommandSupported(spec.command)) {\n          editor.ui.registry.addButton(name, {\n            ...spec,\n            onAction: isFunction(spec.onAction) ? spec.onAction : cmd(spec.command)\n          });\n        }\n      };\n      const addToggleButtonIfRegistered = (name, spec) => {\n        if (editor.queryCommandSupported(spec.command)) {\n          editor.ui.registry.addToggleButton(name, {\n            ...spec,\n            onAction: isFunction(spec.onAction) ? spec.onAction : cmd(spec.command)\n          });\n        }\n      };\n      addButtonIfRegistered('tableprops', {\n        tooltip: 'Table properties',\n        command: 'mceTableProps',\n        icon: 'table',\n        onSetup: selectionTargets.onSetupTable\n      });\n      addButtonIfRegistered('tabledelete', {\n        tooltip: 'Delete table',\n        command: 'mceTableDelete',\n        icon: 'table-delete-table',\n        onSetup: selectionTargets.onSetupTable\n      });\n      addButtonIfRegistered('tablecellprops', {\n        tooltip: 'Cell properties',\n        command: 'mceTableCellProps',\n        icon: 'table-cell-properties',\n        onSetup: selectionTargets.onSetupCellOrRow\n      });\n      addButtonIfRegistered('tablemergecells', {\n        tooltip: 'Merge cells',\n        command: 'mceTableMergeCells',\n        icon: 'table-merge-cells',\n        onSetup: selectionTargets.onSetupMergeable\n      });\n      addButtonIfRegistered('tablesplitcells', {\n        tooltip: 'Split cell',\n        command: 'mceTableSplitCells',\n        icon: 'table-split-cells',\n        onSetup: selectionTargets.onSetupUnmergeable\n      });\n      addButtonIfRegistered('tableinsertrowbefore', {\n        tooltip: 'Insert row before',\n        command: 'mceTableInsertRowBefore',\n        icon: 'table-insert-row-above',\n        onSetup: selectionTargets.onSetupCellOrRow\n      });\n      addButtonIfRegistered('tableinsertrowafter', {\n        tooltip: 'Insert row after',\n        command: 'mceTableInsertRowAfter',\n        icon: 'table-insert-row-after',\n        onSetup: selectionTargets.onSetupCellOrRow\n      });\n      addButtonIfRegistered('tabledeleterow', {\n        tooltip: 'Delete row',\n        command: 'mceTableDeleteRow',\n        icon: 'table-delete-row',\n        onSetup: selectionTargets.onSetupCellOrRow\n      });\n      addButtonIfRegistered('tablerowprops', {\n        tooltip: 'Row properties',\n        command: 'mceTableRowProps',\n        icon: 'table-row-properties',\n        onSetup: selectionTargets.onSetupCellOrRow\n      });\n      addButtonIfRegistered('tableinsertcolbefore', {\n        tooltip: 'Insert column before',\n        command: 'mceTableInsertColBefore',\n        icon: 'table-insert-column-before',\n        onSetup: selectionTargets.onSetupColumn('onFirst')\n      });\n      addButtonIfRegistered('tableinsertcolafter', {\n        tooltip: 'Insert column after',\n        command: 'mceTableInsertColAfter',\n        icon: 'table-insert-column-after',\n        onSetup: selectionTargets.onSetupColumn('onLast')\n      });\n      addButtonIfRegistered('tabledeletecol', {\n        tooltip: 'Delete column',\n        command: 'mceTableDeleteCol',\n        icon: 'table-delete-column',\n        onSetup: selectionTargets.onSetupColumn('onAny')\n      });\n      addButtonIfRegistered('tablecutrow', {\n        tooltip: 'Cut row',\n        command: 'mceTableCutRow',\n        icon: 'cut-row',\n        onSetup: selectionTargets.onSetupCellOrRow\n      });\n      addButtonIfRegistered('tablecopyrow', {\n        tooltip: 'Copy row',\n        command: 'mceTableCopyRow',\n        icon: 'duplicate-row',\n        onSetup: selectionTargets.onSetupCellOrRow\n      });\n      addButtonIfRegistered('tablepasterowbefore', {\n        tooltip: 'Paste row before',\n        command: 'mceTablePasteRowBefore',\n        icon: 'paste-row-before',\n        onSetup: selectionTargets.onSetupPasteable(getRows)\n      });\n      addButtonIfRegistered('tablepasterowafter', {\n        tooltip: 'Paste row after',\n        command: 'mceTablePasteRowAfter',\n        icon: 'paste-row-after',\n        onSetup: selectionTargets.onSetupPasteable(getRows)\n      });\n      addButtonIfRegistered('tablecutcol', {\n        tooltip: 'Cut column',\n        command: 'mceTableCutCol',\n        icon: 'cut-column',\n        onSetup: selectionTargets.onSetupColumn('onAny')\n      });\n      addButtonIfRegistered('tablecopycol', {\n        tooltip: 'Copy column',\n        command: 'mceTableCopyCol',\n        icon: 'duplicate-column',\n        onSetup: selectionTargets.onSetupColumn('onAny')\n      });\n      addButtonIfRegistered('tablepastecolbefore', {\n        tooltip: 'Paste column before',\n        command: 'mceTablePasteColBefore',\n        icon: 'paste-column-before',\n        onSetup: selectionTargets.onSetupPasteableColumn(getColumns, 'onFirst')\n      });\n      addButtonIfRegistered('tablepastecolafter', {\n        tooltip: 'Paste column after',\n        command: 'mceTablePasteColAfter',\n        icon: 'paste-column-after',\n        onSetup: selectionTargets.onSetupPasteableColumn(getColumns, 'onLast')\n      });\n      addButtonIfRegistered('tableinsertdialog', {\n        tooltip: 'Insert table',\n        command: 'mceInsertTableDialog',\n        icon: 'table'\n      });\n      const tableClassList = filterNoneItem(getTableClassList(editor));\n      if (tableClassList.length !== 0 && editor.queryCommandSupported('mceTableToggleClass')) {\n        editor.ui.registry.addMenuButton('tableclass', {\n          icon: 'table-classes',\n          tooltip: 'Table styles',\n          fetch: generateMenuItemsCallback(editor, tableClassList, 'tableclass', value => editor.execCommand('mceTableToggleClass', false, value)),\n          onSetup: selectionTargets.onSetupTable\n        });\n      }\n      const tableCellClassList = filterNoneItem(getCellClassList(editor));\n      if (tableCellClassList.length !== 0 && editor.queryCommandSupported('mceTableCellToggleClass')) {\n        editor.ui.registry.addMenuButton('tablecellclass', {\n          icon: 'table-cell-classes',\n          tooltip: 'Cell styles',\n          fetch: generateMenuItemsCallback(editor, tableCellClassList, 'tablecellclass', value => editor.execCommand('mceTableCellToggleClass', false, value)),\n          onSetup: selectionTargets.onSetupCellOrRow\n        });\n      }\n      if (editor.queryCommandSupported('mceTableApplyCellStyle')) {\n        editor.ui.registry.addMenuButton('tablecellvalign', {\n          icon: 'vertical-align',\n          tooltip: 'Vertical align',\n          fetch: generateMenuItemsCallback(editor, verticalAlignValues, 'tablecellverticalalign', applyTableCellStyle(editor, 'vertical-align')),\n          onSetup: selectionTargets.onSetupCellOrRow\n        });\n        editor.ui.registry.addMenuButton('tablecellborderwidth', {\n          icon: 'border-width',\n          tooltip: 'Border width',\n          fetch: generateMenuItemsCallback(editor, getTableBorderWidths(editor), 'tablecellborderwidth', applyTableCellStyle(editor, 'border-width')),\n          onSetup: selectionTargets.onSetupCellOrRow\n        });\n        editor.ui.registry.addMenuButton('tablecellborderstyle', {\n          icon: 'border-style',\n          tooltip: 'Border style',\n          fetch: generateMenuItemsCallback(editor, getTableBorderStyles(editor), 'tablecellborderstyle', applyTableCellStyle(editor, 'border-style')),\n          onSetup: selectionTargets.onSetupCellOrRow\n        });\n        editor.ui.registry.addMenuButton('tablecellbackgroundcolor', {\n          icon: 'cell-background-color',\n          tooltip: 'Background color',\n          fetch: callback => callback(buildColorMenu(editor, getTableBackgroundColorMap(editor), 'background-color')),\n          onSetup: selectionTargets.onSetupCellOrRow\n        });\n        editor.ui.registry.addMenuButton('tablecellbordercolor', {\n          icon: 'cell-border-color',\n          tooltip: 'Border color',\n          fetch: callback => callback(buildColorMenu(editor, getTableBorderColorMap(editor), 'border-color')),\n          onSetup: selectionTargets.onSetupCellOrRow\n        });\n      }\n      addToggleButtonIfRegistered('tablecaption', {\n        tooltip: 'Table caption',\n        icon: 'table-caption',\n        command: 'mceTableToggleCaption',\n        onSetup: selectionTargets.onSetupTableWithCaption\n      });\n      addToggleButtonIfRegistered('tablerowheader', {\n        tooltip: 'Row header',\n        icon: 'table-top-header',\n        command: 'mceTableRowType',\n        onAction: changeRowHeader(editor),\n        onSetup: selectionTargets.onSetupTableRowHeaders\n      });\n      addToggleButtonIfRegistered('tablecolheader', {\n        tooltip: 'Column header',\n        icon: 'table-left-header',\n        command: 'mceTableColType',\n        onAction: changeColumnHeader(editor),\n        onSetup: selectionTargets.onSetupTableColumnHeaders\n      });\n    };\n    const addToolbars = editor => {\n      const isTable = table => editor.dom.is(table, 'table') && editor.getBody().contains(table);\n      const toolbar = getToolbar(editor);\n      if (toolbar.length > 0) {\n        editor.ui.registry.addContextToolbar('table', {\n          predicate: isTable,\n          items: toolbar,\n          scope: 'node',\n          position: 'node'\n        });\n      }\n    };\n\n    const addMenuItems = (editor, selectionTargets) => {\n      const cmd = command => () => editor.execCommand(command);\n      const addMenuIfRegistered = (name, spec) => {\n        if (editor.queryCommandSupported(spec.command)) {\n          editor.ui.registry.addMenuItem(name, {\n            ...spec,\n            onAction: isFunction(spec.onAction) ? spec.onAction : cmd(spec.command)\n          });\n          return true;\n        } else {\n          return false;\n        }\n      };\n      const addToggleMenuIfRegistered = (name, spec) => {\n        if (editor.queryCommandSupported(spec.command)) {\n          editor.ui.registry.addToggleMenuItem(name, {\n            ...spec,\n            onAction: isFunction(spec.onAction) ? spec.onAction : cmd(spec.command)\n          });\n        }\n      };\n      const insertTableAction = data => {\n        editor.execCommand('mceInsertTable', false, {\n          rows: data.numRows,\n          columns: data.numColumns\n        });\n      };\n      const hasRowMenuItems = [\n        addMenuIfRegistered('tableinsertrowbefore', {\n          text: 'Insert row before',\n          icon: 'table-insert-row-above',\n          command: 'mceTableInsertRowBefore',\n          onSetup: selectionTargets.onSetupCellOrRow\n        }),\n        addMenuIfRegistered('tableinsertrowafter', {\n          text: 'Insert row after',\n          icon: 'table-insert-row-after',\n          command: 'mceTableInsertRowAfter',\n          onSetup: selectionTargets.onSetupCellOrRow\n        }),\n        addMenuIfRegistered('tabledeleterow', {\n          text: 'Delete row',\n          icon: 'table-delete-row',\n          command: 'mceTableDeleteRow',\n          onSetup: selectionTargets.onSetupCellOrRow\n        }),\n        addMenuIfRegistered('tablerowprops', {\n          text: 'Row properties',\n          icon: 'table-row-properties',\n          command: 'mceTableRowProps',\n          onSetup: selectionTargets.onSetupCellOrRow\n        }),\n        addMenuIfRegistered('tablecutrow', {\n          text: 'Cut row',\n          icon: 'cut-row',\n          command: 'mceTableCutRow',\n          onSetup: selectionTargets.onSetupCellOrRow\n        }),\n        addMenuIfRegistered('tablecopyrow', {\n          text: 'Copy row',\n          icon: 'duplicate-row',\n          command: 'mceTableCopyRow',\n          onSetup: selectionTargets.onSetupCellOrRow\n        }),\n        addMenuIfRegistered('tablepasterowbefore', {\n          text: 'Paste row before',\n          icon: 'paste-row-before',\n          command: 'mceTablePasteRowBefore',\n          onSetup: selectionTargets.onSetupPasteable(getRows)\n        }),\n        addMenuIfRegistered('tablepasterowafter', {\n          text: 'Paste row after',\n          icon: 'paste-row-after',\n          command: 'mceTablePasteRowAfter',\n          onSetup: selectionTargets.onSetupPasteable(getRows)\n        })\n      ];\n      const hasColumnMenuItems = [\n        addMenuIfRegistered('tableinsertcolumnbefore', {\n          text: 'Insert column before',\n          icon: 'table-insert-column-before',\n          command: 'mceTableInsertColBefore',\n          onSetup: selectionTargets.onSetupColumn('onFirst')\n        }),\n        addMenuIfRegistered('tableinsertcolumnafter', {\n          text: 'Insert column after',\n          icon: 'table-insert-column-after',\n          command: 'mceTableInsertColAfter',\n          onSetup: selectionTargets.onSetupColumn('onLast')\n        }),\n        addMenuIfRegistered('tabledeletecolumn', {\n          text: 'Delete column',\n          icon: 'table-delete-column',\n          command: 'mceTableDeleteCol',\n          onSetup: selectionTargets.onSetupColumn('onAny')\n        }),\n        addMenuIfRegistered('tablecutcolumn', {\n          text: 'Cut column',\n          icon: 'cut-column',\n          command: 'mceTableCutCol',\n          onSetup: selectionTargets.onSetupColumn('onAny')\n        }),\n        addMenuIfRegistered('tablecopycolumn', {\n          text: 'Copy column',\n          icon: 'duplicate-column',\n          command: 'mceTableCopyCol',\n          onSetup: selectionTargets.onSetupColumn('onAny')\n        }),\n        addMenuIfRegistered('tablepastecolumnbefore', {\n          text: 'Paste column before',\n          icon: 'paste-column-before',\n          command: 'mceTablePasteColBefore',\n          onSetup: selectionTargets.onSetupPasteableColumn(getColumns, 'onFirst')\n        }),\n        addMenuIfRegistered('tablepastecolumnafter', {\n          text: 'Paste column after',\n          icon: 'paste-column-after',\n          command: 'mceTablePasteColAfter',\n          onSetup: selectionTargets.onSetupPasteableColumn(getColumns, 'onLast')\n        })\n      ];\n      const hasCellMenuItems = [\n        addMenuIfRegistered('tablecellprops', {\n          text: 'Cell properties',\n          icon: 'table-cell-properties',\n          command: 'mceTableCellProps',\n          onSetup: selectionTargets.onSetupCellOrRow\n        }),\n        addMenuIfRegistered('tablemergecells', {\n          text: 'Merge cells',\n          icon: 'table-merge-cells',\n          command: 'mceTableMergeCells',\n          onSetup: selectionTargets.onSetupMergeable\n        }),\n        addMenuIfRegistered('tablesplitcells', {\n          text: 'Split cell',\n          icon: 'table-split-cells',\n          command: 'mceTableSplitCells',\n          onSetup: selectionTargets.onSetupUnmergeable\n        })\n      ];\n      if (!hasTableGrid(editor)) {\n        editor.ui.registry.addMenuItem('inserttable', {\n          text: 'Table',\n          icon: 'table',\n          onAction: cmd('mceInsertTableDialog')\n        });\n      } else {\n        editor.ui.registry.addNestedMenuItem('inserttable', {\n          text: 'Table',\n          icon: 'table',\n          getSubmenuItems: () => [{\n              type: 'fancymenuitem',\n              fancytype: 'inserttable',\n              onAction: insertTableAction\n            }]\n        });\n      }\n      editor.ui.registry.addMenuItem('inserttabledialog', {\n        text: 'Insert table',\n        icon: 'table',\n        onAction: cmd('mceInsertTableDialog')\n      });\n      addMenuIfRegistered('tableprops', {\n        text: 'Table properties',\n        onSetup: selectionTargets.onSetupTable,\n        command: 'mceTableProps'\n      });\n      addMenuIfRegistered('deletetable', {\n        text: 'Delete table',\n        icon: 'table-delete-table',\n        onSetup: selectionTargets.onSetupTable,\n        command: 'mceTableDelete'\n      });\n      if (contains(hasRowMenuItems, true)) {\n        editor.ui.registry.addNestedMenuItem('row', {\n          type: 'nestedmenuitem',\n          text: 'Row',\n          getSubmenuItems: constant('tableinsertrowbefore tableinsertrowafter tabledeleterow tablerowprops | tablecutrow tablecopyrow tablepasterowbefore tablepasterowafter')\n        });\n      }\n      if (contains(hasColumnMenuItems, true)) {\n        editor.ui.registry.addNestedMenuItem('column', {\n          type: 'nestedmenuitem',\n          text: 'Column',\n          getSubmenuItems: constant('tableinsertcolumnbefore tableinsertcolumnafter tabledeletecolumn | tablecutcolumn tablecopycolumn tablepastecolumnbefore tablepastecolumnafter')\n        });\n      }\n      if (contains(hasCellMenuItems, true)) {\n        editor.ui.registry.addNestedMenuItem('cell', {\n          type: 'nestedmenuitem',\n          text: 'Cell',\n          getSubmenuItems: constant('tablecellprops tablemergecells tablesplitcells')\n        });\n      }\n      editor.ui.registry.addContextMenu('table', {\n        update: () => {\n          selectionTargets.resetTargets();\n          return selectionTargets.targets().fold(constant(''), targets => {\n            if (name(targets.element) === 'caption') {\n              return 'tableprops deletetable';\n            } else {\n              return 'cell row column | advtablesort | tableprops deletetable';\n            }\n          });\n        }\n      });\n      const tableClassList = filterNoneItem(getTableClassList(editor));\n      if (tableClassList.length !== 0 && editor.queryCommandSupported('mceTableToggleClass')) {\n        editor.ui.registry.addNestedMenuItem('tableclass', {\n          icon: 'table-classes',\n          text: 'Table styles',\n          getSubmenuItems: () => buildMenuItems(editor, tableClassList, 'tableclass', value => editor.execCommand('mceTableToggleClass', false, value)),\n          onSetup: selectionTargets.onSetupTable\n        });\n      }\n      const tableCellClassList = filterNoneItem(getCellClassList(editor));\n      if (tableCellClassList.length !== 0 && editor.queryCommandSupported('mceTableCellToggleClass')) {\n        editor.ui.registry.addNestedMenuItem('tablecellclass', {\n          icon: 'table-cell-classes',\n          text: 'Cell styles',\n          getSubmenuItems: () => buildMenuItems(editor, tableCellClassList, 'tablecellclass', value => editor.execCommand('mceTableCellToggleClass', false, value)),\n          onSetup: selectionTargets.onSetupCellOrRow\n        });\n      }\n      if (editor.queryCommandSupported('mceTableApplyCellStyle')) {\n        editor.ui.registry.addNestedMenuItem('tablecellvalign', {\n          icon: 'vertical-align',\n          text: 'Vertical align',\n          getSubmenuItems: () => buildMenuItems(editor, verticalAlignValues, 'tablecellverticalalign', applyTableCellStyle(editor, 'vertical-align')),\n          onSetup: selectionTargets.onSetupCellOrRow\n        });\n        editor.ui.registry.addNestedMenuItem('tablecellborderwidth', {\n          icon: 'border-width',\n          text: 'Border width',\n          getSubmenuItems: () => buildMenuItems(editor, getTableBorderWidths(editor), 'tablecellborderwidth', applyTableCellStyle(editor, 'border-width')),\n          onSetup: selectionTargets.onSetupCellOrRow\n        });\n        editor.ui.registry.addNestedMenuItem('tablecellborderstyle', {\n          icon: 'border-style',\n          text: 'Border style',\n          getSubmenuItems: () => buildMenuItems(editor, getTableBorderStyles(editor), 'tablecellborderstyle', applyTableCellStyle(editor, 'border-style')),\n          onSetup: selectionTargets.onSetupCellOrRow\n        });\n        editor.ui.registry.addNestedMenuItem('tablecellbackgroundcolor', {\n          icon: 'cell-background-color',\n          text: 'Background color',\n          getSubmenuItems: () => buildColorMenu(editor, getTableBackgroundColorMap(editor), 'background-color'),\n          onSetup: selectionTargets.onSetupCellOrRow\n        });\n        editor.ui.registry.addNestedMenuItem('tablecellbordercolor', {\n          icon: 'cell-border-color',\n          text: 'Border color',\n          getSubmenuItems: () => buildColorMenu(editor, getTableBorderColorMap(editor), 'border-color'),\n          onSetup: selectionTargets.onSetupCellOrRow\n        });\n      }\n      addToggleMenuIfRegistered('tablecaption', {\n        icon: 'table-caption',\n        text: 'Table caption',\n        command: 'mceTableToggleCaption',\n        onSetup: selectionTargets.onSetupTableWithCaption\n      });\n      addToggleMenuIfRegistered('tablerowheader', {\n        text: 'Row header',\n        icon: 'table-top-header',\n        command: 'mceTableRowType',\n        onAction: changeRowHeader(editor),\n        onSetup: selectionTargets.onSetupTableRowHeaders\n      });\n      addToggleMenuIfRegistered('tablecolheader', {\n        text: 'Column header',\n        icon: 'table-left-header',\n        command: 'mceTableColType',\n        onAction: changeColumnHeader(editor),\n        onSetup: selectionTargets.onSetupTableRowHeaders\n      });\n    };\n\n    const Plugin = editor => {\n      const selectionTargets = getSelectionTargets(editor);\n      register(editor);\n      registerCommands(editor);\n      addMenuItems(editor, selectionTargets);\n      addButtons(editor, selectionTargets);\n      addToolbars(editor);\n    };\n    var Plugin$1 = () => {\n      global$3.add('table', Plugin);\n    };\n\n    Plugin$1();\n\n})();\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}